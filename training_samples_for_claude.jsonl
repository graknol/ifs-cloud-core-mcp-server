{"id": "InventoryPart_Check_Insert___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Check_Insert___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 368, "code_lines": 321, "cyclomatic_complexity": 205, "estimated_tokens": 1623.7}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 16839, "truncated_length": 1633, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09697725518142407}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT inventory_part_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                         VARCHAR2(30);\n   value_                        VARCHAR2(4000);\n   unit_type_                    VARCHAR2(200);   \n   part_catalog_rec_             Part_Catalog_API.Public_Rec;\n   site_rec_                     Site_API.Public_Rec;\n   country_code_                 VARCHAR2(3);\n   noninv_sales_part_exist_      NUMBER;\n-- ... key business logic ...\n   IF (part_catalog_rec_.configurable = 'CONFIGURED') THEN\n      IF (NOT indrec_.inventory_part_cost_level) THEN\n      END IF;\n      IF (newrec_.inventory_valuation_method IN ('FIFO','LIFO')) THEN\n         -- Inventory valuation methods FIFO and LIFO is not allowed for configured\n         IF (NOT indrec_.inventory_valuation_method) THEN\n         END IF;\n      END IF;\n   END IF;\n   --When creating an Inventory Part for an existing catch unit handled part in Part Catalog or if the part is a tracked part\n   IF (NOT indrec_.negative_on_hand) THEN \n      IF ((part_catalog_rec_.catch_unit_enabled          = Fnd_Boolean_API.db_true) OR \n          (part_catalog_rec_.lot_tracking_code          != 'NOT LOT TRACKING')) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF ((newrec_.invoice_consideration = 'TRANSACTION BASED') AND (newrec_.inventory_valuation_method = 'ST')) THEN\n      IF (part_catalog_rec_.serial_tracking_code = Part_Serial_Tracking_API.db_serial_tracking) THEN\n         IF (NOT indrec_.inventory_part_cost_level) THEN \n         END IF;\n      ELSE\n         IF (NOT indrec_.invoice_consideration) THEN ", "original_code_length": 16839, "summary": null}
{"id": "UserAccess_Is_User_Available_Emp_No", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Is_User_Available_Emp_No", "previous_function": null, "next_function": "Is_Person_Available_Emp_No", "complexity_metrics": {"total_lines": 534, "code_lines": 500, "cyclomatic_complexity": 135, "estimated_tokens": 2290.6}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 27165, "truncated_length": 1641, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.060408614025400334}}, "code": "PROCEDURE Is_User_Available_Emp_No ( \n   is_app_owner_      OUT    VARCHAR2,\n   is_hr_mgr_         OUT    VARCHAR2,\n   is_own_emp_no_     OUT    VARCHAR2,\n   own_data_attr_     IN OUT VARCHAR2,\n   data_access_attr_  IN OUT VARCHAR2,\n   emp_no_            IN OUT VARCHAR2,\n   company_id_        IN     VARCHAR2,\n   trans_date_        IN     DATE DEFAULT NULL,\n   access_own_emp_no_ IN     VARCHAR2 DEFAULT '1',\n   check_hr_mgr_      IN     VARCHAR2 DEFAULT '1',\n   org_code_          IN     VARCHAR2 DEFAULT NULL,\n-- ... key business logic ...\n                  SELECT s.business_unit_id org_bu_id,\n   CURSOR get_org_access_attrib(access_role_id_ IN VARCHAR2, substitute_entry_ IN VARCHAR2, substitute_seq_id_ IN NUMBER) IS\n         SELECT r.attribute_id,\n         SELECT r.attribute_id,\n   CURSOR get_emp_bu IS\n       SELECT business_unit_id\n   IF NOT Is_Cache_Valid___ THEN\n      New_Modify_User_Data;\n   END IF;\n   IF micro_cache_access_config_type_ = 'ORG_POSITION_ACCESS' THEN \n      IF check_appowner_ = '1' AND micro_cache_database_owner_ THEN\n      END IF;\n      IF (company_access_ IS NULL OR company_id_ <> company_access_) THEN\n      END IF;\n      IF (check_hr_mgr_ = '1') AND micro_cache_manager_user_ THEN\n      END IF;\n      IF access_own_emp_no_ = '1' THEN\n         IF (start_pos_emp_ > 0) THEN\n            IF (exist_ > 0) THEN\n               IF logical_unit_id_ IS NOT NULL THEN\n               END IF;\n               IF org_code_ IS NOT NULL AND Company_Org_API.Get_Exclusive_Reg(company_id_, org_code_) = 'TRUE' THEN\n               END IF;\n               IF trans_date_ IS NULL THEN\n               ELSE\n               END IF;", "original_code_length": 27165, "summary": null}
{"id": "InventoryPart_Check_Value_Method_Change___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Check_Value_Method_Change___", "previous_function": "Check_Value_Method_Combinat___", "next_function": null, "complexity_metrics": {"total_lines": 184, "code_lines": 158, "cyclomatic_complexity": 134, "estimated_tokens": 1209.0}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 10161, "truncated_length": 1683, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.16563330380868024}}, "code": "PROCEDURE Check_Value_Method_Change___ (\n   newrec_ IN inventory_part_tab%ROWTYPE,\n   oldrec_ IN inventory_part_tab%ROWTYPE )\nIS\n   exist_                   NUMBER;\n   part_exist_              NUMBER;\n   quantity_exist_          BOOLEAN;   \n   qty_to_deliv_confirm_    NUMBER;\n   qty_in_consignment_      NUMBER;\n   qty_in_exchange_         NUMBER;\n   open_shop_orders_exist_  NUMBER := 0;\n   qty_at_customer_fetched_ BOOLEAN := FALSE;\n-- ... key business logic ...\n              exist_ := Purchase_Part_Supplier_API.Check_Consignment_Exist(newrec_.contract, newrec_.part_no);           \n              IF (exist_ = 1) THEN\n                 Error_SYS.Record_General(lu_name_, 'PARTSUPPLIER: The inventory valuation method must be :P1 when there are Purchase part suppliers marked with consignment.', Inventory_Value_Method_API.Decode('ST'));\n              END IF;\n           $IF (Component_Purch_SYS.INSTALLED) $THEN\n              exist_ := Purchase_Order_Line_Part_API.Check_Consignment_Exist(newrec_.contract, newrec_.part_no);\n              IF (exist_ = 1) THEN\n                 Error_SYS.Record_General(lu_name_, 'ORDERLINE: The inventory valuation method must be :P1 when there are Purchase order lines marked with consignment.', Inventory_Value_Method_API.Decode('ST'));\n              END IF;\n      END IF;\n      IF newrec_.inventory_valuation_method != 'ST' THEN\n         IF Inventory_Part_In_Stock_API.Is_Part_In_Fa_Rotable_Pool(newrec_.contract, newrec_.part_no) = 1 THEN\n            Error_SYS.Record_General(lu_name_, 'PARTINPOOL: The inventory valuation method must be :P1 when the part exists in a fixed asset rotable part pool.', Inventory_Value_Method_API.Decode('ST'));", "original_code_length": 10161, "summary": null}
{"id": "InventoryPart_Check_Value_Method_Combinat___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Check_Value_Method_Combinat___", "previous_function": "Convert_Storage_Req_Uom___", "next_function": "Check_Value_Method_Change___", "complexity_metrics": {"total_lines": 156, "code_lines": 153, "cyclomatic_complexity": 105, "estimated_tokens": 1189.5}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 12419, "truncated_length": 1723, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.13873902890731943}}, "code": "PROCEDURE Check_Value_Method_Combinat___ (\n   newrec_                        IN inventory_part_tab%ROWTYPE,\n   configurable_db_               IN VARCHAR2,\n   condition_code_usage_db_       IN VARCHAR2,\n   lot_tracking_code_db_          IN VARCHAR2,\n   serial_tracking_code_db_       IN VARCHAR2,\n   receipt_issue_serial_track_db_ IN VARCHAR2 )\nIS\nBEGIN\n\n   IF (newrec_.inventory_valuation_method = 'ST') THEN\n--    **********************************************\n-- ... key business logic ...\n            END IF;\n         ELSE\n            IF (newrec_.inventory_part_cost_level != 'COST PER PART') THEN\n            END IF;\n         END IF;\n         IF (newrec_.zero_cost_flag = 'O') THEN\n         END IF;\n      END IF;\n      IF (newrec_.invoice_consideration ='TRANSACTION BASED') THEN\n         IF (newrec_.inventory_part_cost_level != 'COST PER SERIAL') THEN\n         END IF;\n      END IF;\n      IF (newrec_.ext_service_cost_method = 'INCLUDE SERVICE COST') THEN\n         IF (newrec_.inventory_part_cost_level != 'COST PER SERIAL') THEN\n         END IF;\n      END IF;\n   ELSIF (newrec_.inventory_valuation_method = 'AV') THEN\n      IF ((newrec_.negative_on_hand = 'NEG ONHAND OK')) THEN\n      END IF;\n      IF (newrec_.inventory_part_cost_level NOT IN ('COST PER PART',\n                                                    'COST PER LOT BATCH')) THEN\n      END IF;\n      IF (newrec_.inventory_part_cost_level = Inventory_Part_Cost_Level_API.db_cost_per_lot_batch) THEN\n         IF (lot_tracking_code_db_ = Part_Lot_Tracking_API.db_not_lot_tracking) THEN\n            Raise_Lot_Bat_Cost_Lvl_Error___(newrec_);\n         ELSE\n            IF ((serial_tracking_code_db_       = Part_Serial_Tracking_API.db_not_serial_tracking) AND ", "original_code_length": 12419, "summary": null}
{"id": "PartCatalog_Check_Update___", "context": {"api_name": "PartCatalog", "module": "partca", "file_summary": "Inventory management and tracking - PartCatalog", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 162, "code_lines": 143, "cyclomatic_complexity": 97, "estimated_tokens": 894.4}, "pagerank_score": 0.0011234871824286733, "truncation_metadata": {"original_length": 8355, "truncated_length": 1641, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1964093357271095}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     part_catalog_tab%ROWTYPE,\n   newrec_ IN OUT part_catalog_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                          VARCHAR2(30);\n   value_                         VARCHAR2(4000);  \n   invpart_exist_                 VARCHAR2(10);\n   temp_                          NUMBER :=0;\n   input_group_uom_               INPUT_UNIT_MEAS_GROUP_TAB.unit_code%TYPE;\n   mclot_exist_                   VARCHAR2(10);\n-- ... key business logic ...\n      ((oldrec_.input_unit_meas_group_id IS NULL) AND (newrec_.input_unit_meas_group_id IS NOT NULL)) THEN\n      IF (input_group_uom_ != newrec_.unit_code ) THEN\n         Raise_Input_Uom_Error___;\n      END IF;\n   END IF;\n   -- Check whether Unit Code has changed when Input UoM Group is attached.\n   IF (oldrec_.unit_code != newrec_.unit_code) THEN\n      IF (newrec_.input_unit_meas_group_id IS NOT NULL)  THEN\n         Error_SYS.Record_General(lu_name_,'NOUPDATEUNITCODE: Unit Code can not be changed when an Input UoM Group is connected.');\n      END IF;\n   END IF;\n   IF ((oldrec_.serial_tracking_code       != newrec_.serial_tracking_code      ) OR\n       (oldrec_.serial_rule                != newrec_.serial_rule               )) THEN\n      Check_Valid_Serial___(newrec_,oldrec_); \n   END IF;\n   IF (oldrec_.multilevel_tracking != newrec_.multilevel_tracking) THEN      \n      $IF (Component_Mfgstd_SYS.INSTALLED)$THEN\n         Manuf_Structure_Util_API.Check_Multilevel_Track_Change(newrec_.part_no, newrec_.multilevel_tracking);\n      $ELSE\n   END IF;\n   IF (newrec_.position_part = 'POSITION PART') THEN", "original_code_length": 8355, "summary": null}
{"id": "DataCaptureSession_Handle_Automatic_Values___", "context": {"api_name": "DataCaptureSession", "module": "wadaco", "file_summary": "Business logic and data operations - DataCaptureSession", "function_name": "Handle_Automatic_Values___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 174, "code_lines": 157, "cyclomatic_complexity": 76, "estimated_tokens": 1339.0}, "pagerank_score": 0.001353095076110586, "truncation_metadata": {"original_length": 11820, "truncated_length": 1722, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.14568527918781726}}, "code": "PROCEDURE Handle_Automatic_Values___ (\n   capture_session_id_   IN     NUMBER,\n   process_package_      IN     VARCHAR2,\n   session_rec_          IN     Data_Capture_Session_API.Public_Rec,\n   config_rec_           IN     Data_Capt_Conf_Data_Item_API.Public_Rec,\n   next_item_should_be_defaulted_ IN BOOLEAN,\n   get_next_data_item_   IN OUT BOOLEAN,\n   current_data_item_id_ IN OUT VARCHAR2,\n   default_value_        OUT    VARCHAR2 ) \nIS\n   prev_session_data_item_id_    VARCHAR2(50);\n   prev_session_rec_             Data_Capture_Session_API.Public_Rec;\n-- ... key business logic ...\n      IF (config_rec_.use_fixed_value = Data_Capt_Use_Fixed_Value_API.DB_ALWAYS) THEN\n      ELSIF (config_rec_.use_fixed_value = Data_Capt_Use_Fixed_Value_API.DB_WHEN_APPLICABLE) THEN\n         IF (Database_SYS.Method_Active(process_package_, 'Fixed_Value_Is_Applicable')) THEN\n                         :fixed_value_is_applicable := CASE fixed_value_is_applicable_ WHEN TRUE THEN Fnd_Boolean_API.DB_TRUE ELSE Fnd_Boolean_API.DB_FALSE END;\n            IF (Fnd_Boolean_API.Is_True_Db(fixed_value_is_applicable_)) THEN\n            END IF;\n         END IF;\n      END IF;\n   END IF;\n   -- 3) Fetch any configuration default value for this data item if subsequent item was not used and no configuration fixed value was used\n   IF (NOT subsequent_value_used_ AND NOT config_fixed_value_used_ AND config_rec_.default_value IS NOT NULL) THEN\n   END IF;\n   -- 4) Fetch value from a previous session if user has scanned the same data item in a previous session\n   IF (config_rec_.use_latest_value != Data_Capture_Value_Usage_API.DB_OFF AND \n       NOT subsequent_value_used_ AND NOT config_fixed_value_used_ AND NOT config_default_value_used_) THEN", "original_code_length": 11820, "summary": null}
{"id": "Account_Check_Common___", "context": {"api_name": "Account", "module": "accrul", "file_summary": "Financial operations and accounting - Account", "function_name": "Check_Common___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 128, "code_lines": 113, "cyclomatic_complexity": 76, "estimated_tokens": 761.8000000000001}, "pagerank_score": 0.0009246413570091835, "truncation_metadata": {"original_length": 6184, "truncated_length": 1675, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2708602846054334}}, "code": "PROCEDURE Check_Common___ (\n   oldrec_ IN     accounting_code_part_value_tab%ROWTYPE,\n   newrec_ IN OUT accounting_code_part_value_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   consol_bal_exist_  VARCHAR2(5) := 'FALSE';\nBEGIN\n   IF (App_Context_SYS.Find_Value(lu_name_||'.copy_to_company_', 'FALSE') != 'TRUE') THEN\n      IF (Company_Basic_Data_Window_API.Check_Copy_From_Company(newrec_.company, lu_name_)) THEN\n         Error_SYS.Record_General(lu_name_, 'NODIRECTINSERT: A record cannot be entered/modified as :P1 page has been set up for copying data only from source company in Basic Data Synchronization page.', Basic_Data_Window_API.Get_Window(lu_name_));\n      END IF;\n-- ... key business logic ...\n            IF (Acquisition_Account_API.Is_Acquisition_Account(newrec_.company, newrec_.code_part_value) = TRUE) THEN\n            END IF;            \n         END IF;\n   END IF;\n   IF (indrec_.bud_account) THEN\n      IF NOT(newrec_.bud_account = 'Y' OR newrec_.bud_account = 'N') THEN\n      END IF;\n   END IF;\n   IF (indrec_.stat_account) THEN      \n      IF NOT(newrec_.stat_account = 'Y' OR newrec_.stat_account = 'N') THEN\n      END IF;\n   END IF;\n   IF (indrec_.tax_flag) THEN\n      IF NOT(newrec_.tax_flag = 'Y' OR newrec_.tax_flag = 'N') THEN\n      END IF;\n   END IF;\n   IF (newrec_.curr_balance = 'Y') THEN\n      IF NOT (Accounting_Code_Parts_API.Code_Part_Function_Used( newrec_.company, 'CURR')) THEN \n         Error_SYS.Appl_General(lu_name_, 'CURR_BAL_FUNC_NOT_USED: The Currency Balance check box cannot be selected since no code part is connected to Currency Balance code part function in the Define Code String page.');", "original_code_length": 6184, "summary": null}
{"id": "InventoryPart_Update___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Update___", "previous_function": "Insert___", "next_function": null, "complexity_metrics": {"total_lines": 198, "code_lines": 174, "cyclomatic_complexity": 75, "estimated_tokens": 742.3000000000001}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 10265, "truncated_length": 1631, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.15888943010228934}}, "code": "PROCEDURE Update___ (\n   objid_             IN     VARCHAR2,\n   oldrec_            IN     inventory_part_tab%ROWTYPE,\n   newrec_            IN OUT inventory_part_tab%ROWTYPE,\n   attr_              IN OUT VARCHAR2,\n   objversion_        IN OUT VARCHAR2,\n   by_keys_           IN     BOOLEAN DEFAULT FALSE )\nIS\n   site_date_                    DATE;   \n   num_null_                     NUMBER       := -99999;\n   str_null_                     VARCHAR2(11) := Database_SYS.string_null_;\nBEGIN\n-- ... key business logic ...\n   newrec_.life_stage_locked_until    := TRUNC(newrec_.life_stage_locked_until);\n   IF (nvl(newrec_.part_cost_group_id,'NOTNULL') != nvl(oldrec_.part_cost_group_id,'NOTNULL')) THEN    \n      $IF (Component_Cost_SYS.INSTALLED) $THEN\n      $ELSE\n   END IF;\n   IF ( newrec_.type_code != oldrec_.type_code ) THEN\n      IF (Inventory_Part_Planning_API.Get_Split_Manuf_Acquired_Db(newrec_.contract, newrec_.part_no) = 'NO_SPLIT') THEN\n         Inventory_Part_Planning_API.Modify_Manuf_Acq_Percent(newrec_.contract,\n      END IF;\n      $IF Component_Mfgstd_SYS.INSTALLED $THEN\n      $IF Component_Expctr_SYS.INSTALLED $THEN\n   END IF;\n   IF (newrec_.lead_time_code != oldrec_.lead_time_code) THEN      \n      $IF (Component_Cost_SYS.INSTALLED) $THEN\n      $ELSE\n      $IF (Component_Purch_SYS.INSTALLED) $THEN\n      $ELSE\n   END IF;\n   IF (newrec_.invoice_consideration != oldrec_.invoice_consideration) THEN\n      IF (newrec_.invoice_consideration = 'PERIODIC WEIGHTED AVERAGE') THEN\n         IF (Site_Invent_Info_API.Get_Last_Actual_Cost_Calc(newrec_.contract) IS NULL) THEN\n         END IF;\n      END IF;\n   END IF;", "original_code_length": 10265, "summary": null}
{"id": "InventoryPart_Get_Updated_Control_Type___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Get_Updated_Control_Type___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 151, "code_lines": 140, "cyclomatic_complexity": 73, "estimated_tokens": 518.7}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 6418, "truncated_length": 1649, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2569336241819882}}, "code": "FUNCTION Get_Updated_Control_Type___ (\n   oldrec_            IN inventory_part_tab%ROWTYPE,\n   newrec_            IN inventory_part_tab%ROWTYPE,\n   check_only_active_ IN BOOLEAN,\n   company_           IN VARCHAR2 ) RETURN VARCHAR2\nIS\n   updated_control_type_ VARCHAR2(3);\n   today_                DATE;\n   c32_                  CONSTANT VARCHAR2(3) := 'C32';\n   c50_                  CONSTANT VARCHAR2(3) := 'C50';\n   c49_                  CONSTANT VARCHAR2(3) := 'C49';\n   c12_                  CONSTANT VARCHAR2(3) := 'C12';\n-- ... key business logic ...\n   IF (updated_control_type_ IS NULL) THEN\n      IF ((NVL(newrec_.part_product_code, Database_SYS.string_null_)) != \n          (NVL(oldrec_.part_product_code, Database_SYS.string_null_))) THEN\n         IF (check_only_active_) THEN\n            IF ((Posting_Ctrl_Public_API.Is_Ctrl_Type_Used_On_Post_Type(company_,m1_,c50_,today_)) OR \n                (Posting_Ctrl_Public_API.Is_Ctrl_Type_Used_On_Post_Type(company_,m3_,c50_,today_))) THEN\n               updated_control_type_ := c50_;\n            END IF;\n         ELSE\n            updated_control_type_ := c50_;\n         END IF;\n      END IF;\n   END IF;\n   IF (updated_control_type_ IS NULL) THEN\n      IF ((NVL(newrec_.part_product_family, Database_SYS.string_null_)) != \n          (NVL(oldrec_.part_product_family, Database_SYS.string_null_))) THEN\n         IF (check_only_active_) THEN\n            IF ((Posting_Ctrl_Public_API.Is_Ctrl_Type_Used_On_Post_Type(company_,m1_,c49_,today_)) OR \n                (Posting_Ctrl_Public_API.Is_Ctrl_Type_Used_On_Post_Type(company_,m3_,c49_,today_))) THEN\n               updated_control_type_ := c49_;", "original_code_length": 6418, "summary": null}
{"id": "DataCaptureSessionLov_New_Impl___", "context": {"api_name": "DataCaptureSessionLov", "module": "wadaco", "file_summary": "Business logic and data operations - DataCaptureSessionLov", "function_name": "New_Impl___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 133, "code_lines": 126, "cyclomatic_complexity": 72, "estimated_tokens": 644.8000000000001}, "pagerank_score": 0.0010166539437350527, "truncation_metadata": {"original_length": 6487, "truncated_length": 1657, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2554339448127023}}, "code": "PROCEDURE New_Impl___ (\n   exit_lov_               OUT BOOLEAN,\n   capture_session_id_     IN  NUMBER,\n   lov_item_value_         IN  VARCHAR2,\n   lov_item_desc_tab_      IN  Data_Capture_Common_Util_API.Lov_Item_Desc_Tab,\n   lov_row_limitation_     IN  NUMBER,     \n   session_rec_            IN  Data_Capture_Common_Util_API.Session_Rec )\n\nIS\n  newrec_                      DATA_CAPTURE_SESSION_LOV_TAB%ROWTYPE;\n  record_exists                EXCEPTION;\n  PRAGMA                       EXCEPTION_INIT(record_exists,-20112);\n-- ... key business logic ...\n            END LOOP;\n         END IF;\n      END IF;\n      IF (session_rec_.lov_search_target = Lov_Search_Target_API.DB_ID) AND (local_lov_item_value_ LIKE local_lov_search_statement_) THEN\n      ELSIF (session_rec_.lov_search_target = Lov_Search_Target_API.DB_DESCRIPTION) AND (local_lov_item_description_ LIKE local_lov_search_statement_) THEN\n      ELSIF (session_rec_.lov_search_target = Lov_Search_Target_API.DB_ID_AND_DESCRIPTION) AND (local_lov_item_value_ LIKE local_lov_search_statement_ OR local_lov_item_description_ LIKE local_lov_search_statement_) THEN\n      END IF;\n    ELSE\n    END IF;\n    IF (add_to_list_) THEN\n       IF (lov_item_desc_tab_.COUNT > 0) THEN\n       END IF;\n       IF (lov_item_desc_tab_.COUNT > 1) THEN\n       END IF;\n       IF (lov_item_desc_tab_.COUNT > 2) THEN\n       END IF;\n       IF (lov_item_desc_tab_.COUNT > 3) THEN\n       END IF;\n       IF (lov_item_desc_tab_.COUNT > 4) THEN\n       END IF;\n       IF (lov_item_desc_tab_.COUNT > 5) THEN\n       END IF;\n       IF (lov_item_desc_tab_.COUNT > 6) THEN\n       END IF;\n       IF (lov_item_desc_tab_.COUNT > 7) THEN", "original_code_length": 6487, "summary": null}
{"id": "PartCatalog_Check_Insert___", "context": {"api_name": "PartCatalog", "module": "partca", "file_summary": "Inventory management and tracking - PartCatalog", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 125, "code_lines": 99, "cyclomatic_complexity": 67, "estimated_tokens": 452.40000000000003}, "pagerank_score": 0.0011234871824286733, "truncation_metadata": {"original_length": 3970, "truncated_length": 1202, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.30277078085642317}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_      IN OUT part_catalog_tab%ROWTYPE,\n   indrec_      IN OUT Indicator_Rec,\n   attr_        IN OUT VARCHAR2,\n   from_client_ IN     BOOLEAN DEFAULT TRUE )\nIS\n   name_            VARCHAR2(30);\n   value_           VARCHAR2(4000);\n   input_group_uom_ INPUT_UNIT_MEAS_GROUP_TAB.unit_code%TYPE;\nBEGIN\n   IF NOT(indrec_.std_name_id) THEN\n      newrec_.std_name_id := 0;\n-- ... key business logic ...\n   IF NOT(indrec_.position_part) THEN\n   END IF;\n   IF NOT(indrec_.catch_unit_enabled) THEN\n   END IF;\n   IF NOT(indrec_.multilevel_tracking) THEN\n   END IF;\n   IF NOT(indrec_.component_lot_rule) THEN\n   END IF;\n   IF NOT(indrec_.stop_arrival_issued_serial) THEN\n   END IF;\n   IF NOT(indrec_.allow_as_not_consumed) THEN\n   END IF;\n   IF NOT(indrec_.receipt_issue_serial_track) THEN\n   END IF;\n   IF NOT(indrec_.stop_new_serial_in_rma) THEN\n   END IF;\n   Error_SYS.Check_Valid_Key_String('PART_NO', newrec_.part_no);\n   IF (newrec_.serial_tracking_code = db_serial_tracking_) THEN\n   END IF;\n   Check_For_Valid_Values___(newrec_);\n-- ... exception handling ...\nEXCEPTION\n   WHEN value_error THEN\n      Error_SYS.Item_Format(lu_name_, name_, value_);\nEND Check_Insert___;", "original_code_length": 3970, "summary": null}
{"id": "AccountingCodeParts_Check_Update___", "context": {"api_name": "AccountingCodeParts", "module": "accrul", "file_summary": "Customer order management and processing - AccountingCodeParts", "function_name": "Check_Update___", "previous_function": null, "next_function": "Check_Transactions_Exist__", "complexity_metrics": {"total_lines": 119, "code_lines": 106, "cyclomatic_complexity": 67, "estimated_tokens": 617.5}, "pagerank_score": 0.0009395088733623111, "truncation_metadata": {"original_length": 5641, "truncated_length": 1602, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2839921999645453}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     accounting_code_part_tab%ROWTYPE,\n   newrec_ IN OUT accounting_code_part_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_             VARCHAR2(30);\n   value_            VARCHAR2(4000);\n   value_code_used_  VARCHAR2(20);\n   allowed_          BOOLEAN := FALSE;\n   old_base_for_pfe_  VARCHAR2(1);\n   old_base_name_     VARCHAR2(10);\n-- ... key business logic ...\n         END IF;\n         IF ( newrec_.code_part_function = 'INTERN') THEN\n            $IF Component_Intled_SYS.INSTALLED $THEN \n            $ELSE\n         END IF;\n      END IF;\n   END IF;  \n   IF (indrec_.max_number_of_char) THEN\n   END IF;\n   IF newrec_.code_part IN ('K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T') THEN\n      Val_Additional_Code_Parts___(newrec_, indrec_, 'UPDATE', oldrec_);\n   END IF;\n   IF (indrec_.logical_code_part) THEN\n      Validate_Logical_Code_Part___(newrec_.company,\n   END IF;\n   IF ( (newrec_.code_part_used = 'N') AND (newrec_.code_part_function != 'NOFUNC') AND (newrec_.code_part BETWEEN 'A' AND 'J')) THEN\n   END IF;\n   IF (indrec_.base_for_pfe OR indrec_.code_part_function) THEN\n      IF ( newrec_.base_for_pfe = 'TRUE' AND newrec_.code_part_function != 'NOFUNC') THEN\n      END IF;\n   END IF;\n   IF ((indrec_.base_for_pfe) AND (from_client_ = 'FALSE') AND (newrec_.code_part BETWEEN 'A' AND 'J')) THEN   \n      Check_Transactions_Exist__(newrec_.company,old_base_for_pfe_);\n-- ... exception handling ...\nEXCEPTION\n   WHEN value_error THEN\n        Error_SYS.Item_Format(lu_name_, name_, value_);\nEND Check_Update___;", "original_code_length": 5641, "summary": null}
{"id": "AccountingCodeParts_Check_Transactions_Exist__", "context": {"api_name": "AccountingCodeParts", "module": "accrul", "file_summary": "Customer order management and processing - AccountingCodeParts", "function_name": "Check_Transactions_Exist__", "previous_function": "Check_Update___", "next_function": null, "complexity_metrics": {"total_lines": 98, "code_lines": 82, "cyclomatic_complexity": 66, "estimated_tokens": 790.4}, "pagerank_score": 0.0009395088733623111, "truncation_metadata": {"original_length": 7089, "truncated_length": 1272, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.17943292424883622}}, "code": "PROCEDURE Check_Transactions_Exist__(\n   company_           IN VARCHAR2,\n   old_base_for_pfe_  IN VARCHAR2)\nIS               \n   min_date_             DATE;\n   accounting_year_      NUMBER;\n   accounting_period_    NUMBER;\n   result_               VARCHAR2(5);\nBEGIN\n   min_date_ := Database_SYS.first_calendar_date_;\n   accounting_year_ := Accounting_Period_API.Get_Accounting_Year(company_, SYSDATE);\n   accounting_period_ := Accounting_Period_API.Get_Accounting_Period(company_,SYSDATE);\n-- ... key business logic ...\n     END IF;\n  $IF Component_Percos_SYS.INSTALLED $THEN\n     IF (Cost_Allocation_Procedure_API.Non_Closed_Proc_Exist_Todate(company_,accounting_year_,accounting_period_) = 'TRUE' ) THEN\n     END IF;\n  $IF Component_Mpccom_SYS.INSTALLED $THEN\n     IF (Mpccom_Accounting_API.All_Postings_Transferred(company_,min_date_,SYSDATE) = 'FALSE' ) THEN\n     END IF;\n  $IF Component_Wo_SYS.INSTALLED $THEN\n     IF (Jt_Task_Transaction_API.All_Postings_Transferred(company_,min_date_,SYSDATE) = 'FALSE' ) THEN\n     END IF;\n  $IF Component_Prjrep_SYS.INSTALLED $THEN\n     IF (Project_Trans_Posting_API.Prjrep_None_Trans_Post_Exist(company_,SYSDATE) = 'TRUE') THEN\n     END IF;\n  $IF Component_Invoic_SYS.INSTALLED $THEN\n     IF (result_ = 'TRUE') THEN\n     END IF;", "original_code_length": 7089, "summary": null}
{"id": "CustomerInfo_Check_Common___", "context": {"api_name": "CustomerInfo", "module": "enterp", "file_summary": "Customer order management and processing - CustomerInfo", "function_name": "Check_Common___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 66, "code_lines": 66, "cyclomatic_complexity": 66, "estimated_tokens": 491.40000000000003}, "pagerank_score": 0.0009351525419111985, "truncation_metadata": {"original_length": 4327, "truncated_length": 1637, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.37832216316154377}}, "code": "PROCEDURE Check_Common___ (\n   oldrec_ IN     customer_info_tab%ROWTYPE,\n   newrec_ IN OUT customer_info_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   exists_                VARCHAR2(5);\n   customer_              VARCHAR2(200);\nBEGIN\n   IF ((oldrec_.association_no != newrec_.association_no) OR (oldrec_.association_no IS NULL)) THEN\n      exists_ := Association_Info_API.Association_No_Exist(newrec_.association_no, 'CUSTOMER');\n      IF (exists_ = 'TRUE') THEN\n-- ... key business logic ...\n         Error_SYS.Record_General(lu_name_, 'COPFORMNOTEXIST: The form of business ID :P1 is not valid for the country code :P2. Select a form of business that is connected to country code :P2 in the Form of Business field.', newrec_.corporate_form, newrec_.country);\n      END IF;\n      IF ((newrec_.business_classification IS NOT NULL) AND NOT (Business_Classification_API.Exists(newrec_.country, newrec_.business_classification))) THEN\n         Error_SYS.Record_General(lu_name_, 'BUSINESSCLASSIFNOTEXIST: The classification of business ID :P1 is not valid for the country code :P2. Select a classification of business that is connected to country code :P2 in the Classification of Business field.', newrec_.business_classification, newrec_.country);\n      END IF;      \n   END IF;\n   IF (oldrec_.one_time != newrec_.one_time) THEN\n      Validate_One_Time_Customer__(newrec_.customer_id);\n   END IF;\n   Attribute_Definition_API.Check_Value(newrec_.customer_id, lu_name_, 'CUSTOMER_ID');   \n   IF (newrec_.identifier_ref_validation IS NULL) THEN\n      newrec_.identifier_ref_validation := 'NONE';\n   END IF;", "original_code_length": 4327, "summary": null}
{"id": "InventoryPart_Insert___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Insert___", "previous_function": null, "next_function": "Update___", "complexity_metrics": {"total_lines": 158, "code_lines": 135, "cyclomatic_complexity": 65, "estimated_tokens": 585.0}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 7104, "truncated_length": 1800, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2533783783783784}}, "code": "PROCEDURE Insert___ (\n   objid_                OUT    VARCHAR2,\n   objversion_           OUT    VARCHAR2,\n   newrec_               IN OUT inventory_part_tab%ROWTYPE,\n   attr_                 IN OUT VARCHAR2,\n   create_purchase_part_ IN     VARCHAR2 DEFAULT 'TRUE',\n   create_part_planning_ IN     VARCHAR2 DEFAULT 'TRUE')\nIS\n   inventory_flag_               VARCHAR2(20);\n   site_date_                    DATE;   \n   exist_                        NUMBER;\n   new_estimated_material_cost_  NUMBER;\n-- ... key business logic ...\n      IF (newrec_.statistical_code IS NULL) AND \n         (part_company_default_rec_.statistical_code IS NOT NULL) THEN\n      END IF;\n      IF (newrec_.acquisition_origin IS NULL) AND \n         (part_company_default_rec_.acquisition_origin IS NOT NULL) THEN\n      END IF;  \n   END IF;\n   newrec_.life_stage_locked_until    := TRUNC(newrec_.life_stage_locked_until);\n   $IF (Component_Cost_SYS.INSTALLED) $THEN\n   $IF (Component_Cfgchr_SYS.INSTALLED) $THEN\n      FOR config_rec_ IN Configuration_Spec_API.Get_Valid_Configuration_Id(newrec_.part_no) LOOP\n          IF NOT Inventory_Part_Config_API.Check_Exist(newrec_.contract, newrec_.part_no, config_rec_.configuration_id) THEN\n          END IF;\n      END LOOP;\n   IF (create_part_planning_ = 'TRUE') THEN\n   END IF;\n   $IF (Component_Purch_SYS.INSTALLED) $THEN     \n      exist_ := Purchase_Part_API.Check_Exist(newrec_.contract, newrec_.part_no);\n      IF (exist_ = 1) THEN\n      ELSE\n         IF newrec_.lead_time_code = 'P' THEN\n            IF (create_purchase_part_ = 'TRUE') THEN\n            END IF;\n         END IF;\n-- ... exception handling ...\nEXCEPTION\n   WHEN dup_val_on_index THEN\n      Error_SYS.Record_Exist(lu_name_, 'DUPLPART: Inventory part :P1 already exists on site :P2.',newrec_.part_no, newrec_.contr...", "original_code_length": 7104, "summary": null}
{"id": "InventoryPart_Overwrite_Record_With_Attr___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Overwrite_Record_With_Attr___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 121, "code_lines": 121, "cyclomatic_complexity": 61, "estimated_tokens": 595.4}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 6079, "truncated_length": 1371, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.22553051488731699}}, "code": "PROCEDURE Overwrite_Record_With_Attr___ (\n   lu_rec_ IN OUT inventory_part_tab%ROWTYPE,\n   attr_   IN     VARCHAR2 )\nIS\n   ptr_   NUMBER;\n   name_  VARCHAR2(30);\n   value_ VARCHAR2(2000);\nBEGIN\n   ptr_ := NULL;\n   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP\n      IF (name_ = 'ACCOUNTING_GROUP') THEN\n         lu_rec_.accounting_group := value_;\n-- ... key business logic ...\n      ELSIF (name_ = 'CYCLE_PERIOD') THEN\n      ELSIF (name_ = 'DIM_QUALITY') THEN\n      ELSIF (name_ = 'DURABILITY_DAY') THEN\n      ELSIF (name_ = 'EXPECTED_LEADTIME') THEN\n      ELSIF (name_ = 'LEAD_TIME_CODE') THEN\n      ELSIF (name_ = 'MANUF_LEADTIME') THEN\n      ELSIF (name_ = 'NOTE_TEXT') THEN\n      ELSIF (name_ = 'PURCH_LEADTIME') THEN\n      ELSIF (name_ = 'SUPERSEDES') THEN\n      ELSIF (name_ = 'SUPPLY_CODE') THEN\n      ELSIF (name_ = 'TYPE_CODE') THEN\n      ELSIF (name_ = 'CUSTOMS_STAT_NO') THEN\n      ELSIF (name_ = 'TYPE_DESIGNATION') THEN\n      ELSIF (name_ = 'ZERO_COST_FLAG') THEN\n      ELSIF (name_ = 'SHORTAGE_FLAG') THEN\n      ELSIF (name_ = 'OE_ALLOC_ASSIGN_FLAG') THEN\n      ELSIF (name_ = 'ONHAND_ANALYSIS_FLAG') THEN\n      ELSIF (name_ = 'ENG_ATTRIBUTE') THEN\n      ELSIF (name_ = 'COUNT_VARIANCE') THEN\n         Error_SYS.Item_Insert(lu_name_, name_);\n      ELSIF (name_ = 'CREATE_DATE') THEN\n         Error_SYS.Item_Insert(lu_name_, name_);", "original_code_length": 6079, "summary": null}
{"id": "PartCatalog_Check_For_Valid_Values___", "context": {"api_name": "PartCatalog", "module": "partca", "file_summary": "Inventory management and tracking - PartCatalog", "function_name": "Check_For_Valid_Values___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 91, "code_lines": 85, "cyclomatic_complexity": 61, "estimated_tokens": 582.4}, "pagerank_score": 0.0011234871824286733, "truncation_metadata": {"original_length": 4658, "truncated_length": 1520, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.32632030914555604}}, "code": "PROCEDURE Check_For_Valid_Values___ (\n   newrec_  IN part_catalog_tab%ROWTYPE)\nIS\nBEGIN\n   -- Validations to enable Condition Code usage\n   IF (newrec_.condition_code_usage = 'ALLOW_COND_CODE') THEN\n      -- Condition Code handing is enabled\n      IF (newrec_.lot_tracking_code = 'NOT LOT TRACKING') THEN\n         -- Part is not Lot Tracked\n         IF (newrec_.serial_tracking_code = db_not_serial_tracking_) THEN\n            -- Part is not SErial Tracked in Inventory\n            Error_SYS.Record_General('PartCatalog','NOTALLOWCONDCODE: Condition code can be enabled only in combination with Inventory Serial Tracking and/or Lot/Batch Tracking.');\n-- ... key business logic ...\n      END IF;\n   END IF;\n   IF ((newrec_.receipt_issue_serial_track = db_true_) AND\n       (newrec_.eng_serial_tracking_code   = db_not_serial_tracking_)) THEN\n   END IF;\n   IF (newrec_.position_part = 'POSITION PART') THEN\n      IF (newrec_.receipt_issue_serial_track = db_true_) THEN\n      END IF;\n      IF (newrec_.configurable = 'CONFIGURED') THEN\n      END IF;\n      IF (newrec_.lot_tracking_code != Part_Lot_Tracking_API.DB_NOT_LOT_TRACKING) THEN\n      END IF;\n   END IF;\n   IF ((newrec_.lot_tracking_code          = 'NOT LOT TRACKING') AND\n       (newrec_.receipt_issue_serial_track = db_false_         )) THEN\n      IF (newrec_.multilevel_tracking = 'TRACKING_ON') THEN\n      END IF;\n   END IF;\n   IF (newrec_.configurable = 'CONFIGURED')THEN\n      $IF NOT (Component_Cfgchr_SYS.INSTALLED)$THEN \n         Raise_ConfigPart_Error___;", "original_code_length": 4658, "summary": null}
{"id": "UserAccess_Is_User_Available_Person_Id", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Is_User_Available_Person_Id", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 280, "code_lines": 263, "cyclomatic_complexity": 60, "estimated_tokens": 1016.6}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 11679, "truncated_length": 1632, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.13973799126637554}}, "code": "PROCEDURE Is_User_Available_Person_Id (\n   is_app_owner_         OUT    VARCHAR2,\n   is_hr_mgr_            OUT    VARCHAR2,\n   is_own_person_id_     OUT    VARCHAR2,\n   own_data_attr_        OUT    VARCHAR2,\n   data_access_attr_     OUT    VARCHAR2,\n   person_id_            IN OUT VARCHAR2,\n   trans_date_           IN     DATE DEFAULT NULL,\n   access_own_person_id_ IN     VARCHAR2 DEFAULT '1',\n   check_hr_mgr_         IN     VARCHAR2 DEFAULT '1',\n   logical_unit_id_      IN     VARCHAR2 DEFAULT NULL,\n   quick_mode_           IN     VARCHAR2 DEFAULT '1',\n-- ... key business logic ...\n   CURSOR get_other_emp IS\n      SELECT company_id, emp_no\n   IF NOT Is_Cache_Valid___ THEN\n      New_Modify_User_Data;\n   END IF;  \n   IF micro_cache_access_config_type_ = 'ORG_POSITION_ACCESS' THEN \n      IF check_appowner_ = '1' AND micro_cache_database_owner_ THEN\n      END IF;\n      IF (check_hr_mgr_ = '1') AND micro_cache_manager_user_ THEN\n      END IF;\n      IF access_own_person_id_ = '1' AND micro_cache_curr_person_id_ = person_id_ THEN\n         --Check access to own employee assignments\n         WHILE (get_other_emp%FOUND) LOOP\n                                      0 /*check_hr_mgr*/,\n                                      0 /*check_appowner_*/,\n            IF (available_emp_no_ = temp_emp_no_) THEN\n            END IF;\n            IF (quick_mode_ = 1 AND access_granted_ = 'TRUE') THEN\n            END IF;\n         END LOOP;\n         IF access_granted_ = 'TRUE' THEN\n         ELSE\n         END IF;\n      END IF;\n      IF trans_date_ IS NOT NULL THEN\n      ELSIF micro_cache_access_trans_date_ IS NOT NULL THEN\n      END IF;", "original_code_length": 11679, "summary": null}
{"id": "UserAccess_Is_Person_Available_Person_Id", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Is_Person_Available_Person_Id", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 282, "code_lines": 267, "cyclomatic_complexity": 60, "estimated_tokens": 1025.7}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 11878, "truncated_length": 1658, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1395857888533423}}, "code": "PROCEDURE Is_Person_Available_Person_Id (\n   is_app_owner_         OUT    VARCHAR2,\n   is_hr_mgr_            OUT    VARCHAR2,\n   is_own_person_id_     OUT    VARCHAR2,\n   own_data_attr_        OUT    VARCHAR2,\n   data_access_attr_     OUT    VARCHAR2,\n   person_id_            IN OUT VARCHAR2,\n   sup_person_id_        IN     VARCHAR2,\n   trans_date_           IN     DATE DEFAULT NULL,\n   access_own_person_id_ IN     VARCHAR2 DEFAULT '1',\n   check_hr_mgr_         IN     VARCHAR2 DEFAULT '1',\n   logical_unit_id_      IN     VARCHAR2 DEFAULT NULL,\n-- ... key business logic ...\n   CURSOR get_other_emp IS\n      SELECT company_id, emp_no\n   IF NOT Is_Person_User_Cache_Valid___ THEN\n      New_Modify_User_Data(person_user_id_ => person_user_id_);\n   END IF;\n   IF micro_cache_access_config_type_ = 'ORG_POSITION_ACCESS' THEN \n      IF check_appowner_ = '1' AND micro_cache_database_owner_ THEN\n      END IF;\n      IF (check_hr_mgr_ = '1') AND micro_cache_manager_user_ THEN\n      END IF;\n      IF access_own_person_id_ = '1' AND micro_cache_curr_person_id_ = person_id_ THEN\n         --Check access to own employee assignments\n         WHILE (get_other_emp%FOUND) LOOP\n                                        0 /*check_hr_mgr*/,\n                                        0 /*check_appowner_*/,\n            IF (available_emp_no_ = temp_emp_no_) THEN\n            END IF;\n            IF (quick_mode_ = 1 AND access_granted_ = 'TRUE') THEN\n            END IF;\n         END LOOP;\n         IF access_granted_ = 'TRUE' THEN\n         ELSE\n         END IF;\n      END IF;\n      IF trans_date_ IS NOT NULL THEN\n      ELSIF micro_cache_access_trans_date_ IS NOT NULL THEN", "original_code_length": 11878, "summary": null}
{"id": "InventoryPart_Qty_To_Order", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Qty_To_Order", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 328, "code_lines": 299, "cyclomatic_complexity": 60, "estimated_tokens": 1301.3}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 15857, "truncated_length": 1237, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07800971179920539}}, "code": "PROCEDURE Qty_To_Order (\n   requisition_no_  IN OUT VARCHAR2,\n   qty_ordered_     IN OUT NUMBER,\n   disp_qty_onhand_ IN OUT NUMBER,\n   contract_        IN     VARCHAR2,\n   part_no_         IN     VARCHAR2,\n   date_required_   IN     DATE,\n   type_code_       IN     VARCHAR2,\n   lu_req_exist_    IN     BOOLEAN,\n   lu_shp_exist_    IN     BOOLEAN,\n   create_req_      IN     NUMBER,\n   authorize_code_  IN     VARCHAR2,\n-- ... key business logic ...\n      -- IF order_requisition_ is set we will create an order directly without\n      IF use_split_ THEN\n         IF lu_shp_exist_ AND part_planning_rec_.manuf_supply_type IN ('R','O') THEN\n         ELSIF part_planning_rec_.manuf_supply_type = 'S' THEN\n         END IF;\n         IF lu_req_exist_ AND part_planning_rec_.acquired_supply_type = 'O' THEN\n            IF (nvl(multi_site_planned_, Database_SYS.string_null_) = 'MULTISITE_PLAN') THEN\n               $IF (Component_Disord_SYS.INSTALLED) $THEN\n               $ELSE\n            ELSE\n            END IF;\n         ELSIF lu_req_exist_ AND part_planning_rec_.acquired_supply_type = 'R' THEN\n            IF ((line_no_ = 0) OR (line_no_ >= 9999)) THEN\n            END IF;\n         ELSIF part_planning_rec_.acquired_supply_type = 'S' THEN", "original_code_length": 15857, "summary": null}
{"id": "CurrencyType_Import___", "context": {"api_name": "CurrencyType", "module": "accrul", "file_summary": "Customer order management and processing - CurrencyType", "function_name": "Import___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 127, "code_lines": 125, "cyclomatic_complexity": 57, "estimated_tokens": 510.90000000000003}, "pagerank_score": 0.0009719770155492568, "truncation_metadata": {"original_length": 6439, "truncated_length": 1666, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2587358285448051}}, "code": "PROCEDURE Import___ (\n   crecomp_rec_ IN ENTERP_COMP_CONNECT_V170_API.Crecomp_Lu_Public_Rec )\nIS\n   --\n   dummy_          VARCHAR2(1);\n   msg_            VARCHAR2(2000);\n   emu_curr_       VARCHAR2(5);\n   i_              NUMBER := 0;\n   update_by_key_  BOOLEAN;\n   rate_type_attr_      VARCHAR2(100);\n   company_finance_rec_ Company_Finance_API.Public_Rec;\n   --\n-- ... key business logic ...\n               IF (company_finance_rec_.parallel_base = 'ACCOUNTING_CURRENCY') THEN  \n                  IF company_finance_rec_.currency_code = 'EUR' THEN\n                  ELSE \n                  END IF;   \n                  Company_Finance_API.Update_Company_Finance(rate_type_attr_, crecomp_rec_.company);\n               ELSIF (company_finance_rec_.parallel_base = 'TRANSACTION_CURRENCY') THEN  \n                  Internal_Insert_Proc___(msg_,crecomp_rec_,rec_);\n                  -- Do not update company finance if row was not created\n                  IF (msg_ IS NULL) THEN\n                     Company_Finance_API.Update_Company_Finance(rate_type_attr_, crecomp_rec_.company);\n                  END IF;\n               END IF;\n            END IF;\n         ELSE\n            Internal_Insert_Proc___(msg_,crecomp_rec_,rec_);\n         END IF;\n         IF (msg_ IS NOT NULL) THEN\n         END IF;\n      END LOOP;\n   ELSE\n      IF exist_company%NOTFOUND THEN\n         FOR rec_ IN get_data LOOP\n            -- Soon obsolete. Remove the IF-statements when possible.\n            IF ((emu_curr_ = 'TRUE') OR (company_finance_rec_.currency_code = 'EUR')) AND (NVL(rec_.rate_type_category,' ') != 'PARALLEL_CURRENCY') THEN\n               IF (rec_.ref_currency_code = 'EUR') THEN", "original_code_length": 6439, "summary": null}
{"id": "UserAccess_Is_Person_Available_Emp_No", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Is_Person_Available_Emp_No", "previous_function": "Is_User_Available_Emp_No", "next_function": null, "complexity_metrics": {"total_lines": 198, "code_lines": 171, "cyclomatic_complexity": 56, "estimated_tokens": 764.4}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 7778, "truncated_length": 1645, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.21149395731550527}}, "code": "PROCEDURE Is_Person_Available_Emp_No (\n   is_app_owner_      OUT    VARCHAR2,\n   is_hr_mgr_         OUT    VARCHAR2,\n   is_own_emp_no_     OUT    VARCHAR2,\n   own_data_attr_     IN OUT VARCHAR2,\n   data_access_attr_  IN OUT VARCHAR2,\n   emp_no_            IN OUT VARCHAR2,\n   company_id_        IN     VARCHAR2,\n   sup_person_id_     IN     VARCHAR2,\n   trans_date_        IN     DATE DEFAULT NULL,\n   access_own_emp_no_ IN     VARCHAR2 DEFAULT '1',\n   check_hr_mgr_      IN     VARCHAR2 DEFAULT '1',\n-- ... key business logic ...\n      IF (check_hr_mgr_ = '1') AND micro_cache_manager_user_ THEN\n      END IF;\n      IF access_own_emp_no_ = '1' THEN\n         IF (start_pos_emp_ > 0) THEN\n            IF (exist_ > 0) THEN         \n               IF logical_unit_id_ IS NOT NULL THEN\n               END IF;\n               IF org_code_ IS NOT NULL AND Company_Org_API.Get_Exclusive_Reg(company_id_, org_code_) = 'TRUE' THEN\n               END IF;\n               IF trans_date_ IS NULL THEN\n               ELSE\n               END IF;\n               IF trans_date_to_ IS NULL THEN\n               ELSE\n               END IF;\n               IF quick_mode_ = '1' AND Is_Cache_Member___(company_id_, emp_no_, logical_unit_id_, access_date_from_, access_date_to_, org_code_, lu_protected_, excl_reg_org_, 'TRUE') THEN  \n               END IF;\n               --Self access check\n               Self_Access_Check___(own_data_attr_, access_granted_, any_org_assignment_, quick_self_access_, emp_no_, company_id_, org_code_, emp_bu_id_, access_date_from_, access_date_to_, excl_reg_org_, def_role_, access_area_, lu_protected_, logical_unit_id_, quick_mode_);", "original_code_length": 7778, "summary": null}
{"id": "Company_Check_Common___", "context": {"api_name": "Company", "module": "enterp", "file_summary": "Financial operations and accounting - Company", "function_name": "Check_Common___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 42, "code_lines": 42, "cyclomatic_complexity": 55, "estimated_tokens": 395.2}, "pagerank_score": 0.002315329855963772, "truncation_metadata": {"original_length": 2949, "truncated_length": 1642, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.5567989148864022}}, "code": "PROCEDURE Check_Common___ (\n   oldrec_ IN     company_tab%ROWTYPE,\n   newrec_ IN OUT company_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   exists_                VARCHAR2(5);\nBEGIN\n   Association_Info_API.Check_Ass_No_Company(newrec_.association_no, 'COMPANY', newrec_.company);\n   IF ((oldrec_.association_no != newrec_.association_no) OR (oldrec_.association_no IS NULL)) THEN\n      exists_ := Association_Info_API.Association_No_Exist(newrec_.association_no, 'COMPANY');\n      IF (exists_ = 'TRUE') THEN\n-- ... key business logic ...\n   END IF;\n   IF (oldrec_.country != newrec_.country) THEN\n      IF ((newrec_.corporate_form IS NOT NULL) AND NOT (Corporate_Form_API.Exists(newrec_.country, newrec_.corporate_form))) THEN\n         Error_SYS.Record_General(lu_name_, 'COPFORMNOTEXIST: The form of business ID :P1 is not valid for the country code :P2. Select a form of business that is connected to country code :P2 in the Form of Business field.', newrec_.corporate_form, newrec_.country);\n      END IF;\n      IF ((newrec_.business_classification IS NOT NULL) AND NOT (Business_Classification_API.Exists(newrec_.country, newrec_.business_classification))) THEN\n         Error_SYS.Record_General(lu_name_, 'BUSINESSCLASSIFNOTEXIST: The classification of business ID :P1 is not valid for the country code :P2. Select a classification of business that is connected to country code :P2 in the Classification of Business field.', newrec_.business_classification, newrec_.country);\n      END IF;\n   END IF;\n   IF (newrec_.identifier_reference IS NOT NULL AND newrec_.identifier_ref_validation != 'NONE') THEN ", "original_code_length": 2949, "summary": null}
{"id": "DataCaptureCommonUtil_Rename_Data_Item_All_Config", "context": {"api_name": "DataCaptureCommonUtil", "module": "mpccom", "file_summary": "Business logic and data operations - DataCaptureCommonUtil", "function_name": "Rename_Data_Item_All_Config", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 164, "code_lines": 140, "cyclomatic_complexity": 55, "estimated_tokens": 715.0}, "pagerank_score": 0.001318987843487137, "truncation_metadata": {"original_length": 13214, "truncated_length": 1644, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.12441350083245044}}, "code": "PROCEDURE Rename_Data_Item_All_Config (\n   capture_process_id_   IN VARCHAR2,\n   old_data_item_id_     IN VARCHAR2,\n   new_data_item_id_     IN VARCHAR2,\n   new_data_item_desc_   IN VARCHAR2 DEFAULT NULL)\nIS\n   $IF Component_Wadaco_SYS.INSTALLED $THEN\n   proc_rec_          Data_Capt_Proc_Data_Item_API.Public_Rec;\n   config_tab_        Data_Capture_Config_API.Data_Capt_Key_State_Tab;\n   conf_rec_          Data_Capt_Conf_Data_Item_API.Public_Rec;\n   conf_detail_tab_   Data_Capture_Common_Util_API.Config_Item_Tab;\n   sdcc_config_tab_   Subseq_Data_Capture_Config_API.Subseq_Conf_Tab;\n-- ... key business logic ...\n                  END LOOP;\n               END IF;\n            END LOOP;\n         END IF;\n         IF (config_tab_.COUNT > 0) THEN\n            FOR i IN config_tab_.FIRST..config_tab_.LAST  LOOP\n               IF (Data_Capt_Conf_Data_Item_API.Check_Exist(capture_process_id_, config_tab_(i).capture_config_id, old_data_item_id_)) THEN\n                  Data_Capt_Conf_Data_Item_API.New_Or_Modify(capture_process_id_      => capture_process_id_, \n                                                             loop_start_db_           => conf_rec_.loop_start,\n                                                             loop_end_db_             => conf_rec_.loop_end,\n                                                             update_flag_             => TRUE);\n                  IF (Data_Capture_Config_API.Get_Subseq_Ctrl_Data_Item_Id(capture_process_id_, config_tab_(i).capture_config_id) = old_data_item_id_) THEN\n                     -- Renaming the data item if its a subsequent control data item on the Config general tab", "original_code_length": 13214, "summary": null}
{"id": "FndRole_Merge_Grants__", "context": {"api_name": "FndRole", "module": "fndbas", "file_summary": "Business logic and data operations - FndRole", "function_name": "Merge_Grants__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 209, "code_lines": 183, "cyclomatic_complexity": 55, "estimated_tokens": 848.9}, "pagerank_score": 0.0011843561922212887, "truncation_metadata": {"original_length": 9154, "truncated_length": 1648, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.18003058772121477}}, "code": "PROCEDURE Merge_Grants__ (\n   to_role_             IN     VARCHAR2,\n   role_                IN     VARCHAR2,\n   include_users_       IN     VARCHAR2,\n   include_user_groups_ IN     VARCHAR2,\n   info_                IN OUT VARCHAR2)\nIS\n   attr_                  VARCHAR2(32000);\n   objid_                 Fnd_Role.objid%TYPE;\n   objversion_            Fnd_Role.objversion%TYPE;\n   record_not_exists      EXCEPTION;\n   PRAGMA exception_init( record_not_exists, -20111);\n-- ... key business logic ...\n   CURSOR get_lobby_data_src_grant IS   \n      SELECT tar.po_id, tar.role\n         SELECT NULL\n   CURSOR get_database_task_and_chain_grant IS   \n      SELECT tar.po_id, tar.role\n         SELECT NULL\n   CURSOR get_user_grants IS\n      SELECT tar.identity\n         SELECT NULL\n   CURSOR get_user_group_grants IS   \n      SELECT tar.user_group_id\n         SELECT NULL\n   FOR proj_ IN get_projection_grant LOOP\n      IF NOT(Fnd_Projection_Grant_API.Exists(proj_.PROJECTION, to_role_)) THEN\n      END IF;\n      FOR proj_entity_ IN get_projection_entity_grant(proj_.PROJECTION) LOOP\n         IF NOT(Fnd_Proj_Entity_Grant_API.Exists(proj_.PROJECTION, proj_entity_.ENTITY , to_role_)) THEN\n         ELSIF (Fnd_Proj_Entity_Grant_API.Get_Cud_Allowed_Db(proj_.PROJECTION, proj_entity_.ENTITY , to_role_) = 'FALSE' AND proj_entity_.CUD_ALLOWED_DB = 'TRUE') THEN\n         END IF;\n         FOR entity_action_grant_ IN get_entity_action_grant(proj_.PROJECTION, proj_entity_.ENTITY) LOOP\n            IF NOT(Fnd_Proj_Ent_Action_Grant_API.Exists(proj_.PROJECTION, proj_entity_.ENTITY, entity_action_grant_.ACTION, to_role_)) THEN\n            END IF;\n         END LOOP;", "original_code_length": 9154, "summary": null}
{"id": "PartCatalog_Update___", "context": {"api_name": "PartCatalog", "module": "partca", "file_summary": "Inventory management and tracking - PartCatalog", "function_name": "Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 123, "code_lines": 110, "cyclomatic_complexity": 52, "estimated_tokens": 426.40000000000003}, "pagerank_score": 0.0011234871824286733, "truncation_metadata": {"original_length": 4904, "truncated_length": 1516, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.3091353996737357}}, "code": "PROCEDURE Update___ (\n   objid_      IN     VARCHAR2,\n   oldrec_     IN     part_catalog_tab%ROWTYPE,\n   newrec_     IN OUT part_catalog_tab%ROWTYPE,\n   attr_       IN OUT VARCHAR2,\n   objversion_ IN OUT VARCHAR2,\n   by_keys_    IN     BOOLEAN DEFAULT FALSE )\nIS\n   old_eng_serial_track_ VARCHAR2(200);\n   number_null_          NUMBER := -9999999;\nBEGIN\n   old_eng_serial_track_ := Get_Eng_Serial_Tracking_Code(newrec_.part_no);\n-- ... key business logic ...\n      $IF (Component_Pdmcon_SYS.INSTALLED)$THEN\n      $ELSE\n   END IF;\n   -- Handle validations when enabling catch unit.\n   IF ((oldrec_.catch_unit_enabled = db_false_) AND\n       (newrec_.catch_unit_enabled = db_true_)) THEN\n      --if there are existing sales parts with different price U/M can not enable catch unit.\n      $IF (Component_Invent_SYS.INSTALLED) $THEN\n         Inventory_Part_API.Check_Enable_Catch_Unit(newrec_.part_no); \n      $ELSE \n   END IF;\n   IF ((newrec_.description) != (oldrec_.description))  THEN\n   END IF;\n   IF ((newrec_.receipt_issue_serial_track != oldrec_.receipt_issue_serial_track) AND\n       (newrec_.receipt_issue_serial_track = db_true_))  THEN\n      $IF (Component_Invent_SYS.INSTALLED)$THEN \n      $ELSE \n      $IF (Component_Purch_SYS.INSTALLED) $THEN \n      $ELSE \n      IF (newrec_.condition_code_usage = Condition_Code_Usage_API.DB_ALLOW_CONDITION_CODE) THEN\n      END IF;   \n   END IF;\n-- ... exception handling ...\nEXCEPTION\n   WHEN dup_val_on_index THEN\n      Error_SYS.Record_Exist(lu_name_);\nEND Update___;", "original_code_length": 4904, "summary": null}
{"id": "InventoryPart_Convert_Storage_Req_Uom___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Convert_Storage_Req_Uom___", "previous_function": null, "next_function": "Check_Value_Method_Combinat___", "complexity_metrics": {"total_lines": 90, "code_lines": 85, "cyclomatic_complexity": 51, "estimated_tokens": 326.3}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 6056, "truncated_length": 1236, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.20409511228533686}}, "code": "PROCEDURE Convert_Storage_Req_Uom___(\n   to_storage_width_requirement_    OUT NUMBER,\n   to_storage_height_requirement_   OUT NUMBER,\n   to_storage_depth_requirement_    OUT NUMBER,\n   to_storage_volume_requirement_   OUT NUMBER,\n   to_storage_weight_requirement_   OUT NUMBER,\n   to_min_storage_temperature_      OUT NUMBER,\n   to_max_storage_temperature_      OUT NUMBER,\n   to_min_storage_humidity_         OUT NUMBER,\n   to_max_storage_humidity_         OUT NUMBER,\n   from_rec_                        IN  inventory_part_tab%ROWTYPE,\n   to_contract_                     IN  VARCHAR2)\n-- ... key business logic ...\n            END IF;\n            IF (from_rec_.storage_height_requirement IS NOT NULL) THEN\n            END IF;\n            IF (from_rec_.storage_depth_requirement IS NOT NULL) THEN\n            END IF;\n         ELSE\n         END IF;\n      END IF;\n      IF(from_rec_.storage_volume_requirement IS NOT NULL) THEN\n         IF (from_company_invent_rec_.uom_for_volume != to_company_invent_rec_.uom_for_volume) THEN\n         ELSE\n         END IF;\n      END IF;\n      IF(from_rec_.storage_weight_requirement IS NOT NULL) THEN\n         IF (from_company_invent_rec_.uom_for_weight != to_company_invent_rec_.uom_for_weight) THEN", "original_code_length": 6056, "summary": null}
{"id": "PartCatalog_Check_Valid_Serial___", "context": {"api_name": "PartCatalog", "module": "partca", "file_summary": "Inventory management and tracking - PartCatalog", "function_name": "Check_Valid_Serial___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 148, "code_lines": 137, "cyclomatic_complexity": 51, "estimated_tokens": 477.1}, "pagerank_score": 0.0011234871824286733, "truncation_metadata": {"original_length": 6923, "truncated_length": 1654, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.23891376570850786}}, "code": "PROCEDURE Check_Valid_Serial___ (\n   newrec_ IN part_catalog_tab%ROWTYPE,\n   oldrec_ IN part_catalog_tab%ROWTYPE )\nIS\n   exist_mrp_code_ VARCHAR2(10);\n   check_result_   NUMBER;\n   attr_           VARCHAR2(32000);\nBEGIN\n   IF ((newrec_.eng_serial_tracking_code   != oldrec_.eng_serial_tracking_code  ) OR \n       (newrec_.receipt_issue_serial_track != oldrec_.receipt_issue_serial_track)) THEN\n      IF ((newrec_.eng_serial_tracking_code   = db_serial_tracking_) OR\n          (newrec_.receipt_issue_serial_track = db_true_)) THEN\n-- ... key business logic ...\n         Kanban_Circuit_API.Check_Serial_Track_Change(newrec_.part_no, newrec_.serial_tracking_code);\n      $ELSE \n      IF (newrec_.receipt_issue_serial_track = db_true_) THEN\n         $IF (Component_Purch_SYS.INSTALLED) $THEN \n            Purchase_Part_API.Check_Serial_Track_Change(newrec_.part_no,\n         $ELSE \n      END IF;   \n      $IF (Component_Order_SYS.INSTALLED)$THEN\n         Sales_Part_API.Check_Serial_Track_Change(newrec_.part_no,\n      $ELSE \n   END IF;\n   IF (newrec_.receipt_issue_serial_track != oldrec_.receipt_issue_serial_track) THEN\n      $IF (Component_Mfgstd_SYS.INSTALLED)$THEN\n         Manuf_Structure_Util_API.Check_Serial_Tracking_Change(newrec_.part_no,     \n      -- Check if part is allocated\n      $IF (Component_Shpord_SYS.INSTALLED)$THEN \n         Shop_Material_Alloc_List_API.Check_Part_Track_Change(newrec_.part_no, NULL, newrec_.receipt_issue_serial_track); \n      -- Check if part_no exists on a active order line.\n      $IF (Component_Purch_SYS.INSTALLED)$THEN \n         check_result_ := Purchase_Order_Line_Part_API.Part_Exist(newrec_.part_no, NULL);", "original_code_length": 6923, "summary": null}
{"id": "FndRole_Copy_Grants__", "context": {"api_name": "FndRole", "module": "fndbas", "file_summary": "Business logic and data operations - FndRole", "function_name": "Copy_Grants__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 192, "code_lines": 161, "cyclomatic_complexity": 50, "estimated_tokens": 691.6}, "pagerank_score": 0.0011843561922212887, "truncation_metadata": {"original_length": 7649, "truncated_length": 1383, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.18080794875147077}}, "code": "PROCEDURE Copy_Grants__ (\n   new_role_            IN     VARCHAR2,\n   role_                IN     VARCHAR2,\n   include_users_       IN     VARCHAR2,\n   include_user_groups_ IN     VARCHAR2,\n   info_                IN OUT VARCHAR2)\nIS\n   attr_               VARCHAR2(32000);\n   objid_              Fnd_Role.objid%TYPE;\n   objversion_         Fnd_Role.objversion%TYPE;\n   record_not_exists   EXCEPTION;\n   PRAGMA exception_init( record_not_exists, -20111);\n-- ... key business logic ...\n   CURSOR get_lobby_data_src_grant IS   \n      SELECT po_id, role\n   CURSOR get_database_task_and_chain_grant IS   \n      SELECT po_id, role\n   CURSOR get_user_grants IS\n      SELECT identity\n   CURSOR get_user_group_grants IS   \n      SELECT group_name\n   FOR proj_ IN get_projection_grant LOOP\n      FOR proj_entity_ IN get_projection_entity_grant(proj_.PROJECTION) LOOP\n         FOR entity_action_grant_ IN get_entity_action_grant(proj_.PROJECTION, proj_entity_.ENTITY) LOOP\n         END LOOP;\n      END LOOP;\n      FOR action_grant_ IN get_projection_action_grant(proj_.PROJECTION) LOOP\n      END LOOP;\n   END LOOP; \n   FOR ref_grant_ IN get_role_grant LOOP\n   END LOOP;   \n   $IF Component_Fndwf_SYS.INSTALLED $THEN\n   FOR work_ IN get_workflow_grant LOOP\n         -- before replacing, extract the WF API list if it has not been extracted already. this will extract data to all available roles", "original_code_length": 7649, "summary": null}
{"id": "PartCatalog_Create_Part", "context": {"api_name": "PartCatalog", "module": "partca", "file_summary": "Inventory management and tracking - PartCatalog", "function_name": "Create_Part", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 132, "code_lines": 130, "cyclomatic_complexity": 50, "estimated_tokens": 624.0}, "pagerank_score": 0.0011234871824286733, "truncation_metadata": {"original_length": 6638, "truncated_length": 1361, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.20503163603495028}}, "code": "PROCEDURE Create_Part (\n   part_no_                       IN VARCHAR2,\n   description_                   IN VARCHAR2,\n   unit_code_                     IN VARCHAR2,\n   std_name_id_                   IN NUMBER,\n   info_text_                     IN VARCHAR2,\n   part_main_group_               IN VARCHAR2 DEFAULT NULL,\n   eng_serial_tracking_code_      IN VARCHAR2 DEFAULT NULL,\n   serial_tracking_code_          IN VARCHAR2 DEFAULT NULL,\n   configurable_db_               IN VARCHAR2 DEFAULT 'NOT CONFIGURED',\n   condition_code_usage_db_       IN VARCHAR2 DEFAULT 'NOT_ALLOW_COND_CODE',\n   lot_tracking_code_db_          IN VARCHAR2 DEFAULT 'NOT LOT TRACKING',\n-- ... key business logic ...\n   END IF;\n   IF (sub_lot_rule_ IS NOT NULL) THEN\n   END IF;\n   IF (serial_rule_ IS NOT NULL) THEN\n   END IF;\n   IF (eng_serial_tracking_code_ IS NOT NULL) THEN\n   END IF;\n   IF (serial_tracking_code_ IS NOT NULL) THEN\n   END IF;\n   IF(newrec_.configurable IS NULL) THEN\n   END IF;\n   IF (newrec_.condition_code_usage IS NULL) THEN\n   END IF;\n   IF (newrec_.lot_tracking_code IS NULL) THEN\n   END IF;\n   IF (newrec_.position_part IS NULL) THEN\n   END IF;\n   IF (newrec_.catch_unit_enabled IS NULL) THEN\n   END IF;\n   IF (newrec_.receipt_issue_serial_track IS NULL) THEN\n      IF (newrec_.serial_tracking_code = Part_Serial_Tracking_API.DB_SERIAL_TRACKING) THEN\n      ELSE", "original_code_length": 6638, "summary": null}
{"id": "CreateCompanyTem_Insert_Data", "context": {"api_name": "CreateCompanyTem", "module": "enterp", "file_summary": "Business logic and data operations - CreateCompanyTem", "function_name": "Insert_Data", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 136, "code_lines": 136, "cyclomatic_complexity": 50, "estimated_tokens": 794.3000000000001}, "pagerank_score": 0.0008911219913288895, "truncation_metadata": {"original_length": 7475, "truncated_length": 1606, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2148494983277592}}, "code": "PROCEDURE Insert_Data (\n   public_rec_ IN Public_Rec_Templ,\n   interface_  IN NUMBER DEFAULT 170 )\nIS\n   objid_               create_company_tem.objid%TYPE;\n   objversion_          create_company_tem.objversion%TYPE;\n   attr_                VARCHAR2(2000);\n   newrec_              create_company_tem_tab%ROWTYPE;\n   oldrec_              create_company_tem_tab%ROWTYPE;\n   empty_rec_           create_company_tem_tab%ROWTYPE;\n   error_text_          VARCHAR2(2000);\n   temp_template_id_    VARCHAR2(30);\n-- ... key business logic ...\n            UPDATE create_company_tem_tab\n            IF (Is_System_Template___(new_template_id_)) THEN\n               Basic_Data_Translation_API.Insert_Prog_Translation('ENTERP', lu_name_, new_template_id_, description_);   \n            ELSE\n               Basic_Data_Translation_API.Insert_Basic_Data_Translation('ENTERP', lu_name_, new_template_id_, NULL, description_);\n            END IF;\n         END IF;\n      END IF;\n   END IF;\n   newer_version_ := Check_Template_Version___(version_, existing_version_);\n   IF (NOT newer_version_) THEN\n   END IF;\n   IF (oldrec_.template_id IS NULL) THEN\n      IF (is_system_template_) THEN\n         IF NOT (Create_Company_API.Is_Template_Super_User = 'TRUE') THEN\n            IF (app_owner_ != fnd_user_) THEN\n            END IF;\n         END IF;\n      END IF;\n      IF (temp_template_id_ IS NULL) THEN\n      ELSE\n      END IF;      \n      Enterp_Comp_Connect_V170_API.Insert_Key_Master__('TemplKeyLu', newrec_.template_id);\n      Create_Company_Tem_Comp_API.Insert_Data__(public_rec_);\n   ELSE\n      IF (is_system_template_) THEN", "original_code_length": 7475, "summary": null}
{"id": "AccountingCodeParts_Validate_Function___", "context": {"api_name": "AccountingCodeParts", "module": "accrul", "file_summary": "Customer order management and processing - AccountingCodeParts", "function_name": "Validate_Function___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 97, "code_lines": 97, "cyclomatic_complexity": 48, "estimated_tokens": 391.3}, "pagerank_score": 0.0009395088733623111, "truncation_metadata": {"original_length": 3945, "truncated_length": 965, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.24461343472750316}}, "code": "PROCEDURE Validate_Function___ (\n   rec_   IN ACCOUNTING_CODE_PART_TAB%ROWTYPE )\nIS\n   result_a_      VARCHAR2(5);\n   result_b_      VARCHAR2(5);\n   result_c_      VARCHAR2(5);\n   result_d_      VARCHAR2(5);\n   result_e_      VARCHAR2(5);\n   result_f_      VARCHAR2(5);\n   result_g_      VARCHAR2(5);\n   result_h_      VARCHAR2(5);\n   result_i_      VARCHAR2(5);\n-- ... key business logic ...\n         END IF;\n         IF (rec_.code_part = 'E' ) THEN\n         END IF;\n         IF (rec_.code_part = 'F' ) THEN\n         END IF;\n         IF (rec_.code_part = 'G' ) THEN\n         END IF;\n         IF (rec_.code_part = 'H' ) THEN\n         END IF;\n         IF (rec_.code_part = 'I' ) THEN\n         END IF;\n         IF (rec_.code_part = 'J' ) THEN\n         END IF;\n      IF (rec_.code_part = 'A' ) THEN\n      END IF;\n      IF (rec_.code_part = 'B' ) THEN\n      END IF;\n      IF (rec_.code_part = 'C' ) THEN\n      END IF;\n      IF (rec_.code_part = 'D' ) THEN\n      END IF;", "original_code_length": 3945, "summary": null}
{"id": "DataCaptureCommonUtil_Uninstall_Data_Item_All_Config", "context": {"api_name": "DataCaptureCommonUtil", "module": "mpccom", "file_summary": "Business logic and data operations - DataCaptureCommonUtil", "function_name": "Uninstall_Data_Item_All_Config", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 100, "code_lines": 86, "cyclomatic_complexity": 47, "estimated_tokens": 544.7}, "pagerank_score": 0.001318987843487137, "truncation_metadata": {"original_length": 7035, "truncated_length": 1439, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.20454868514570007}}, "code": "PROCEDURE Uninstall_Data_Item_All_Config(\n   capture_process_id_  IN VARCHAR2,\n   data_item_id_        IN VARCHAR2)\nIS\n   $IF Component_Wadaco_SYS.INSTALLED $THEN\n   config_tab_        Data_Capture_Config_API.Data_Capt_Key_State_Tab;\n   conf_detail_tab_   Data_Capture_Common_Util_API.Config_Item_Tab;\n   sdcc_config_tab_   Subseq_Data_Capture_Config_API.Subseq_Conf_Tab;\n   scdi_config_tab_   Subseq_Config_Data_Item_API.Subseq_Conf_Data_Item_Tab;\n   scdi_conf_rec_tab_ Subseq_Config_Data_Item_API.Subseq_Conf_Data_Item_Tab;\n   $END\nBEGIN\n-- ... key business logic ...\n                  END LOOP;\n               END IF;\n            END LOOP;\n         END IF;\n         IF (config_tab_.COUNT > 0) THEN\n            FOR i IN config_tab_.FIRST..config_tab_.LAST  LOOP\n               IF (Data_Capt_Conf_Data_Item_API.Check_Exist(capture_process_id_, config_tab_(i).capture_config_id, data_item_id_)) THEN\n                  IF (conf_detail_tab_.COUNT > 0) THEN\n                     FOR j IN conf_detail_tab_.FIRST..conf_detail_tab_.LAST  LOOP\n                     END LOOP;\n                  END IF;\n                  IF (conf_detail_tab_.COUNT > 0) THEN\n                     FOR j IN conf_detail_tab_.FIRST..conf_detail_tab_.LAST  LOOP\n                     END LOOP;\n                  END IF;\n                  IF (Data_Capture_Config_API.Get_Subseq_Ctrl_Data_Item_Id(capture_process_id_, config_tab_(i).capture_config_id) = data_item_id_) THEN", "original_code_length": 7035, "summary": null}
{"id": "UserAccess_Check_Employee_Self_Access___", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Check_Employee_Self_Access___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 135, "code_lines": 130, "cyclomatic_complexity": 45, "estimated_tokens": 644.8000000000001}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 6820, "truncated_length": 1596, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.23401759530791788}}, "code": "PROCEDURE Check_Employee_Self_Access___(\n   own_data_attr_    IN OUT VARCHAR2,\n   access_granted_   IN OUT VARCHAR2,\n   quick_emp_access_ IN OUT BOOLEAN,\n   emp_no_           IN OUT VARCHAR2,\n   emp_trans_from_   IN     DATE,\n   emp_trans_to_     IN     DATE,\n   access_area_      IN     VARCHAR2,\n   company_id_       IN     VARCHAR2,\n   lu_protected_     IN     VARCHAR2,\n   logical_unit_id_  IN     VARCHAR2,\n   quick_mode_       IN     VARCHAR2,\n-- ... key business logic ...\n   CURSOR get_org_access_attrib(access_role_id_ IN VARCHAR2) IS\n      SELECT r.attribute_id, r.attr_level\n   FOR own_access_rec_ IN get_own_access_rec(excl_reg_org_) LOOP\n      IF own_access_rec_.business_unit_type = 'COMPANY' AND any_org_assignment_ = 'TRUE' THEN\n      ELSE \n      END IF;\n      IF BITAND(Access_Role_API.Get_Bin_Num_Access(own_access_role_id_), access_area_) > 0 THEN\n         IF lu_protected_ = 'TRUE' OR (own_limited_access_ = '1' AND logical_unit_id_ IS NOT NULL) THEN\n            IF own_access_role_id_ IS NOT NULL THEN\n               FOR acc_attr_rec_ IN get_org_access_attrib(own_access_role_id_) LOOP\n                  IF quick_mode_ = '1' THEN\n                  ELSE\n                     IF NOT Client_SYS.Item_Exist(acc_attr_rec_.attribute_id, own_data_attr_) OR\n                        NVL(Client_SYS.Get_Item_Value_To_Number(acc_attr_rec_.attribute_id, own_data_attr_, lu_name_),0) < NVL(acc_attr_rec_.attr_level,0) THEN\n                     END IF;\n                     IF access_granted_ = 'FALSE' THEN\n                     END IF;\n                  END IF;  \n               END LOOP;", "original_code_length": 6820, "summary": null}
{"id": "Site_Update___", "context": {"api_name": "Site", "module": "mpccom", "file_summary": "Customer order management and processing - Site", "function_name": "Update___", "previous_function": "Insert___", "next_function": null, "complexity_metrics": {"total_lines": 70, "code_lines": 65, "cyclomatic_complexity": 44, "estimated_tokens": 422.5}, "pagerank_score": 0.004275812287330555, "truncation_metadata": {"original_length": 4615, "truncated_length": 1689, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.36598049837486457}}, "code": "PROCEDURE Update___ (\n   objid_      IN     VARCHAR2,\n   oldrec_     IN     SITE_TAB%ROWTYPE,\n   newrec_     IN OUT SITE_TAB%ROWTYPE,\n   attr_       IN OUT VARCHAR2,\n   objversion_ IN OUT VARCHAR2,\n   by_keys_    IN BOOLEAN DEFAULT FALSE )\nIS\nBEGIN  \n   super(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);   \n   \n   IF ((NVL(newrec_.delivery_address, Database_SYS.string_null_) != NVL(oldrec_.delivery_address, Database_SYS.string_null_))\n-- ... key business logic ...\n      ELSE\n         IF (Work_Time_Calendar_API.Get_Min_Work_Day(oldrec_.dist_calendar_id) < Work_Time_Calendar_API.Get_Min_Work_Day(newrec_.dist_calendar_id)) THEN\n         END IF;\n      END IF;\n   END IF;\n   IF ((newrec_.manuf_calendar_id != oldrec_.manuf_calendar_id)\n     AND ((newrec_.dist_calendar_id = oldrec_.dist_calendar_id)                -- only skip if made\n            OR (newrec_.dist_calendar_id != newrec_.manuf_calendar_id))) THEN  -- for dist.cal\n        IF (Work_Time_Calendar_API.Get_Max_Work_Day(oldrec_.manuf_calendar_id) > Work_Time_Calendar_API.Get_Max_Work_Day(newrec_.manuf_calendar_id)) THEN\n          IF (Work_Time_Calendar_API.Get_Min_Work_Day(oldrec_.manuf_calendar_id) < Work_Time_Calendar_API.Get_Min_Work_Day(newrec_.manuf_calendar_id)) THEN\n             Client_SYS.Add_Info(lu_name_, 'CAL_START_END_DIF: The specified time period in calendar :P1 is shorter than that of calendar :P2. This may affect outstanding orders.', newrec_.manuf_calendar_id, oldrec_.manuf_calendar_id);\n          ELSE\n          END IF;\n      ELSE\n         IF (Work_Time_Calendar_API.Get_Min_Work_Day(oldrec_.manuf_calendar_id) < Work_Time_Calendar_API.Get_Min_Work_Day(newrec_.manuf_calendar_id)) THEN", "original_code_length": 4615, "summary": null}
{"id": "UserAccess_Self_Access_Check___", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Self_Access_Check___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 153, "code_lines": 148, "cyclomatic_complexity": 44, "estimated_tokens": 699.4}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 7410, "truncated_length": 1389, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1874493927125506}}, "code": "PROCEDURE Self_Access_Check___(\n   own_data_attr_      IN OUT VARCHAR2,\n   access_granted_     IN OUT VARCHAR2,\n   any_org_assignment_ IN OUT VARCHAR2,\n   quick_self_access_  IN OUT BOOLEAN,\n   emp_no_             IN     VARCHAR2,\n   company_id_         IN     VARCHAR2,\n   org_code_           IN     VARCHAR2,\n   emp_bu_id_          IN     NUMBER,\n   access_date_from_   IN     DATE,\n   access_date_to_     IN     DATE,\n   excl_reg_org_       IN     VARCHAR2,\n-- ... key business logic ...\n      SELECT r.attribute_id,\n   FOR own_access_rec_ IN get_own_access_rec LOOP\n      IF own_access_rec_.business_unit_type = 'COMPANY' AND any_org_assignment_ = 'TRUE' THEN\n      ELSE \n      END IF;\n      IF BITAND(Access_Role_API.Get_Bin_Num_Access(own_access_role_id_),access_area_) > 0 THEN\n         IF lu_protected_ = 'TRUE' OR (own_limited_access_ = '1' AND logical_unit_id_ IS NOT NULL) THEN\n            IF own_access_role_id_ IS NOT NULL THEN\n               FOR acc_attr_rec_ IN get_org_access_attrib(own_access_role_id_, 'FALSE', 0) LOOP\n                  IF quick_mode_ = '1' THEN\n                  ELSE\n                     IF NOT Client_SYS.Item_Exist(acc_attr_rec_.attribute_id, own_data_attr_) OR\n                        NVL(Client_SYS.Get_Item_Value_To_Number(acc_attr_rec_.attribute_id, own_data_attr_, lu_name_),0) < NVL(acc_attr_rec_.attr_level,0) THEN\n                     END IF;", "original_code_length": 7410, "summary": null}
{"id": "UserAccess_Is_User_Avail_Emp_No_New___", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Is_User_Avail_Emp_No_New___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 164, "code_lines": 139, "cyclomatic_complexity": 44, "estimated_tokens": 695.5}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 6462, "truncated_length": 1176, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.18198700092850512}}, "code": "PROCEDURE Is_User_Avail_Emp_No_New___ (\n   is_app_owner_      OUT    VARCHAR2,\n   is_hr_mgr_         OUT    VARCHAR2,\n   is_own_emp_no_     OUT    VARCHAR2,\n   own_data_attr_     IN OUT VARCHAR2,\n   data_access_attr_  IN OUT VARCHAR2,\n   emp_no_            IN OUT VARCHAR2,\n   company_id_        IN     VARCHAR2,\n   trans_date_from_   IN     DATE DEFAULT NULL,\n   trans_date_to_     IN     DATE DEFAULT NULL,\n   access_own_emp_no_ IN     VARCHAR2 DEFAULT '1',\n   check_hr_mgr_      IN     VARCHAR2 DEFAULT '1',\n-- ... key business logic ...\n   IF (company_access_ IS NULL OR company_id_ != company_access_) THEN\n   END IF;\n   -- Check the login user has HR-Manager Access\n   IF (check_hr_mgr_ = '1') AND micro_cache_manager_user_ THEN\n   END IF;\n   IF (emp_trans_from_ IS NULL) THEN \n   END IF;\n   IF (emp_trans_to_ IS NULL) THEN \n   END IF;\n   -- Check own access\n   IF access_own_emp_no_ = '1' THEN\n      IF (start_pos_emp_ > 0) THEN\n         IF (exist_ > 0) THEN         \n            IF logical_unit_id_ IS NOT NULL THEN\n            END IF;\n            IF org_code_ IS NOT NULL AND Company_Org_API.Get_Exclusive_Reg(company_id_, org_code_) = 'TRUE' THEN\n            END IF;", "original_code_length": 6462, "summary": null}
{"id": "UserAccess_Is_Person_Avail_Emp_No_New___", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Is_Person_Avail_Emp_No_New___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 162, "code_lines": 135, "cyclomatic_complexity": 43, "estimated_tokens": 639.6}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 6195, "truncated_length": 1230, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.19854721549636803}}, "code": "PROCEDURE Is_Person_Avail_Emp_No_New___ (\n   is_app_owner_      OUT    VARCHAR2,\n   is_hr_mgr_         OUT    VARCHAR2,\n   is_own_emp_no_     OUT    VARCHAR2,\n   own_data_attr_     IN OUT VARCHAR2,\n   data_access_attr_  IN OUT VARCHAR2,\n   emp_no_            IN OUT VARCHAR2,\n   company_id_        IN     VARCHAR2,\n   sup_person_id_     IN     VARCHAR2,\n   trans_date_from_   IN     DATE DEFAULT NULL,\n   access_own_emp_no_ IN     VARCHAR2 DEFAULT '1',\n   check_hr_mgr_      IN     VARCHAR2 DEFAULT '1',\n-- ... key business logic ...\n   END IF;\n   IF (check_hr_mgr_ = '1') AND micro_cache_manager_user_ THEN\n   END IF;\n   IF (emp_trans_from_ IS NULL) THEN \n   END IF;\n   IF (emp_trans_to_ IS NULL) THEN \n   END IF;\n   IF access_own_emp_no_ = '1' THEN\n      IF (start_pos_emp_ > 0) THEN\n         IF (exist_ > 0) THEN         \n            IF logical_unit_id_ IS NOT NULL THEN\n            END IF;\n            IF org_code_ IS NOT NULL AND Company_Org_API.Get_Exclusive_Reg(company_id_, org_code_) = 'TRUE' THEN\n            END IF;\n            IF quick_mode_ = '1' AND Is_Cache_Member___(company_id_, emp_no_, logical_unit_id_, emp_trans_from_, emp_trans_to_, org_code_, lu_protected_, excl_reg_org_, 'TRUE') THEN  \n            END IF;", "original_code_length": 6195, "summary": null}
{"id": "DataCaptureSession_Continue_Session", "context": {"api_name": "DataCaptureSession", "module": "wadaco", "file_summary": "Business logic and data operations - DataCaptureSession", "function_name": "Continue_Session", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 85, "code_lines": 74, "cyclomatic_complexity": 42, "estimated_tokens": 444.6}, "pagerank_score": 0.001353095076110586, "truncation_metadata": {"original_length": 5416, "truncated_length": 1576, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.29098966026587886}}, "code": "PROCEDURE Continue_Session (\n   capture_session_id_            IN NUMBER,\n   session_line_no_               IN NUMBER  DEFAULT NULL,\n   user_requested_item_loop_exit_ IN BOOLEAN DEFAULT FALSE,\n   end_with_confirmation_         IN BOOLEAN DEFAULT FALSE)\nIS\n   session_rec_          Data_Capture_Session_API.Public_Rec;\n   session_line_rec_     Data_Capture_Session_Line_API.Public_Rec;\n   next_data_item_rec_   Data_Capture_Common_Util_API.Session_Line_Rec;\n   config_data_item_rec_ Data_Capt_Conf_Data_Item_API.Public_Rec;\n   visible_db_           VARCHAR2(5);\n   lov_enabled_db_       VARCHAR2(20);\n-- ... key business logic ...\n         END IF;\n         IF (NOT user_requested_item_loop_exit_ AND session_line_rec_.data_item_id != 'CONFIRMATION') THEN  -- Dont do validation if the user have just pressed next/exit loop (value is probably null and will be removed as incomple loop anyway) or if its confirmation item\n            -- Validate  (Do some general framework and process validations)\n            Validate_Data_Item___(capture_session_id_, session_line_rec_.data_item_id, session_line_rec_.data_item_value, process_package_);\n         END IF;\n                                                      user_requested_item_loop_exit_ => user_requested_item_loop_exit_);\n      ELSE  -- New session get the first data item in the configuration order                    \n                                                      user_requested_item_loop_exit_ => user_requested_item_loop_exit_);\n      END IF;\n   END IF;\n   IF (next_data_item_rec_.data_item_id IS NOT NULL) THEN", "original_code_length": 5416, "summary": null}
{"id": "CustomerInfo_Copy_Customer_Details___", "context": {"api_name": "CustomerInfo", "module": "enterp", "file_summary": "Customer order management and processing - CustomerInfo", "function_name": "Copy_Customer_Details___", "previous_function": null, "next_function": "Copy_Prospect_Details___", "complexity_metrics": {"total_lines": 100, "code_lines": 100, "cyclomatic_complexity": 42, "estimated_tokens": 496.6}, "pagerank_score": 0.0009351525419111985, "truncation_metadata": {"original_length": 5440, "truncated_length": 1467, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2696691176470588}}, "code": "PROCEDURE Copy_Customer_Details___ (\n   customer_id_          IN VARCHAR2,\n   new_id_               IN VARCHAR2,\n   company_              IN VARCHAR2,\n   copy_convert_option_  IN VARCHAR2, \n   overwrite_order_data_ IN VARCHAR2,\n   transfer_addr_data_   IN VARCHAR2 )\nIS\n   pkg_method_name_   VARCHAR2(200);\n   module_            VARCHAR2(6);\n   stmt_              VARCHAR2(200);\n   new_del_address_   customer_info_address_tab.address_id%TYPE;\n-- ... key business logic ...\n   WHILE (TRUE) LOOP\n      EXIT WHEN get_copying_customer_info%NOTFOUND;\n      IF (module_ = 'INVOIC') THEN\n         IF (Dictionary_SYS.Component_Is_Active('INVOIC')) THEN\n            IF (new_del_address_ IS NULL) THEN\n               --use created new delivery address id if address id already exist\n            END IF;\n         END IF;\n      ELSIF (module_ = 'PAYLED') THEN\n         IF (Dictionary_SYS.Component_Is_Active('PAYLED')) THEN\n         END IF;                                          \n      ELSIF (module_ = 'PRJREP') THEN\n         IF (Dictionary_SYS.Component_Is_Active('PRJREP')) THEN\n         END IF;                                          \n      ELSIF (module_ = 'ENTERP') THEN\n         IF (pkg_method_name_ = 'Comm_Method_API.Copy_Identity_Info') THEN\n            IF (Customer_Info_API.Get_One_Time_Db(customer_id_) = 'FALSE') THEN\n               IF (copy_convert_option_ = 'CONVERT') THEN\n                  IF (temp_del_addr_ IS NOT NULL AND new_del_address_ IS NULL) THEN", "original_code_length": 5440, "summary": null}
{"id": "UserAccess_New_Modify_User_Data", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "New_Modify_User_Data", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 179, "code_lines": 163, "cyclomatic_complexity": 41, "estimated_tokens": 679.9}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 6933, "truncated_length": 1310, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.18895139189384105}}, "code": "PROCEDURE New_Modify_User_Data (\n   refresh_pos_    IN VARCHAR2 DEFAULT NULL,\n   person_user_id_ IN VARCHAR2 DEFAULT NULL)\nIS\n   db_owner_               VARCHAR2(30);\n   current_person_id_      VARCHAR2(20);\n   temp_manager_user_      VARCHAR2(1);\n   temp_protected_access_  VARCHAR2(1);\n   temp_company_cache_     VARCHAR2(32000);\n   temp_mtx_struct_cache_  VARCHAR2(32000);\n   temp_user_is_emp_no_    VARCHAR2(32000);\n   emp_no_string_          VARCHAR2(32000);\n-- ... key business logic ...\n                      SELECT a.pos_code,\n   -- check if database owner and cache fnd_user_name_ and db_owner_name_.\n   IF user_id_ = db_owner_ THEN\n   END IF;\n   IF Party_Admin_User_API.Check_Exist(Application_Domain_API.Get_Default, User_Access_API.Get_User) = 'TRUE' THEN\n   ELSE\n   END IF;\n   IF Pers_API.Is_Manager(current_person_id_) = 1 THEN\n   END IF;\n   FOR rec_ IN  get_comp LOOP\n   END LOOP;\n   OPEN check_mtx_struct;\n   FETCH check_mtx_struct INTO dummy_;\n   IF check_mtx_struct%FOUND THEN\n      CLOSE check_mtx_struct;\n      FOR rec_ IN get_mtx_struct LOOP\n         IF (INSTR(temp_mtx_struct_cache_, chr(31) || rec_.structure_id || chr(31)) = 0) THEN\n         END IF;   \n      END LOOP;\n   ELSE\n      CLOSE check_mtx_struct;\n   END IF;   \n   FOR rec_ IN get_comp LOOP\n      FOR reco_ IN (SELECT cp.emp_no", "original_code_length": 6933, "summary": null}
{"id": "UserAccess_Is_User_Available_Org_Bu_Id", "context": {"api_name": "UserAccess", "module": "person", "file_summary": "Financial operations and accounting - UserAccess", "function_name": "Is_User_Available_Org_Bu_Id", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 151, "code_lines": 139, "cyclomatic_complexity": 38, "estimated_tokens": 652.6}, "pagerank_score": 0.001955925656157346, "truncation_metadata": {"original_length": 6364, "truncated_length": 977, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.15351979886863606}}, "code": "PROCEDURE Is_User_Available_Org_Bu_Id (\n   is_app_owner_     OUT    VARCHAR2,\n   is_hr_mgr_        OUT    VARCHAR2,\n   data_access_attr_ OUT    VARCHAR2,\n   org_bu_id_        IN OUT NUMBER,\n   company_id_       IN     VARCHAR2 DEFAULT NULL,\n   trans_date_       IN     DATE DEFAULT NULL,\n   logical_unit_id_  IN     VARCHAR2 DEFAULT NULL,\n   access_type_      IN     VARCHAR2 DEFAULT NULL,\n   quick_mode_       IN     VARCHAR2 DEFAULT '1')\nIS\n   company_access_    person_company.company_id%TYPE;\n-- ... key business logic ...\n   CURSOR get_org_access_attrib(access_role_id_ IN VARCHAR2, substitute_entry_ IN VARCHAR2, substitute_seq_id_ IN NUMBER) IS\n         SELECT r.attribute_id,\n         SELECT r.attribute_id,\n   IF NOT Is_Cache_Valid___ THEN\n      New_Modify_User_Data;\n   END IF;   \n   IF micro_cache_database_owner_ THEN\n   END IF;   \n   IF company_id_ IS NOT NULL THEN\n      IF (company_access_ IS NULL OR company_id_ <> company_access_) THEN\n      END IF;\n   END IF;", "original_code_length": 6364, "summary": null}
{"id": "CurrencyType_Check_Insert___", "context": {"api_name": "CurrencyType", "module": "accrul", "file_summary": "Customer order management and processing - CurrencyType", "function_name": "Check_Insert___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 56, "code_lines": 50, "cyclomatic_complexity": 38, "estimated_tokens": 434.2}, "pagerank_score": 0.0009719770155492568, "truncation_metadata": {"original_length": 3446, "truncated_length": 1786, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.518282066163668}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT currency_type_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   currency_type_value_ VARCHAR2(10);\n   company_finance_rec_ Company_Finance_API.Public_Rec;\nBEGIN\n   super(newrec_, indrec_, attr_);\n   \n   IF (newrec_.type_default != 'Y' AND newrec_.rate_type_category = 'NORMAL') THEN\n      IF NOT Check_Def_Curr_Type_Exist___(newrec_.company, newrec_.ref_currency_code) THEN\n-- ... key business logic ...\n   IF (newrec_.rate_type_category = 'NORMAL') THEN\n      IF (Currency_Code_API.Get_Emu(newrec_.company,company_finance_rec_.currency_code) = 'TRUE') AND (newrec_.ref_currency_code != 'EUR') THEN\n         Error_SYS.Appl_General(lu_name_,'NODEFTYPE1: IF the Rate Type Category is Normal only EUR can be used as Reference Currency Code. IF the category is Project or Tax Reporting, any currency can be used as Reference Currency Code.');\n      END IF;\n   END IF;\n   IF (newrec_.rate_type_category = 'NORMAL') THEN\n      IF (newrec_.ref_currency_code != company_finance_rec_.currency_code) AND (newrec_.ref_currency_code != 'EUR') THEN\n         IF (currency_type_value_ = 'Y' ) THEN\n            IF (company_finance_rec_.currency_code = 'EUR') THEN --JOELSE\n               Error_SYS.Appl_General(lu_name_,'NODEFTYPE1: IF the Rate Type Category is Normal only EUR can be used as Reference Currency Code. IF the category is Project or Tax Reporting, any currency can be used as Reference Currency Code.');\n            ELSE\n               Error_SYS.Appl_General(lu_name_,'NODEFTYPE3: IF the Rate Type Category is Normal only :P1 and EUR can be used as Reference Currency Code. IF the category is Project or Tax Reporting, any currency can be used as Reference Currency Code.', company_finance_rec_.currency_code);", "original_code_length": 3446, "summary": null}
{"id": "DataCaptureSession_Get_Predicted_Data_Item_Value", "context": {"api_name": "DataCaptureSession", "module": "wadaco", "file_summary": "Business logic and data operations - DataCaptureSession", "function_name": "Get_Predicted_Data_Item_Value", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 73, "code_lines": 63, "cyclomatic_complexity": 37, "estimated_tokens": 518.7}, "pagerank_score": 0.001353095076110586, "truncation_metadata": {"original_length": 4037, "truncated_length": 1251, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.3098835769135497}}, "code": "FUNCTION Get_Predicted_Data_Item_Value (\n   capture_session_id_      IN NUMBER,\n   current_data_item_id_    IN VARCHAR2,\n   current_data_item_value_ IN VARCHAR2,\n   wanted_data_item_id_     IN VARCHAR2,\n   session_rec_             IN Data_Capture_Common_Util_API.Session_Rec DEFAULT NULL,\n   process_package_         IN VARCHAR2 DEFAULT NULL,\n   use_applicable_          IN BOOLEAN DEFAULT TRUE,\n   process_part_no_id_      IN VARCHAR2 DEFAULT 'PART_NO' ) RETURN VARCHAR2\nIS\n   predicted_value_              data_capture_session_line_tab.data_item_value%TYPE;\n   local_session_rec_            Data_Capture_Common_Util_API.Session_Rec;\n-- ... key business logic ...\n   ELSE\n   END IF;\n   -- 1) If the wanted data item is the same as current data item then use current data item value \n   IF (current_data_item_id_ = wanted_data_item_id_) THEN\n   END IF;\n   -- 2) Get previoulsy saved value on session line for the wanted data item if it is before current data item in configuration\n   IF (predicted_value_ IS NULL) THEN\n      predicted_value_ := Get_Latest_A_If_Before_B(capture_session_id_ => capture_session_id_, \n   END IF;\n   -- 3) Get any subsequent value for the wanted data item (if it is subsequent \"fixed)\n   IF (predicted_value_ IS NULL) THEN", "original_code_length": 4037, "summary": null}
{"id": "DataCaptureCommonUtil_Install_Data_Item_All_Configs", "context": {"api_name": "DataCaptureCommonUtil", "module": "mpccom", "file_summary": "Business logic and data operations - DataCaptureCommonUtil", "function_name": "Install_Data_Item_All_Configs", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 106, "code_lines": 102, "cyclomatic_complexity": 37, "estimated_tokens": 481.0}, "pagerank_score": 0.001318987843487137, "truncation_metadata": {"original_length": 7726, "truncated_length": 1381, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.17874708775563034}}, "code": "PROCEDURE Install_Data_Item_All_Configs (\n   capture_process_id_            IN VARCHAR2,\n   data_item_id_                  IN VARCHAR2,\n   description_                   IN VARCHAR2,\n   data_type_db_                  IN VARCHAR2,\n   process_key_db_                IN VARCHAR2,\n   uppercase_db_                  IN VARCHAR2 DEFAULT Fnd_Boolean_API.db_true,\n   string_length_                 IN NUMBER   DEFAULT 200,\n   enumeration_package_           IN VARCHAR2 DEFAULT NULL,\n   status_package_                IN VARCHAR2 DEFAULT NULL,\n   data_item_value_view_          IN VARCHAR2 DEFAULT NULL,\n   data_item_value_pkg_           IN VARCHAR2 DEFAULT NULL,\n-- ... key business logic ...\n   $IF Component_Wadaco_SYS.INSTALLED $THEN\n      IF (config_data_item_order_ IS NULL OR config_data_item_order_ = 0) THEN\n      END IF;\n      IF (data_type_db_ NOT IN (Data_Capture_Data_Type_API.DB_STRING, Data_Capture_Data_Type_API.DB_GS1)) THEN\n      ELSE\n      END IF;\n      Data_Capt_Proc_Data_Item_API.New_Or_Modify(capture_process_id_            => capture_process_id_, \n                                                 exit_loop_assist_supp_db_      => process_exit_loop_assist_supp_);\n      IF (config_tab_.COUNT > 0) THEN\n         FOR i IN config_tab_.FIRST..config_tab_.LAST  LOOP\n            Data_Capt_Conf_Data_Item_API.New_Or_Modify(capture_process_id_      => capture_process_id_, ", "original_code_length": 7726, "summary": null}
{"id": "Account_Check_Currency_Balance___", "context": {"api_name": "Account", "module": "accrul", "file_summary": "Financial operations and accounting - Account", "function_name": "Check_Currency_Balance___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 52, "code_lines": 52, "cyclomatic_complexity": 37, "estimated_tokens": 249.60000000000002}, "pagerank_score": 0.0009246413570091835, "truncation_metadata": {"original_length": 2071, "truncated_length": 1487, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.718010622887494}}, "code": "PROCEDURE Check_Currency_Balance___(\n   rec_ IN accounting_code_part_value_tab%ROWTYPE )\nIS\n   code_part_using_function_  VARCHAR2(1);\n   can_not_curr_bal           EXCEPTION;\nBEGIN\n   IF (rec_.curr_balance = 'Y') THEN\n      code_part_using_function_ := Accounting_Code_Parts_API.Get_Codepart_Function_Db(rec_.company, 'CURR');\n      IF (code_part_using_function_ IS NOT NULL) THEN\n         IF (code_part_using_function_ = 'B') THEN\n            IF (rec_.req_code_b != 'S' ) THEN\n               RAISE can_not_curr_bal;\n-- ... key business logic ...\n         ELSIF (code_part_using_function_ = 'D') THEN\n            IF (rec_.req_code_d != 'S' ) THEN\n               RAISE can_not_curr_bal;\n            END IF;\n         ELSIF (code_part_using_function_ = 'E') THEN\n            IF (rec_.req_code_e != 'S' ) THEN\n               RAISE can_not_curr_bal;\n            END IF;\n         ELSIF (code_part_using_function_ = 'F') THEN\n            IF (rec_.req_code_f != 'S' ) THEN\n               RAISE can_not_curr_bal;\n            END IF;\n         ELSIF (code_part_using_function_ = 'G') THEN\n            IF (rec_.req_code_g != 'S' ) THEN\n               RAISE can_not_curr_bal;\n            END IF;\n         ELSIF (code_part_using_function_ = 'H') THEN\n-- ... exception handling ...\nEXCEPTION\n   WHEN can_not_curr_bal THEN\n      Error_SYS.Record_General(lu_name_, 'FUNC_BLOCK: Currency balance flag can not be set if the codepart using currency balance is not blocked.');\nEND Check_Currency_Balance___;", "original_code_length": 2071, "summary": null}
{"id": "PostingCtrlCrecomp_Upd_Diff_Templ_Pctrl_Gen___", "context": {"api_name": "PostingCtrlCrecomp", "module": "accrul", "file_summary": "Business logic and data operations - PostingCtrlCrecomp", "function_name": "Upd_Diff_Templ_Pctrl_Gen___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 153, "code_lines": 136, "cyclomatic_complexity": 36, "estimated_tokens": 568.1}, "pagerank_score": 0.0016192330736968248, "truncation_metadata": {"original_length": 6416, "truncated_length": 725, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.11299875311720699}}, "code": "PROCEDURE Upd_Diff_Templ_Pctrl_Gen___(\n   template_rec_        IN Create_Company_Tem_API.Public_Rec_Templ,\n   lu_                  IN VARCHAR2,\n   pc_valid_from_date_  IN DATE,\n   valid_from_date_     IN DATE)\nIS\n   change_templ_rec_    Create_Company_Tem_API.Public_Rec_Templ;\n\n   TYPE RecordType      IS REF CURSOR;\n   get_data_            RecordType;\n   i_                   NUMBER := 0;\n   stmt_                VARCHAR2(4000);\n-- ... key business logic ...\n   ELSIF (lu_ = 'PostingCtrlCombDet') THEN\n   ELSIF (lu_ = 'PostingCtrlCDetSpec') THEN\n   ELSE\n   END IF;\n   IF (stmt2_ IS NOT NULL) THEN\n      WHILE get_data_%FOUND LOOP\n         IF (lu_ = 'PostingCtrlDetail') THEN\n         ELSIF (lu_ = 'PostingCtrlDetSpec') THEN", "original_code_length": 6416, "summary": null}
{"id": "PersonInfo_Update___", "context": {"api_name": "PersonInfo", "module": "enterp", "file_summary": "Customer order management and processing - PersonInfo", "function_name": "Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 70, "code_lines": 70, "cyclomatic_complexity": 35, "estimated_tokens": 304.2}, "pagerank_score": 0.002128759154655315, "truncation_metadata": {"original_length": 3402, "truncated_length": 1341, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.3941798941798942}}, "code": "PROCEDURE Update___ (\n   objid_      IN     VARCHAR2,\n   oldrec_     IN     person_info_tab%ROWTYPE,\n   newrec_     IN OUT person_info_tab%ROWTYPE,\n   attr_       IN OUT VARCHAR2,\n   objversion_ IN OUT VARCHAR2,\n   by_keys_    IN     BOOLEAN DEFAULT FALSE )\nIS\n   from_hr_                   VARCHAR2(5) := 'FALSE';\n   hr_data_changed_           VARCHAR2(5) := 'FALSE';\n   resource_seq_              NUMBER;\n   called_from_pers_data_man_ VARCHAR2(5) := 'FALSE';\n-- ... key business logic ...\n      IF (oldrec_.name != full_name_) THEN\n      END IF;\n   END IF;\n   $IF Component_Rmcom_SYS.INSTALLED $THEN\n      Rm_Dup_Update___(newrec_);\n      Rm_Dup_Check_For_Duplicate___(attr_, newrec_);\n   $ELSE\n   $IF Component_Mxcore_SYS.INSTALLED $THEN \n      Mx_User_Util_API.Perform_Update(lu_name_, Pack___(oldrec_), Pack___(newrec_));\n   IF (oldrec_.user_id = micro_cache_id_cfu_) AND (oldrec_.user_id <> newrec_.user_id OR oldrec_.person_id <> newrec_.person_id) THEN\n      Invalidate_Cache_Cfu___;\n   END IF;\n   IF (from_hr_ = 'FALSE') AND (called_from_pers_data_man_ = 'FALSE') AND (hr_data_changed_ = 'TRUE') THEN\n      Add_Modify_H_R_Person(newrec_.person_id, newrec_.first_name, newrec_.last_name, newrec_.middle_name, newrec_.prefix, newrec_.birth_name, newrec_.initials, newrec_.title);\n   END IF;\n   $IF Component_Genres_SYS.INSTALLED $THEN", "original_code_length": 3402, "summary": null}
{"id": "CustomerInfo_Copy_Prospect_Details___", "context": {"api_name": "CustomerInfo", "module": "enterp", "file_summary": "Customer order management and processing - CustomerInfo", "function_name": "Copy_Prospect_Details___", "previous_function": "Copy_Customer_Details___", "next_function": null, "complexity_metrics": {"total_lines": 88, "code_lines": 88, "cyclomatic_complexity": 34, "estimated_tokens": 430.3}, "pagerank_score": 0.0009351525419111985, "truncation_metadata": {"original_length": 4669, "truncated_length": 1149, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2460912400942386}}, "code": "PROCEDURE Copy_Prospect_Details___ (\n   customer_id_          IN VARCHAR2,\n   new_id_               IN VARCHAR2,\n   company_              IN VARCHAR2,\n   copy_convert_option_  IN VARCHAR2,\n   transfer_addr_data_   IN VARCHAR2,\n   customer_category_    IN VARCHAR2,\n   overwrite_order_data_ IN VARCHAR2 )\nIS\n   pkg_method_name_   VARCHAR2(200);\n   module_            VARCHAR2(6);\n   stmt_              VARCHAR2(200);\n-- ... key business logic ...\n   --template address has a value only when transfer address data is checked\n   WHILE (TRUE) LOOP\n      EXIT WHEN get_copying_prospect_info%NOTFOUND;\n      IF (module_ = 'INVOIC') THEN\n         IF (Dictionary_SYS.Component_Is_Active('INVOIC')) THEN\n            IF (new_del_address_ IS NULL) THEN\n               --use created new delivery address id if address id already exist\n            END IF;\n         END IF;\n      ELSIF (module_ = 'ENTERP' ) THEN\n         IF (pkg_method_name_ = 'Comm_Method_API.Copy_Identity_Info') THEN\n            IF (copy_convert_option_ = 'CONVERT') THEN\n               IF (temp_del_addr_ IS NOT NULL AND new_del_address_ IS NULL) THEN\n               END IF;\n            ELSE", "original_code_length": 4669, "summary": null}
{"id": "Site_Insert___", "context": {"api_name": "Site", "module": "mpccom", "file_summary": "Customer order management and processing - Site", "function_name": "Insert___", "previous_function": null, "next_function": "Update___", "complexity_metrics": {"total_lines": 92, "code_lines": 77, "cyclomatic_complexity": 33, "estimated_tokens": 315.90000000000003}, "pagerank_score": 0.004275812287330555, "truncation_metadata": {"original_length": 3053, "truncated_length": 705, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2309204061578775}}, "code": "PROCEDURE Insert___ (\n   objid_      OUT    VARCHAR2,\n   objversion_ OUT    VARCHAR2,\n   newrec_     IN OUT SITE_TAB%ROWTYPE,\n   attr_       IN OUT VARCHAR2 )\nIS\nBEGIN\n   super(objid_, objversion_, newrec_, attr_);\n\n   IF (newrec_.delivery_address IS NOT NULL) THEN\n      Check_Country_Code___(newrec_);\n   END IF;\n-- ... key business logic ...\n   $IF (Component_Mscom_SYS.INSTALLED) $THEN\n   $IF (Component_Cost_SYS.INSTALLED) $THEN\n   $IF (Component_Invent_SYS.INSTALLED) $THEN\n   $IF (Component_Kanban_SYS.INSTALLED) $THEN\n   $IF (Component_Rental_SYS.INSTALLED) $THEN\n   $ELSE\n-- ... exception handling ...\nEXCEPTION\n   WHEN dup_val_on_index THEN\n      Error_SYS.Record_Exist(lu_name_);\nEND Insert___;", "original_code_length": 3053, "summary": null}
{"id": "InventoryPart_Copy_Characteristics", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Copy_Characteristics", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 67, "code_lines": 61, "cyclomatic_complexity": 33, "estimated_tokens": 250.9}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 2664, "truncated_length": 958, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.35960960960960964}}, "code": "PROCEDURE Copy_Characteristics (\n   from_contract_            IN VARCHAR2,\n   from_part_no_             IN VARCHAR2,\n   to_contract_              IN VARCHAR2,\n   to_part_no_               IN VARCHAR2,\n   error_when_no_source_     IN VARCHAR2,\n   error_when_existing_copy_ IN VARCHAR2 )\nIS\n   newrec_         inventory_part_tab%ROWTYPE;\n   frompartrec_    inventory_part_tab%ROWTYPE;\n   exit_procedure_ EXCEPTION;\nBEGIN\n-- ... key business logic ...\n      IF (error_when_no_source_ = 'TRUE') THEN\n      ELSE\n         RAISE exit_procedure_;\n      END IF;\n   END IF;\n   IF NOT (Check_Exist___(to_contract_, to_part_no_)) THEN\n      RAISE exit_procedure_;\n   END IF;\n   IF (newrec_.eng_attribute IS NOT NULL) THEN\n      IF (error_when_existing_copy_ = 'TRUE') THEN\n      ELSE\n         RAISE exit_procedure_;\n      END IF;\n   END IF;\n   Modify___(newrec_);\n-- ... exception handling ...\nEXCEPTION\n   WHEN exit_procedure_ THEN\n      NULL;\nEND Copy_Characteristics;", "original_code_length": 2664, "summary": null}
{"id": "CommMethod_Get_Default_Distinct_Value___", "context": {"api_name": "CommMethod", "module": "enterp", "file_summary": "Customer order management and processing - CommMethod", "function_name": "Get_Default_Distinct_Value___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 110, "code_lines": 110, "cyclomatic_complexity": 33, "estimated_tokens": 553.8000000000001}, "pagerank_score": 0.0011272312774907173, "truncation_metadata": {"original_length": 4445, "truncated_length": 1232, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.27716535433070866}}, "code": "FUNCTION Get_Default_Distinct_Value___ (\n   party_type_    IN VARCHAR2,\n   identity_      IN VARCHAR2,\n   method_id_     IN VARCHAR2,\n   address_id_    IN VARCHAR2 DEFAULT NULL,\n   date_          IN DATE DEFAULT SYSDATE,\n   name_          IN VARCHAR2 DEFAULT NULL )RETURN VARCHAR2\nIS\n   first_calendar_date_    DATE := Database_SYS.Get_First_Calendar_Date;\n   last_calendar_date_     DATE := Database_SYS.Get_Last_Calendar_Date;         \n   retn_value_             comm_method_tab.value%TYPE := NULL; \n   distinct_hit_           VARCHAR2(5) := 'TRUE'; \n-- ... key business logic ...\n   CURSOR get_value_no_addr is\n      SELECT t.value\n   -- Checking permission for person.\n   IF (party_type_ = 'PERSON') THEN\n      IF ((NOT Person_Info_API.Check_Access(identity_) = 'TRUE') AND (NOT Person_Info_Address_Type_API.Is_Work_Default(identity_, address_id_) = 'TRUE') ) THEN         \n      END IF;\n   END IF;\n   IF (address_id_ IS NOT NULL) THEN\n      IF (get_address_def%NOTFOUND) THEN\n         -- IF only one row exists it is returned. Otherwise check for a row with method_default TRUE.\n         FOR row_ IN get_value_with_addr LOOP\n            IF (count_ = 2) THEN\n            END IF;\n         END LOOP;\n         IF (count_ != 1) THEN", "original_code_length": 4445, "summary": null}
{"id": "Account_Change_Account_Code_Parts", "context": {"api_name": "Account", "module": "accrul", "file_summary": "Financial operations and accounting - Account", "function_name": "Change_Account_Code_Parts", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 88, "code_lines": 88, "cyclomatic_complexity": 33, "estimated_tokens": 382.2}, "pagerank_score": 0.0009246413570091835, "truncation_metadata": {"original_length": 3845, "truncated_length": 1056, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2746423927178153}}, "code": "PROCEDURE Change_Account_Code_Parts (\n   count_ OUT NUMBER,\n   attr_  IN  VARCHAR2 )\nIS\n   company_       VARCHAR2(20);\n   accnt_type_    VARCHAR2(20);\n   ptr_           NUMBER;\n   name_          VARCHAR2(30);\n   value_         VARCHAR2(2000);\n   objid_         VARCHAR2(2000);\n   objversion_    VARCHAR2(2000);\n   dummy_         VARCHAR2(200);\n-- ... key business logic ...\n      ELSIF (name_ = 'REQ_CODE_C_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_CODE_D_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_CODE_E_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_CODE_F_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_CODE_G_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_CODE_H_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_CODE_I_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_CODE_J_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_QUANTITY_DEFAULT') THEN\n      ELSIF (name_ = 'PROCESS_CODE_DEFAULT') THEN\n      ELSIF (name_ = 'TEXT_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_BUD_CODE_B_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_BUD_CODE_C_DEFAULT') THEN\n      ELSIF (name_ = 'REQ_BUD_CODE_D_DEFAULT') THEN", "original_code_length": 3845, "summary": null}
{"id": "BasicDataTranslation_Insert_Basic_Data_Translation", "context": {"api_name": "BasicDataTranslation", "module": "fndbas", "file_summary": "Business logic and data operations - BasicDataTranslation", "function_name": "Insert_Basic_Data_Translation", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 82, "code_lines": 77, "cyclomatic_complexity": 32, "estimated_tokens": 380.90000000000003}, "pagerank_score": 0.006925054554558099, "truncation_metadata": {"original_length": 2803, "truncated_length": 845, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.30146271851587586}}, "code": "PROCEDURE Insert_Basic_Data_Translation (\n   module_        IN VARCHAR2,\n   lu_            IN VARCHAR2,\n   attribute_key_ IN VARCHAR2,\n   language_code_ IN VARCHAR2,\n   text_          IN VARCHAR2,\n   old_text_      IN VARCHAR2 DEFAULT NULL )\nIS\n   path_                VARCHAR2(900);\n   lang_code_           VARCHAR2(5);\n   existing_text_       VARCHAR2(4000);\n\n-- ... key business logic ...\n   IF lang_code_ != 'PROG' THEN\n   ELSE\n   END IF;   \n   IF lang_code_ = 'en' OR text_ != old_text_ THEN\n      IF text_ IS NULL THEN\n         IF existing_text_ IS NOT NULL THEN\n            difference_ := TRUE;\n         END IF;\n      ELSIF existing_text_ IS NULL THEN\n         difference_ := TRUE;\n      ELSIF existing_text_ != text_ THEN\n         difference_ := TRUE;\n      END IF;\n   END IF;\n   -- Update if a difference is found\n   IF difference_ THEN", "original_code_length": 2803, "summary": null}
{"id": "PersonInfo_Check_Update___", "context": {"api_name": "PersonInfo", "module": "enterp", "file_summary": "Customer order management and processing - PersonInfo", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 39, "code_lines": 39, "cyclomatic_complexity": 32, "estimated_tokens": 249.60000000000002}, "pagerank_score": 0.002128759154655315, "truncation_metadata": {"original_length": 2402, "truncated_length": 1112, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.462947543713572}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     person_info_tab%ROWTYPE,\n   newrec_ IN OUT person_info_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   update_con_block_for_crm_objs_ BOOLEAN := FALSE;\nBEGIN   \n   super(oldrec_, newrec_, indrec_, attr_);\n   Error_SYS.Check_Not_Null(lu_name_, 'PARTY', newrec_.party);\n   IF ((oldrec_.customer_contact = Fnd_Boolean_API.DB_TRUE) AND (newrec_.customer_contact = Fnd_Boolean_API.DB_FALSE)) THEN\n      IF (Exist_Customer_Contacts___(newrec_.person_id)) THEN\n-- ... key business logic ...\n      END IF;   \n   END IF;   \n   IF (Client_SYS.Get_Item_Value('UPDATE_CON_BLOCK_FOR_CRM_OBJS', attr_) = 'TRUE') THEN\n      update_con_block_for_crm_objs_ := TRUE;\n   END IF;\n   IF ((oldrec_.blocked_for_use = Fnd_Boolean_API.DB_FALSE) AND (newrec_.blocked_for_use = Fnd_Boolean_API.DB_TRUE) AND (update_con_block_for_crm_objs_)) THEN\n      $IF Component_Crm_SYS.INSTALLED $THEN\n         IF (Business_Object_Contact_API.Exist_Contact(newrec_.person_id) OR Business_Lead_Contact_API.Exist_Contact(newrec_.person_id)) THEN\n         END IF;\n      $ELSE", "original_code_length": 2402, "summary": null}
{"id": "Account_Is_Codepart_Blocked", "context": {"api_name": "Account", "module": "accrul", "file_summary": "Financial operations and accounting - Account", "function_name": "Is_Codepart_Blocked", "previous_function": "Is_Codepart_Blocked", "next_function": null, "complexity_metrics": {"total_lines": 54, "code_lines": 53, "cyclomatic_complexity": 32, "estimated_tokens": 239.20000000000002}, "pagerank_score": 0.0009246413570091835, "truncation_metadata": {"original_length": 1570, "truncated_length": 1570, "truncation_method": "no_truncation"}}, "code": "FUNCTION Is_Codepart_Blocked (\n   company_            IN VARCHAR2,\n   account_            IN VARCHAR2,\n   code_part_          IN VARCHAR2 ) RETURN VARCHAR2\nIS\n   rec_           accounting_code_part_value_tab%ROWTYPE;\n   found_         VARCHAR2(5);\nBEGIN\n   rec_ := Get_Object_By_Keys___(company_, account_);   \n   \n   found_ := 'FALSE';\n   IF (code_part_ = 'B') THEN\n      IF (rec_.req_code_b = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'C') THEN\n      IF (rec_.req_code_c = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'D') THEN\n      IF (rec_.req_code_d = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'E') THEN\n      IF (rec_.req_code_e = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'F') THEN\n      IF (rec_.req_code_f = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'G') THEN\n      IF (rec_.req_code_g = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'H') THEN\n      IF (rec_.req_code_h = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'I') THEN\n      IF (rec_.req_code_i = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'J') THEN\n      IF (rec_.req_code_j = 'S') THEN\n         found_ := 'TRUE';\n      END IF;      \n   ELSIF (code_part_ = 'QUANTITY') THEN\n      IF (rec_.req_quantity = 'S') THEN\n         found_ := 'TRUE';\n      END IF;\n   END IF;\n   RETURN found_;\nEND Is_Codepart_Blocked;", "original_code_length": 1570, "summary": null}
{"id": "CommMethod_Validate_Default___", "context": {"api_name": "CommMethod", "module": "enterp", "file_summary": "Customer order management and processing - CommMethod", "function_name": "Validate_Default___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 114, "code_lines": 114, "cyclomatic_complexity": 31, "estimated_tokens": 560.3000000000001}, "pagerank_score": 0.0011272312774907173, "truncation_metadata": {"original_length": 4929, "truncated_length": 1087, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.22053154798133495}}, "code": "PROCEDURE Validate_Default___ (\n   def_method_exist_       OUT VARCHAR2,\n   def_method_addr_exist_  OUT VARCHAR2,\n   identity_               IN  VARCHAR2,\n   party_type_db_          IN  VARCHAR2,\n   row_id_                 IN  VARCHAR2,\n   method_id_              IN  VARCHAR2,\n   address_id_             IN  VARCHAR2,\n   method_default_         IN  VARCHAR2, \n   address_default_        IN  VARCHAR2, \n   valid_from_             IN  DATE, \n   valid_to_               IN  DATE,\n-- ... key business logic ...\n   CURSOR get_address_default_value IS\n      SELECT 1\n   CURSOR get_address_count IS\n      SELECT COUNT(*)\n   IF (action_ = 'MODIFY') THEN\n      IF (address_default_ = 'TRUE' AND address_id_ IS NULL) THEN\n         Error_SYS.Record_General(lu_name_, 'ADDDEFIDNULL: Default per Method and Address can only be selected if the row is connected to an Address ID.');\n      END IF;\n      IF (get_method_default_value%FOUND) THEN\n         IF (method_default_ = 'TRUE') THEN\n         END IF;\n      ELSE\n         IF (method_count_ >= 1 AND method_default_ = 'FALSE') THEN\n         END IF; ", "original_code_length": 4929, "summary": null}
{"id": "CommMethod_Check_Default", "context": {"api_name": "CommMethod", "module": "enterp", "file_summary": "Customer order management and processing - CommMethod", "function_name": "Check_Default", "previous_function": "Check_Default", "next_function": "Get_Default_Value", "complexity_metrics": {"total_lines": 72, "code_lines": 72, "cyclomatic_complexity": 31, "estimated_tokens": 365.3}, "pagerank_score": 0.0011272312774907173, "truncation_metadata": {"original_length": 3614, "truncated_length": 1194, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.3303818483674599}}, "code": "PROCEDURE Check_Default (\n   methods_              OUT VARCHAR2,\n   methods_and_addrs_    OUT VARCHAR2,\n   attr_                 IN  VARCHAR2,\n   party_type_db_        IN  VARCHAR2,\n   identity_             IN  VARCHAR2 )\nIS\n   value_                  VARCHAR2(2000);\n   row_id_                 VARCHAR2(200);\n   addr_id_                VARCHAR2(200);\n   prev_addr_id_           VARCHAR2(200);\n   address_id_             VARCHAR2(200);\n-- ... key business logic ...\n      ELSIF (name_ = 'ADDRESS_ID') THEN\n      ELSIF (name_ = 'PREV_ADDRESS_ID') THEN\n      ELSIF (name_ = 'METHOD_DEFAULT') THEN\n      ELSIF (name_ = 'ADDRESS_DEFAULT') THEN\n      ELSIF (name_ = 'VALID_FROM') THEN\n      ELSIF (name_ = 'VALID_TO') THEN\n      ELSIF (name_ = 'END_MODIFY') THEN\n         IF (rec_.address_id IS NULL AND prev_addr_id_ IS NOT NULL) THEN\n         ELSE\n         END IF;\n         Validate_Default___(def_method_exist_, def_method_addr_exist_, identity_, party_type_db_, row_id_, method_id_, rec_.address_id, rec_.method_default, rec_.address_default, rec_.valid_from, rec_.valid_to, 'MODIFY');\n         IF (def_method_exist_ = 'FALSE' AND (methods_ IS NULL OR INSTR(methods_, rec_.method_id) <= 0)) THEN", "original_code_length": 3614, "summary": null}
{"id": "CommMethod_Get_Default_Value", "context": {"api_name": "CommMethod", "module": "enterp", "file_summary": "Customer order management and processing - CommMethod", "function_name": "Get_Default_Value", "previous_function": "Check_Default", "next_function": null, "complexity_metrics": {"total_lines": 106, "code_lines": 106, "cyclomatic_complexity": 31, "estimated_tokens": 522.6}, "pagerank_score": 0.0011272312774907173, "truncation_metadata": {"original_length": 4151, "truncated_length": 941, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.22669236328595518}}, "code": "FUNCTION Get_Default_Value (\n   party_type_ IN VARCHAR2,\n   identity_   IN VARCHAR2,\n   method_id_  IN VARCHAR2,\n   address_id_ IN VARCHAR2 DEFAULT NULL,\n   date_       IN DATE DEFAULT SYSDATE,\n   name_       IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2\nIS\n   effective_date_      DATE := TRUNC(NVL(date_,SYSDATE));\n   first_calendar_date_ DATE := Database_SYS.Get_First_Calendar_Date();\n   last_calendar_date_  DATE := Database_SYS.Get_Last_Calendar_Date();\n   retn_value_          comm_method_tab.value%TYPE := NULL;\n-- ... key business logic ...\n   CURSOR get_value_no_addr is\n      SELECT t.value, t.address_id\n   IF (address_id_ IS NOT NULL) THEN\n      IF (get_address_def%NOTFOUND) THEN\n         -- IF only one row exists it is returned. Otherwise check for a row with method_default TRUE.\n         FOR row_ IN get_value_with_addr LOOP\n            IF (count_ = 2) THEN\n            END IF;\n         END LOOP;\n         IF (count_ != 1) THEN", "original_code_length": 4151, "summary": null}
{"id": "CommMethod_Get_Default_Comm_Id", "context": {"api_name": "CommMethod", "module": "enterp", "file_summary": "Customer order management and processing - CommMethod", "function_name": "Get_Default_Comm_Id", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 100, "code_lines": 100, "cyclomatic_complexity": 31, "estimated_tokens": 475.8}, "pagerank_score": 0.0011272312774907173, "truncation_metadata": {"original_length": 3804, "truncated_length": 1002, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2634069400630915}}, "code": "FUNCTION Get_Default_Comm_Id (\n   party_type_db_ IN VARCHAR2,\n   identity_      IN VARCHAR2,\n   method_id_     IN VARCHAR2,\n   address_id_    IN VARCHAR2 DEFAULT NULL,\n   date_          IN DATE     DEFAULT SYSDATE ) RETURN NUMBER\nIS\n   first_calendar_date_    DATE := Database_SYS.Get_First_Calendar_Date;\n   last_calendar_date_     DATE := Database_SYS.Get_Last_Calendar_Date;         \n   comm_id_                comm_method_tab.comm_id%TYPE := NULL;\n   add_id_                 comm_method_tab.address_id%TYPE;\n   count_                  NUMBER;\n-- ... key business logic ...\n   CURSOR get_comm_id_no_addr is\n      SELECT comm_id, address_id\n   IF (address_id_ IS NOT NULL) THEN\n      IF (get_address_def%NOTFOUND) THEN\n         -- IF only one row exists it is returned. Otherwise check for a row with method_default TRUE.\n         FOR row_ IN get_comm_id_with_addr LOOP\n            IF (count_ = 2) THEN\n            END IF;\n         END LOOP;\n         IF (count_ != 1) THEN\n         END IF;\n      ELSE", "original_code_length": 3804, "summary": null}
{"id": "CustomerInfo_Validate_One_Time_Customer__", "context": {"api_name": "CustomerInfo", "module": "enterp", "file_summary": "Customer order management and processing - CustomerInfo", "function_name": "Validate_One_Time_Customer__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 124, "code_lines": 124, "cyclomatic_complexity": 31, "estimated_tokens": 448.5}, "pagerank_score": 0.0009351525419111985, "truncation_metadata": {"original_length": 4134, "truncated_length": 1209, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.29245283018867924}}, "code": "PROCEDURE Validate_One_Time_Customer__ (\n   customer_id_ IN VARCHAR2 )\nIS\n   one_time_not_allowed EXCEPTION;\n   temp_                VARCHAR2(1000);\n   error_info_          VARCHAR2(100);\n   $IF Component_Invoic_SYS.INSTALLED $THEN\n      CURSOR is_exist_inv IS\n         SELECT 1\n         FROM   invoice \n         WHERE  identity = customer_id_\n         AND    party_type_db = 'CUSTOMER';\n-- ... key business logic ...\n   $IF Component_Proj_SYS.INSTALLED $THEN\n      CURSOR is_exist_proj IS\n         SELECT 1\n   $IF Component_Invoic_SYS.INSTALLED $THEN\n      IF (is_exist_inv%FOUND) THEN\n         RAISE one_time_not_allowed;\n      END IF;\n   $ELSE\n   $IF Component_Payled_SYS.INSTALLED $THEN\n      IF (is_exist_ledg%FOUND) THEN\n         RAISE one_time_not_allowed;\n      END IF;\n      IF (temp_ IS NOT NULL) THEN\n         RAISE one_time_not_allowed;\n      END IF;\n   $ELSE\n   $IF Component_Order_SYS.INSTALLED $THEN\n-- ... exception handling ...\nEXCEPTION\n   WHEN one_time_not_allowed THEN\n      Error_SYS.Record_General(lu_name_, 'ONETIMENTALLWD: The One-Time check box for customer :P1 cannot be modified due to the existing information in :P2.', customer_id_, error_info_);\nEND Validate_One_Time_Customer__;", "original_code_length": 4134, "summary": null}
{"id": "CommMethod_Check_Default", "context": {"api_name": "CommMethod", "module": "enterp", "file_summary": "Customer order management and processing - CommMethod", "function_name": "Check_Default", "previous_function": null, "next_function": "Check_Default", "complexity_metrics": {"total_lines": 82, "code_lines": 82, "cyclomatic_complexity": 30, "estimated_tokens": 470.6}, "pagerank_score": 0.0011272312774907173, "truncation_metadata": {"original_length": 4029, "truncated_length": 973, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.24149913129808886}}, "code": "PROCEDURE Check_Default (\n   no_method_def_set_    OUT VARCHAR2,\n   no_addrss_def_set_    OUT VARCHAR2,\n   party_type_           IN  VARCHAR2,\n   identity_             IN  VARCHAR2 )\nIS\n   CURSOR check_default_set IS\n      SELECT t.method_id , t.address_id, t.valid_from, t.valid_to, t.method_default, t.address_default, t.ROWID\n      FROM   comm_method_tab t\n      WHERE  t.party_type = party_type_\n      AND    t.identity = identity_ ;\n   -- Curosrs for Checking for more than one rows with no Method Default checked\n-- ... key business logic ...\n   -- Curosrs for Checking for more than one rows with no Address Default checked\n   CURSOR all_add_list IS\n      SELECT DISTINCT t.method_id \n   CURSOR dist_address_with_no_def (method_id_ VARCHAR2) IS\n      SELECT DISTINCT t.address_id \n      AND    t.address_id NOT IN (SELECT DISTINCT w.address_id \n   CURSOR address_with_no_def (method_id_ VARCHAR2, add_id_ VARCHAR2) IS\n      SELECT t.ROWID, t.valid_from, t.valid_to  ", "original_code_length": 4029, "summary": null}
{"id": "CustomerInfo_Change_Customer_Category", "context": {"api_name": "CustomerInfo", "module": "enterp", "file_summary": "Customer order management and processing - CustomerInfo", "function_name": "Change_Customer_Category", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 90, "code_lines": 90, "cyclomatic_complexity": 29, "estimated_tokens": 357.5}, "pagerank_score": 0.0009351525419111985, "truncation_metadata": {"original_length": 4593, "truncated_length": 784, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.17069453516220334}}, "code": "PROCEDURE Change_Customer_Category (\n   customer_id_          IN VARCHAR2,\n   customer_name_        IN VARCHAR2,\n   association_no_       IN VARCHAR2,\n   customer_category_    IN VARCHAR2,\n   template_cust_id_     IN VARCHAR2,\n   template_company_     IN VARCHAR2,\n   overwrite_order_data_ IN VARCHAR2,\n   transfer_addr_data_   IN VARCHAR2 )\nIS     \n   oldrec_                  customer_info_tab%ROWTYPE;\n   newrec_                  customer_info_tab%ROWTYPE;\n-- ... key business logic ...\n      IF (get_attr%FOUND) THEN    \n         IF (customer_category_db_ = Customer_Category_API.DB_CUSTOMER) THEN \n         END IF;     \n         WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP\n            IF (value_ IS NOT NULL) THEN\n            END IF;\n         END LOOP;", "original_code_length": 4593, "summary": null}
{"id": "Account_Update_Code_Part_Demands_", "context": {"api_name": "Account", "module": "accrul", "file_summary": "Financial operations and accounting - Account", "function_name": "Update_Code_Part_Demands_", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 64, "code_lines": 64, "cyclomatic_complexity": 29, "estimated_tokens": 295.1}, "pagerank_score": 0.0009246413570091835, "truncation_metadata": {"original_length": 2420, "truncated_length": 796, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.32892561983471075}}, "code": "PROCEDURE Update_Code_Part_Demands_ (\n   attr_ IN VARCHAR2 )\nIS\n   ptr_      NUMBER;\n   name_     VARCHAR2(30);\n   newrec_   accounting_code_part_value_tab%ROWTYPE;\n   value_    VARCHAR2(2000);\nBEGIN\n   ptr_ := NULL;\n   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP\n      IF (name_ = 'COMPANY') THEN\n         newrec_.company := value_;\n-- ... key business logic ...\n      ELSIF (name_ = 'REQ_CODE_F') THEN\n      ELSIF (name_ = 'REQ_CODE_G') THEN\n      ELSIF (name_ = 'REQ_CODE_H') THEN\n      ELSIF (name_ = 'REQ_CODE_I') THEN\n      ELSIF (name_ = 'REQ_CODE_J') THEN\n      ELSIF (name_ = 'REQ_QUANTITY') THEN\n      ELSIF (name_ = 'PROCESS_CODE') THEN\n      ELSIF (name_ = 'TEXT') THEN\n      ELSIF (name_ = 'REQ_BUD_CODE_B') THEN\n      ELSIF (name_ = 'REQ_BUD_CODE_C') THEN", "original_code_length": 2420, "summary": null}
{"id": "Account_Is_Codepart_Blocked", "context": {"api_name": "Account", "module": "accrul", "file_summary": "Financial operations and accounting - Account", "function_name": "Is_Codepart_Blocked", "previous_function": null, "next_function": "Is_Codepart_Blocked", "complexity_metrics": {"total_lines": 109, "code_lines": 109, "cyclomatic_complexity": 29, "estimated_tokens": 546.0}, "pagerank_score": 0.0009246413570091835, "truncation_metadata": {"original_length": 3756, "truncated_length": 1040, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.27689030883919064}}, "code": "FUNCTION Is_Codepart_Blocked (\n   company_            IN VARCHAR2,\n   code_part_          IN VARCHAR2 ) RETURN VARCHAR2\nIS\n   cnt_                NUMBER;\n   found_              VARCHAR2(5);\n   CURSOR code_b_blocked is\n      SELECT 1 FROM accounting_code_part_value_tab WHERE company = company_ AND code_part = 'B' AND req_code_b != 'S';\n   CURSOR code_c_blocked is\n      SELECT 1 FROM accounting_code_part_value_tab WHERE company = company_ AND code_part = 'C' AND req_code_c != 'S';\n   CURSOR code_d_blocked is\n      SELECT 1 FROM accounting_code_part_value_tab WHERE company = company_ AND code_part = 'D' AND req_code_d != 'S';\n-- ... key business logic ...\n      IF (code_c_blocked%FOUND) THEN\n      ELSE\n      END IF;\n   ELSIF (code_part_ = 'D') THEN\n      IF (code_d_blocked%FOUND) THEN\n      ELSE\n      END IF;\n   ELSIF (code_part_ = 'E') THEN\n      IF (code_e_blocked%FOUND) THEN\n      ELSE\n      END IF;\n   ELSIF (code_part_ = 'F') THEN\n      IF (code_f_blocked%FOUND) THEN\n      ELSE\n      END IF;\n   ELSIF (code_part_ = 'G') THEN", "original_code_length": 3756, "summary": null}
{"id": "DataCaptureSession_Get_Next_Data_Item_Id", "context": {"api_name": "DataCaptureSession", "module": "wadaco", "file_summary": "Business logic and data operations - DataCaptureSession", "function_name": "Get_Next_Data_Item_Id", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 63, "code_lines": 56, "cyclomatic_complexity": 28, "estimated_tokens": 352.3}, "pagerank_score": 0.001353095076110586, "truncation_metadata": {"original_length": 3868, "truncated_length": 1657, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.4283867631851086}}, "code": "FUNCTION Get_Next_Data_Item_Id (\n   capture_session_id_            IN NUMBER,\n   latest_data_item_id_           IN VARCHAR2 DEFAULT NULL,\n   user_requested_item_loop_exit_ IN BOOLEAN  DEFAULT FALSE ) RETURN Data_Capture_Common_Util_API.Session_Line_Rec\nIS\n   session_rec_          Data_Capture_Session_API.Public_Rec;\n   current_data_item_id_ DATA_CAPTURE_SESSION_LINE_TAB.data_item_id%TYPE;\n   next_rec_             Data_Capture_Common_Util_API.Session_Line_Rec;\n   config_rec_           Data_Capt_Conf_Data_Item_API.Public_Rec;\n   get_next_data_item_   BOOLEAN := FALSE;\n   process_package_      VARCHAR2(30);\n   data_set_is_complete_ BOOLEAN;\n-- ... key business logic ...\n   LOOP\n      -- Get next data item from configuration using current data item, if no current data item we get the first data item in the configuration\n                                                                     exit_loop_            => exit_loop_,\n      IF ((data_set_is_complete_) AND (config_rec_.data_item_id IS NOT NULL)) THEN\n         -- If the data set is now complete but the capture starts over again in a loop\n         -- then first validate the latest data set for uniqueness. To stop the user from entering duplicate data sets.\n         Data_Capture_Session_Line_API.Check_Latest_Data_Set_Unique(capture_session_id_);\n      END IF;\n      IF (exit_loop_) THEN\n         -- This functionality needs to be here instead of in the other obvious place (Exit_Data_Item_Loop) so it will not create problems like exit 2 loops instead of 1 \n         -- since Data_Capt_Conf_Data_Item_API.Get_Next_Data_Item needs to know the current data item and exit loop flag correctly", "original_code_length": 3868, "summary": null}
{"id": "CustomerOrder_Check_Update___", "context": {"api_name": "CustomerOrder", "module": "order", "file_summary": "Customer order management and processing - CustomerOrder", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 554, "code_lines": 487, "cyclomatic_complexity": 269, "estimated_tokens": 3140.8}, "pagerank_score": 0.00040705859298745993, "truncation_metadata": {"original_length": 33860, "truncated_length": 1652, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.04878913171884229}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     customer_order_tab%ROWTYPE,\n   newrec_ IN OUT customer_order_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                       VARCHAR2(30);\n   value_                      VARCHAR2(4000);   \n   work_day_                   DATE := NULL;\n   company_                    VARCHAR2(20);\n   change_line_date_           VARCHAR2(20);\n   new_wanted_delivery_date_   DATE;\n-- ... key business logic ...\n            Error_SYS.Record_General(lu_name_, 'CONFDELCANNOTMODIFY: Confirm Deliveries cannot be updated when External Customer''s Confirm Direct Deliveries is ON.');\n         END IF;\n      END LOOP;\n   END IF;\n   IF indrec_.customer_no_pay THEN\n      IF (trunc(customer_no_pay_rec_.date_del) < site_date_) THEN\n         Error_SYS.Record_General(lu_name_, 'DATE_EXP_ERROR_PAY: Payer has expired. Check expire date.');\n      END IF;\n   END IF;\n   IF ((NVL(oldrec_.vendor_no, ' ') != NVL(newrec_.vendor_no, ' ')) AND (newrec_.rowstate IN ('Delivered', 'Invoiced', 'Cancelled'))) THEN\n      Error_SYS.Record_General(lu_name_, 'CANNOTMODIFYSUPP1: The deliver-from supplier cannot be changed for a Delivered, Invoiced/Closed or Cancelled order.');\n   END IF;\n   IF (newrec_.picking_leadtime != trunc(newrec_.picking_leadtime)) OR (newrec_.picking_leadtime < 0) THEN\n   END IF;\n   IF (newrec_.customer_no_pay IS NULL) THEN\n      IF (newrec_.customer_no_pay_addr_no IS NOT NULL) THEN\n         Error_SYS.Item_Update(lu_name_, 'CUSTOMER_NO_PAY_ADDR_NO');\n      END IF;\n   ELSE\n      Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_NO_PAY_ADDR_NO', newrec_.customer_no_pay_addr_no);", "original_code_length": 33860, "summary": null}
{"id": "ShopOrd_Check_Update___", "context": {"api_name": "ShopOrd", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrd", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 559, "code_lines": 498, "cyclomatic_complexity": 267, "estimated_tokens": 3282.5}, "pagerank_score": 0.0004448930294890243, "truncation_metadata": {"original_length": 32418, "truncated_length": 1636, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.050465790610154854}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     shop_ord_tab%ROWTYPE,\n   newrec_ IN OUT shop_ord_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   action_                   VARCHAR2(5);\n   old_revised_qty_due_      SHOP_ORD_TAB.revised_qty_due%TYPE;\n   old_routing_revision_     SHOP_ORD_TAB.routing_revision%TYPE;\n   old_routing_alternative_  SHOP_ORD_TAB.routing_alternative%TYPE;\n   old_earliest_start_date_  SHOP_ORD_TAB.earliest_start_date%TYPE;\n   old_need_date_            SHOP_ORD_TAB.need_date%TYPE;\n-- ... key business logic ...\n         Shop_Ord_Util_API.Insert_Once_To_Temp_Table(newrec_.order_no, newrec_.release_no, newrec_.sequence_no, newrec_.part_no, lu_name_, 'INFO', NULL, NULL, message_);\n      END IF;\n   END IF;\n   IF (old_revised_qty_due_ != newrec_.revised_qty_due) THEN\n      -- Supply Pegging --- Validates if Lot Size is not less than the Pegged Qty.\n      IF (newrec_.demand_code = 'IO') AND (newrec_.qty_on_order > 0) AND (newrec_.revised_qty_due < newrec_.qty_on_order ) THEN\n         Error_SYS.Record_General(lu_name_, 'PEGLOTCHNGD: There are pegged demands connected to this shop order. SO Lot size may not be less than pegged quantity. Modify the pegging first, then modify the shop order Lot size.');\n      END IF;\n      IF (newrec_.demand_code = 'PLD') THEN\n         Error_SYS.Record_General(lu_name_, 'PLDLOTCHANGED: This shop order originates from Asset Design. Lot size cannot be modified.');\n      END IF;\n      IF (newrec_.demand_code = Order_Supply_Type_API.DB_PROJECT_DELIVERABLES) THEN\n         IF (action_ = 'CHECK') THEN\n         END IF;\n      END IF;\n   END IF;", "original_code_length": 32418, "summary": null}
{"id": "PurchasePartSupplier_Check_Insert___", "context": {"api_name": "PurchasePartSupplier", "module": "purch", "file_summary": "Customer order management and processing - PurchasePartSupplier", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 479, "code_lines": 405, "cyclomatic_complexity": 263, "estimated_tokens": 2527.2000000000003}, "pagerank_score": 0.00048141168868321874, "truncation_metadata": {"original_length": 24638, "truncated_length": 1684, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.0683497037097167}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT purchase_part_supplier_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   vendor_no_                 PURCHASE_PART_SUPPLIER_TAB.vendor_no%TYPE;\n   rental_vendor_no_          PURCHASE_PART_SUPPLIER_TAB.vendor_no%TYPE;\n   inspection_type_           VARCHAR2(100);\n   blanket_order_             VARCHAR2(12);\n   is_inventory_part_         NUMBER;\n   inv_part_rec_              Inventory_Part_API.Public_Rec;\n   supplier_acquisition_site_ VARCHAR2(5);\n-- ... key business logic ...\n   END IF;\n   IF (Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(newrec_.part_no) = Fnd_Boolean_API.db_true AND\n       (ROUND(newrec_.conv_factor) != newrec_.conv_factor)) THEN\n   END IF;\n   IF ((newrec_.discount <0 ) OR (newrec_.discount >100 )) THEN\n   END IF;\n   IF (newrec_.list_price < 0 ) THEN\n   END IF;\n   IF (newrec_.rental_list_price < 0 ) THEN\n   END IF;\n   IF (newrec_.list_price_incl_tax < 0 ) THEN\n   END IF;   \n   IF (newrec_.rental_list_price_incl_tax < 0 ) THEN\n   END IF;\n   IF (newrec_.price_conv_factor IS NULL) THEN\n      IF (newrec_.price_unit_meas IS NOT NULL ) THEN\n      END IF;\n   END IF;\n   IF NOT (newrec_.price_conv_factor > 0) THEN\n   END IF;\n   IF NOT (newrec_.additional_cost_amount >= 0) THEN\n   END IF;\n   IF NOT (newrec_.additional_cost_incl_tax >= 0) THEN\n   END IF;\n   IF NOT (newrec_.minimum_qty >= 0) THEN\n   END IF;\n   IF (newrec_.internal_control_time <0) THEN\n   END IF;\n   IF (newrec_.internal_control_time !=ROUND(newrec_.internal_control_time)) THEN\n   END IF;\n   IF (newrec_.inspection_code IS NOT NULL) THEN\n      IF (inspection_type_ = Inspection_Type_API.Get_Client_Value(0)) THEN", "original_code_length": 24638, "summary": null}
{"id": "PurchaseOrderLinePart_Validate___", "context": {"api_name": "PurchaseOrderLinePart", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrderLinePart", "function_name": "Validate___", "previous_function": "Build_Attr_For_New_Line___", "next_function": null, "complexity_metrics": {"total_lines": 532, "code_lines": 492, "cyclomatic_complexity": 224, "estimated_tokens": 2808.0}, "pagerank_score": 0.0004538509940328695, "truncation_metadata": {"original_length": 31577, "truncated_length": 1648, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.05218988504291098}}, "code": "PROCEDURE Validate___ (\n   pc_eng_chg_level_            OUT    VARCHAR2,\n   new_order_code_              OUT    VARCHAR2,\n   attr_                        IN OUT VARCHAR2,\n   blanket_order_               IN OUT VARCHAR2,\n   blanket_line_                IN OUT NUMBER,\n   buy_unit_price_              IN OUT NUMBER,\n   buy_unit_price_incl_tax_     IN OUT NUMBER,\n   fbuy_unit_price_             IN OUT NUMBER,\n   fbuy_unit_price_incl_tax_    IN OUT NUMBER,\n   planned_receipt_date_        IN OUT DATE,\n   planned_arrival_date_        IN OUT DATE,\n-- ... key business logic ...\n   IF (line_no_ = org_.line_no) AND ( blanket_order_ = org_.blanket_order) THEN\n      IF new_qty_ THEN\n      ELSE\n      END IF;\n   ELSE\n   END IF;\n   -- Note : No need to reduce when action is CHECK.\n   IF (NVL(unpack_update_action_, 'CHECK') = 'DO') THEN\n      IF (blanket_order_ IS NOT NULL AND (new_qty_ OR total_line_amt_curr_ != old_total_line_price_)) OR (org_.blanket_order IS NULL AND blanket_order_ IS NOT NULL) OR (blanket_order_ != org_.blanket_order) THEN \n         IF (org_.blanket_order IS NOT NULL) AND (blanket_order_ IS NOT NULL) AND (blanket_order_ = org_.blanket_order) THEN\n         END IF;\n         IF (Supp_Blk_Part_API.Check_Exist(blanket_order_,blanket_line_) AND (update_from_blk_part_price_ = 0)) THEN\n            -- order_difference is calculated using order currency instead of blanket currency.\n            order_difference_  := total_line_amt_curr_; \n            Supp_Blk_Part_API.Check_Max_Line_Qty_Or_Amount ( blanket_order_ => blanket_order_,\n                                                            amount_        => order_difference_);", "original_code_length": 31577, "summary": null}
{"id": "CustomerOrderLine_Check_Before_Insert___", "context": {"api_name": "CustomerOrderLine", "module": "order", "file_summary": "Customer order management and processing - CustomerOrderLine", "function_name": "Check_Before_Insert___", "previous_function": null, "next_function": "Pre_Unpack_Insert___", "complexity_metrics": {"total_lines": 379, "code_lines": 335, "cyclomatic_complexity": 221, "estimated_tokens": 2431.0}, "pagerank_score": 0.0003574882184538361, "truncation_metadata": {"original_length": 23803, "truncated_length": 1723, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07238583371843885}}, "code": "PROCEDURE Check_Before_Insert___ (\n   attr_                IN OUT VARCHAR2,\n   newrec_              IN OUT CUSTOMER_ORDER_LINE_TAB%ROWTYPE,\n   header_curr_code_    IN     VARCHAR2 )\nIS\n   sales_part_rec_            Sales_Part_API.Public_Rec;\n   header_rec_                Customer_Order_API.Public_Rec;\n   cust_ord_cust_rec_         Cust_Ord_Customer_API.Public_Rec;\n   consignment_stock_db_      VARCHAR2(20);\n   company_                   VARCHAR2(20);\n   sup_object_status_         VARCHAR2(200);\n   supplier_acquisition_site_ VARCHAR2(5);\n-- ... key business logic ...\n   IF (newrec_.equipment_object_seq IS NOT NULL) THEN\n      $IF (Component_Equip_SYS.INSTALLED)$THEN\n         IF (sup_object_status_ = 'SCRAPPED') THEN\n            Raise_Scrapped_Object_Error___(Equipment_Object_API.Get_Mch_Code(newrec_.equipment_object_seq));\n         END IF;\n      $ELSE\n   END IF;\n   -- supply site reservation is only allowed if its a IPD or IPT\n   IF (newrec_.supply_site_reserve_type != 'NOTALLOWED' AND newrec_.supply_code NOT IN ('IPD', 'IPT')) THEN\n   END IF;\n   -- Negative quantity allowed if supply_code = 'Service Order'.\n   IF ((newrec_.buy_qty_due <= 0) AND (newrec_.supply_code != 'SEO')) THEN\n   END IF;\n   IF ((newrec_.revised_qty_due < (newrec_.qty_shipped + newrec_.qty_assigned)) AND (newrec_.supply_code != 'SEO')) THEN\n   END IF;\n   IF newrec_.rental = Fnd_Boolean_API.DB_TRUE THEN\n   ELSE\n      IF (newrec_.supply_code IN ('SEO', 'CRO')) AND (newrec_.part_ownership = 'CUSTOMER OWNED') THEN\n      ELSIF (newrec_.customer_no = newrec_.deliver_to_customer_no) THEN\n      ELSE\n      END IF;\n      IF ((consignment_stock_db_ = 'NO CONSIGNMENT STOCK') AND (consignment_stock_db_ != newrec_.consignment_stock)) THEN", "original_code_length": 23803, "summary": null}
{"id": "PurchasePartSupplier_Check_Update___", "context": {"api_name": "PurchasePartSupplier", "module": "purch", "file_summary": "Customer order management and processing - PurchasePartSupplier", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 352, "code_lines": 304, "cyclomatic_complexity": 194, "estimated_tokens": 2148.9}, "pagerank_score": 0.00048141168868321874, "truncation_metadata": {"original_length": 20710, "truncated_length": 1632, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07880251086431675}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     purchase_part_supplier_tab%ROWTYPE,\n   newrec_ IN OUT purchase_part_supplier_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   inspection_type_           VARCHAR2(100);\n   old_conv_factor_           NUMBER;\n   dummy_                     NUMBER;\n   is_inventory_part_         NUMBER;\n   inv_part_rec_              Inventory_Part_API.Public_Rec;\n   supplier_acquisition_site_ VARCHAR2(5);\n-- ... key business logic ...\n   END IF;\n   IF NOT (newrec_.conv_factor > 0) THEN\n   END IF;\n   IF ((newrec_.discount <0 ) OR (newrec_.discount > 100 )) THEN\n   END IF;\n   IF (newrec_.list_price < 0 ) THEN\n   END IF;\n   IF (newrec_.list_price_incl_tax < 0 ) THEN\n   END IF;\n   IF (newrec_.rental_list_price < 0 ) THEN\n   END IF;   \n   IF (newrec_.rental_list_price_incl_tax < 0 ) THEN\n   END IF;\n   IF (newrec_.price_conv_factor IS NULL) THEN\n      IF (newrec_.price_unit_meas IS NOT NULL ) THEN\n      END IF;\n   END IF;\n   IF NOT (newrec_.price_conv_factor > 0) THEN\n   END IF;\n   IF NOT (newrec_.additional_cost_amount >= 0) THEN\n   END IF;\n   IF NOT (newrec_.additional_cost_incl_tax >= 0) THEN\n   END IF;\n   IF NOT (newrec_.minimum_qty >= 0) THEN\n   END IF;\n   IF (newrec_.internal_control_time <0) THEN\n   END IF;\n   IF (newrec_.internal_control_time !=ROUND(newrec_.internal_control_time)) THEN\n   END IF;\n   IF (newrec_.inspection_code IS NOT NULL) THEN\n      IF (inspection_type_ = Inspection_Type_API.Get_Client_Value(0)) THEN\n         IF (newrec_.sample_percent = 0) OR (newrec_.sample_percent >100) THEN\n         ELSIF NOT (newrec_.sample_percent >= 0) THEN", "original_code_length": 20710, "summary": null}
{"id": "SalesPart_Check_Insert___", "context": {"api_name": "SalesPart", "module": "order", "file_summary": "Customer order management and processing - SalesPart", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 346, "code_lines": 298, "cyclomatic_complexity": 178, "estimated_tokens": 2016.3000000000002}, "pagerank_score": 0.0005218373734792644, "truncation_metadata": {"original_length": 17275, "truncated_length": 1670, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09667149059334298}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT sales_part_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   tax_percentage_         NUMBER;\n   name_                   VARCHAR2(30);\n   value_                  VARCHAR2(2000);\n   planning_method_        VARCHAR2(1);\n   part_desc_              SALES_PART_TAB.catalog_desc%TYPE ;\n   unit_meas_              VARCHAR2(10);\n   sales_price_group_unit_ VARCHAR2(10);\n-- ... key business logic ...\n   IF (indrec_.allow_incomp_pkg_delivery = FALSE OR newrec_.allow_incomp_pkg_delivery IS NULL) THEN\n   END IF;\n   IF (indrec_.allow_inc_pkg_rsrv_picklst = FALSE OR newrec_.allow_inc_pkg_rsrv_picklst IS NULL) THEN\n   END IF;   \n   -- gelr:pt_erp_certification, begin\n   $IF (Component_Erep_SYS.INSTALLED) $THEN \n      IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'PT_ERP_CERTIFICATION') = Fnd_Boolean_API.DB_TRUE) THEN\n         Erp_Certificate_Ctrl_Util_API.Validate_Part_Description(newrec_.catalog_desc,'Sales Part');\n      END IF;\n   -- gelr:pt_erp_certification, end\n   IF ((pcrec_.receipt_issue_serial_track = db_true_) OR\n       (pcrec_.lot_tracking_code != 'NOT LOT TRACKING')) THEN\n   END IF;\n   IF (newrec_.catalog_type = 'INV') THEN\n      IF (newrec_.primary_catalog = db_true_) THEN\n         IF (catalog_no_ IS NOT NULL) THEN\n         END IF;          \n      END IF; \n   ELSIF (newrec_.catalog_type = 'NON') THEN\n      IF (newrec_.part_no IS NOT NULL) THEN\n      END IF;\n      IF(pcrec_.catch_unit_enabled = db_true_) THEN\n         Error_SYS.Record_General(lu_name_,'CANNOTINSERTNON: It is not allowed to create a non-inventory part if the part is catch unit enabled.');", "original_code_length": 17275, "summary": null}
{"id": "JtTask_Post_Check_Common___", "context": {"api_name": "JtTask", "module": "wo", "file_summary": "Customer order management and processing - JtTask", "function_name": "Post_Check_Common___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 421, "code_lines": 397, "cyclomatic_complexity": 177, "estimated_tokens": 2499.9}, "pagerank_score": 0.0003973389448066272, "truncation_metadata": {"original_length": 27352, "truncated_length": 1716, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.06273764258555133}}, "code": "PROCEDURE Post_Check_Common___ (\n   oldrec_ IN     work_task_tab%ROWTYPE,\n   newrec_ IN OUT work_task_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2)\nIS\n   warranty_msg_           NUMBER := 0;\n   invalid_supp_warr_      BOOLEAN := FALSE;\n   invalid_cust_warr_      BOOLEAN := FALSE;\n   from_state_change_      VARCHAR2(10) := 'FALSE';\n   task_company_           Jt_Task.company%TYPE;\n   organization_company_   Jt_Task.company%TYPE;\n-- ... key business logic ...\n         IF (newrec_.cust_order_no IS NOT NULL )  THEN\n            IF newrec_.srv_request_scope_id IS NOT NULL THEN\n               $IF Component_Sercat_SYS.INSTALLED $THEN\n               $ELSE \n               IF cust_order_rec_.contract != srv_org_sales_site_ THEN\n               END IF;\n            ELSE\n               IF cust_order_rec_.contract != newrec_.site THEN\n               END IF;\n            END IF;\n            IF (cust_order_rec_.rowstate IN ('Invoiced', 'Cancelled')) AND (newrec_.cust_order_no != oldrec_.cust_order_no)  THEN\n            END IF;\n            IF (newrec_.customer_no IS NOT NULL AND newrec_.customer_no != cust_order_rec_.customer_no) OR newrec_.customer_no IS NULL THEN\n            END IF;\n         END IF;\n         IF (cust_order_rec_.order_id != newrec_.cust_order_type) THEN\n         END IF;\n      END IF;\n   IF (newrec_.order_no IS NULL) THEN\n   ELSIF (newrec_.order_no < 0) THEN\n   END IF;\n   IF (newrec_.contract_id IS NULL AND newrec_.line_no IS NOT NULL) THEN\n   END IF;\n   ----------------------------------------------Object Check---------------------------------------------------------\n   --IF (newrec_.actual_obj_conn_lu_name IS NULL AND newrec_.actual_obj_conn_rowkey IS NULL) THEN", "original_code_length": 27352, "summary": null}
{"id": "Invoice_Create_Voucher_Internal___", "context": {"api_name": "Invoice", "module": "invoic", "file_summary": "Customer order management and processing - Invoice", "function_name": "Create_Voucher_Internal___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 452, "code_lines": 452, "cyclomatic_complexity": 171, "estimated_tokens": 2043.6000000000001}, "pagerank_score": 0.0005004638579440837, "truncation_metadata": {"original_length": 26190, "truncated_length": 1684, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.06429935089728904}}, "code": "FUNCTION Create_Voucher_Internal___ (\n   err_msg_ OUT    VARCHAR2,\n   attr_    IN OUT VARCHAR2,\n   creator_ IN     VARCHAR2 ) RETURN BOOLEAN\nIS\n   company_                     VARCHAR2(20);\n   identity_                    VARCHAR2(200);\n   series_id_                   VARCHAR2(20);\n   invoice_no_                  VARCHAR2(50);\n   main_voucher_type_           VARCHAR2(3) := NULL;\n   value_                       VARCHAR2(2000);\n   name_                        VARCHAR2(30);\n-- ... key business logic ...\n         Invoice_Item_API.Validate_Hsn_Sac_Mandatory(company_, head_rec_.invoice_id, series_id_, invoice_no_);\n      END IF;\n   END IF;\n   IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'OUT_INV_CURR_RATE_VOUCHER_DATE') = Fnd_Boolean_API.DB_TRUE) AND (voucher_date_ IS NULL) THEN\n      IF ((head_rec_.creator = 'INSTANT_INVOICE_API' AND Invoice_Type_API.Get_Correction_Invoice_Db(head_rec_.company, head_rec_.party_type_db, head_rec_.invoice_type) = 'FALSE' AND head_rec_.invoice_type != NVL(Company_Def_Invoice_Type_API.Get_Def_Credit_Inst_Inv_Type(company_),'DUMMY')) OR \n         (head_rec_.creator = 'PROJECT_INVOICE_API' AND head_rec_.invoice_type NOT IN (Company_Def_Invoice_Type_API.Get_Def_Proj_Cor_Inv_Type(company_), Company_Def_Invoice_Type_API.Get_Def_Proj_Cre_Inv_Type(company_)))) THEN        \n         IF (head_rec_.objstate NOT LIKE '%Post%' AND head_rec_.objstate != 'Cancelled') THEN\n            IF (head_rec_.out_inv_vou_date_base_db = Base_Date_API.DB_INVOICE_DATE) THEN\n            ELSE\n            END IF;\n         END IF;\n      END IF;\n   END IF;\n   IF (head_rec_.creator IN ('CUSTOMER_ORDER_INV_HEAD_API', 'INSTANT_INVOICE_API')) THEN", "original_code_length": 26190, "summary": null}
{"id": "CustomerOrder_Get_Order_Defaults___", "context": {"api_name": "CustomerOrder", "module": "order", "file_summary": "Customer order management and processing - CustomerOrder", "function_name": "Get_Order_Defaults___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 543, "code_lines": 491, "cyclomatic_complexity": 168, "estimated_tokens": 2359.5}, "pagerank_score": 0.00040705859298745993, "truncation_metadata": {"original_length": 32485, "truncated_length": 1660, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.051100507926735414}}, "code": "PROCEDURE Get_Order_Defaults___ (\n   attr_           IN OUT VARCHAR2,\n   all_attributes_ IN     VARCHAR2 DEFAULT 'TRUE' )\nIS\n   contract_                   customer_order_tab.contract%TYPE;\n   customer_no_                customer_order_tab.customer_no%TYPE;\n   cust_no_                    customer_order_tab.customer_no%TYPE;\n   customer_no_pay_            customer_order_tab.customer_no_pay%TYPE;\n   customer_no_pay_ref_        CUSTOMER_ORDER_TAB.customer_no_pay_ref%TYPE;\n   customer_no_pay_addr_no_    customer_order_tab.customer_no_pay_addr_no%TYPE;\n   ship_via_code_              customer_order_tab.ship_via_code%TYPE;\n   language_code_              customer_order_tab.language_code%TYPE;\n-- ... key business logic ...\n   END IF;\n   IF all_attributes_ = 'TRUE' THEN\n      check_sales_grp_deliv_conf_ := Client_SYS.Get_Item_Value('CHECK_SALES_GRP_DELIV_CONF_DB', attr_);\n      IF (priority_ IS NULL) THEN\n   END IF;\n      -- Confirm Deliveries should not be set when order is created from Distribution Order.\n      IF (NVL(Client_SYS.Get_Item_Value('SOURCE_ORDER', attr_), ' ') = 'DO') THEN\n         $IF Component_Disord_SYS.INSTALLED $THEN\n         $ELSE\n      ELSE\n      END IF;\n      IF (Site_API.Get_Company(demand_site_) = site_rec_.company) THEN\n      END IF;\n      IF (confirm_deliveries_ IS NULL) THEN\n      END IF;\n      IF (check_sales_grp_deliv_conf_ IS NULL) THEN\n         check_sales_grp_deliv_conf_ := customer_rec_.check_sales_grp_deliv_conf;\n      END IF;\n      IF(Client_SYS.Item_Exist('BILL_ADDR_NO', attr_)) THEN\n      ELSE\n      END IF;\n      IF (customer_no_pay_ IS NULL) THEN\n      END IF;\n      IF (customer_no_pay_ IS NOT NULL) THEN", "original_code_length": 32485, "summary": null}
{"id": "PurchaseOrderLine_Modify_Ord_Line", "context": {"api_name": "PurchaseOrderLine", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrderLine", "function_name": "Modify_Ord_Line", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 380, "code_lines": 358, "cyclomatic_complexity": 167, "estimated_tokens": 1656.2}, "pagerank_score": 0.0003707967412740005, "truncation_metadata": {"original_length": 21492, "truncated_length": 1701, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07914572864321608}}, "code": "PROCEDURE Modify_Ord_Line (\n   order_no_        IN VARCHAR2,\n   line_no_         IN VARCHAR2,\n   release_no_      IN VARCHAR2,\n   purchase_type_   IN VARCHAR2,\n   change_req_flag_ IN VARCHAR2,\n   attr_            IN VARCHAR2,\n   rental_attr_     IN VARCHAR2 DEFAULT NULL )\nIS\n   media_code_                VARCHAR2(30);\n   message_type_              VARCHAR2(20);\n   new_status_                VARCHAR2(20);\n-- ... key business logic ...\n   END IF;\n   IF Client_SYS.Item_Exist('EXT_TRANSPORT_CALENDAR_ID', attr_) THEN\n   ELSE\n   END IF;\n   IF Client_SYS.Item_Exist('PACKING_INSTRUCTION_ID', attr_) THEN\n   ELSE\n   END IF;      \n   IF (Client_SYS.Item_Exist('WANTED_DELIVERY_DATE', attr_)) THEN\n   END IF;\n   IF Client_SYS.Item_Exist('EAN_LOCATION_DEL_ADDR', attr_) THEN\n   END IF;\n   IF Client_SYS.Item_Exist('DELIVER_TO_CUSTOMER_NO', attr_) THEN\n   END IF;\n   IF (purchase_type_ IS NOT NULL) THEN\n   END IF;\n   IF (purchase_type_db_ != 'R') THEN\n      IF (purchase_type_db_ = 'O') THEN\n         IF inv_quantity_ IS NOT NULL THEN\n         ELSE\n         END IF;\n      END IF;\n      IF (lines_approved_ = 'TRUE') THEN\n         IF (app_rule_ IS NOT NULL) THEN\n         END IF;\n      END IF;  \n      IF (((Purch_Chg_Ord_API.Check_Chg_Order_Exist_For_Po(order_no_) = 'TRUE') OR ((lines_approved_='TRUE') AND (allow_changes_to_po_db_ ='NO_CHANGES_ALLOWED')) OR (po_change_management_ = 'ENFORCE_USE_POCO') OR\n          (Purchase_Order_API.get_objstate(order_no_)!='Planned') THEN\n      END IF;\n      IF ((purch_ord_line_rec_.demand_code IN ('CT', 'CD'))\n          AND (NVL(Purchase_Req_Line_Part_API.Get_Configuration_Id(order_no_, line_no_, release_no_), '*') != NVL(configuration_id_, '*'))) THEN         ", "original_code_length": 21492, "summary": null}
{"id": "PurchaseOrder_Check_Update___", "context": {"api_name": "PurchaseOrder", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrder", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 409, "code_lines": 369, "cyclomatic_complexity": 164, "estimated_tokens": 2148.9}, "pagerank_score": 0.00039647019091784463, "truncation_metadata": {"original_length": 20549, "truncated_length": 1727, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08404301912501824}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     purchase_order_tab%ROWTYPE,\n   newrec_ IN OUT purchase_order_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS   \n   v_curr_code_              VARCHAR2(5);\n   v_language_code_          VARCHAR2(5);\n   v_buyer_code_             VARCHAR2(20);\n   --\n   confirm_with_differences_ VARCHAR2(30);\n   newrevision_              NUMBER;\n-- ... key business logic ...\n      IF (oldrec_.rowstate IN('Cancelled', 'Stopped', 'Closed' )) THEN\n         Error_SYS.Record_General(lu_name_, 'UPDATENOTALLOWED: Central Order may not be selected when the order is :P1', oldrec_.rowstate  );\n      END IF;\n   END IF;\n   -- Note: Check Addr Flag\n   IF (newrec_.addr_flag IS NULL)  THEN\n   END IF;\n   IF (newrec_.tax_liability IS NULL) THEN\n   END IF;\n   -- Note: Remove the Address Information when addr_flag is 'FALSE'\n   IF newrec_.addr_flag = 'N' THEN\n   ELSE\n      IF newrec_.country_code IS NULL THEN\n      END IF;\n      Address_Setup_API.Validate_Address(newrec_.country_code,newrec_.addr_state,newrec_.county, newrec_.city);\n   END IF;\n   -- gelr:in_hsn_sac_codes, Added condition check for use_delivery_doc_address, use_supplier_doc_address\n   IF (oldrec_.rowstate IN ('Cancelled', 'Closed')) THEN\n      IF NVL(oldrec_.address1,CHR(32))           != NVL(newrec_.address1,CHR(32)) OR\n         oldrec_.use_supplier_doc_address        != newrec_.use_supplier_doc_address THEN\n         IF (oldrec_.rowstate = 'Closed') THEN\n            Error_SYS.Record_General(lu_name_, 'NOCHANGESALLOWED: Only Currency can be changed when order is Closed ');\n         ELSE\n            Error_SYS.Record_General(lu_name_, 'NO_CHANGES_ALLOWED: No changes allowed when order is Cancelled ');", "original_code_length": 20549, "summary": null}
{"id": "ShopOrd_Update___", "context": {"api_name": "ShopOrd", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrd", "function_name": "Update___", "previous_function": "Insert___", "next_function": null, "complexity_metrics": {"total_lines": 425, "code_lines": 380, "cyclomatic_complexity": 161, "estimated_tokens": 2089.1}, "pagerank_score": 0.0004448930294890243, "truncation_metadata": {"original_length": 24496, "truncated_length": 1670, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.06817439581972567}}, "code": "PROCEDURE Update___ (\n   objid_      IN     VARCHAR2,\n   oldrec_     IN     SHOP_ORD_TAB%ROWTYPE,\n   newrec_     IN OUT SHOP_ORD_TAB%ROWTYPE,\n   attr_       IN OUT VARCHAR2,\n   objversion_ IN OUT VARCHAR2,\n   by_keys_    IN     BOOLEAN DEFAULT FALSE )\nIS\n   cbs_site_               BOOLEAN;\n   scheduling_modify_      INTEGER := 0;\n   demand_code_            VARCHAR2(20);\n   activity_seq_           NUMBER;\n-- ... key business logic ...\n      END IF;\n      IF (demand_code_ IN ('IO', 'PI', 'PLD', 'PJD') AND NOT (demand_code_ = 'IO' AND newrec_.demand_code = 'MRO')) THEN\n      END IF;\n   END IF;\n   -- IF CBS site and State is not 'Closed' or Cancelled, send an Event Server message. Note SchedulingInt.ModifyOrder should be added here.\n   $IF Component_Cbsint_SYS.INSTALLED $THEN\n      IF newrec_.rowstate NOT IN ('Closed', 'Cancelled') THEN\n         IF newrec_.include_as_load = 'TRUE' THEN\n            $IF Component_Proj_SYS.INSTALLED $THEN\n               IF newrec_.activity_seq IS NOT NULL THEN\n               END IF;\n            $ELSE\n               IF newrec_.activity_seq IS NOT NULL THEN\n               END IF;\n            IF ((oldrec_.activity_seq IS NULL AND newrec_.activity_seq IS NOT NULL) OR\n                (oldrec_.include_as_load != newrec_.include_as_load)) THEN\n               send_with_modify_ := 'TRUE';\n            END IF;\n            -- if scheduling related data has changed, then modify the scheduling server\n            IF (oldrec_.revised_qty_due != newrec_.revised_qty_due\n            THEN\n               scheduling_modify_ := 1;\n            END IF;\n            IF ((oldrec_.note_text IS NULL)     AND (newrec_.note_text IS NOT NULL))   OR", "original_code_length": 24496, "summary": null}
{"id": "AccessAttribute_Check_Access", "context": {"api_name": "AccessAttribute", "module": "person", "file_summary": "Business logic and data operations - AccessAttribute", "function_name": "Check_Access", "previous_function": "Check_Access_Org", "next_function": "Check_Access_Person", "complexity_metrics": {"total_lines": 484, "code_lines": 439, "cyclomatic_complexity": 160, "estimated_tokens": 2315.3}, "pagerank_score": 0.0003611978968580303, "truncation_metadata": {"original_length": 27707, "truncated_length": 1693, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.061103692207745336}}, "code": "PROCEDURE Check_Access (\n   lu_name_           IN VARCHAR2,\n   old_attr_          IN VARCHAR2,\n   new_attr_          IN VARCHAR2,\n   attr_acc_names_    IN VARCHAR2,\n   access_own_emp_no_ IN VARCHAR2 DEFAULT '1',\n   check_hr_mgr_      IN VARCHAR2 DEFAULT '1' )\nIS\n   company_id_col_              VARCHAR2(30);             \n   emp_no_col_                  VARCHAR2(30);             \n   org_code_col_                VARCHAR2(2000);             \n   trans_date_col_              VARCHAR2(30);\n-- ... key business logic ...\n         IF available_emp_no_ IS NULL THEN           \n         ELSIF Client_SYS.Item_Exist(rec_.attribute_id, own_data_attr_) OR Client_SYS.Item_Exist(rec_.attribute_id, data_access_attr_) THEN   \n            FOR val_rec_ IN get_acc_access_attribute_val (rec_.attribute_id) LOOP\n               any_loop_entry_ := TRUE;\n               IF (Business_Unit_Utils_API.Parse_Parameter(new_column_value_, val_rec_.new_value, val_rec_.column_type) = 'FALSE') THEN\n                  IF (client_value_ IS NULL OR client_value_ = ' ') THEN     \n                  ELSE                        \n                  END IF;\n               ELSE\n               END IF;\n               IF (prev_col_name_ IS NOT NULL AND prev_col_name_ = val_rec_.column_name) THEN\n                  IF ((error_in_prev_ = TRUE AND error_in_current_ = FALSE) OR (error_in_prev_ = FALSE AND error_in_current_ = TRUE)) THEN\n                  END IF;\n               END IF;\n            END LOOP;\n            IF (error_category_ IS NOT NULL) THEN\n            ELSE \n            END IF;\n         END IF;\n      END LOOP;\n      IF (NOT any_loop_entry_ AND (data_access_attr_ IS NOT NULL OR own_data_attr_ IS NOT NULL)) THEN", "original_code_length": 27707, "summary": null}
{"id": "CustomerOrderLine_Change_Package_Structure___", "context": {"api_name": "CustomerOrderLine", "module": "order", "file_summary": "Customer order management and processing - CustomerOrderLine", "function_name": "Change_Package_Structure___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 449, "code_lines": 400, "cyclomatic_complexity": 160, "estimated_tokens": 2099.5}, "pagerank_score": 0.0003574882184538361, "truncation_metadata": {"original_length": 24003, "truncated_length": 1636, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.06815814689830438}}, "code": "PROCEDURE Change_Package_Structure___ (\n   pkg_promised_delivery_date_ IN OUT DATE,\n   pkg_planned_delivery_date_  IN OUT DATE,\n   pkg_planned_ship_date_      IN OUT DATE,\n   pkg_planned_due_date_       IN OUT DATE,\n   pkg_atp_status_             IN OUT VARCHAR2,\n   pkg_rec_                    IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,\n   do_qty_                     IN     BOOLEAN,\n   do_price_                   IN     BOOLEAN,\n   do_discount_                IN     BOOLEAN,\n   do_planned_                 IN     BOOLEAN,\n   do_wanted_                  IN     BOOLEAN,\n-- ... key business logic ...\n         IF (newrec_.rowstate = 'Released') AND (((newrec_.supply_code = 'NO') AND\n            (backorder_option_ != 'INCOMPLETE PACKAGES NOT ALLOWED')) OR (newrec_.supply_code = 'SEO')) THEN\n            IF (TRUNC(newrec_.planned_due_date) <= site_date_) OR\n                (alloc_assign_flag_db_ = Cust_Ord_Reservation_Type_API.DB_PRIORITY_RESERVATION) THEN\n            END IF;\n         END IF;\n      END IF;\n      IF (do_promised_) THEN\n      END IF;\n      IF do_discount_ THEN\n      END IF;\n      IF(Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(pkg_rec_.contract, 'IN_HSN_SAC_CODES') = Fnd_Boolean_API.DB_TRUE)THEN\n      ELSE \n      END IF;\n      IF (pkg_rec_.catalog_type = 'PKG' AND pkg_rec_.price_freeze != 'FROZEN') THEN\n         IF (newrec_.price_unit_meas != price_unit_meas_) THEN\n         END IF;\n         IF (newrec_.sales_unit_meas != sales_unit_meas_) THEN\n         END IF;\n         IF (newrec_.price_conv_factor != price_conv_factor_) THEN\n            IF (part_cat_rec_.catch_unit_enabled = 'FALSE' ) THEN", "original_code_length": 24003, "summary": null}
{"id": "JtTask_Post_Update___", "context": {"api_name": "JtTask", "module": "wo", "file_summary": "Customer order management and processing - JtTask", "function_name": "Post_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 369, "code_lines": 330, "cyclomatic_complexity": 155, "estimated_tokens": 1669.2}, "pagerank_score": 0.0003973389448066272, "truncation_metadata": {"original_length": 22234, "truncated_length": 1699, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07641450031483314}}, "code": "PROCEDURE Post_Update___(\n   oldrec_ IN     work_task_tab%ROWTYPE,\n   newrec_ IN OUT work_task_tab%ROWTYPE,\n   attr_   IN OUT VARCHAR2)\nIS\n   cbs_update_                BOOLEAN:=FALSE;\n   old_actual_object_id_      Equipment_Object_Tab.mch_code%TYPE;\n   old_actual_object_site_    Equipment_Object_Tab.contract%TYPE;\n   new_actual_object_id_      Equipment_Object_Tab.mch_code%TYPE;\n   new_actual_object_site_    Equipment_Object_Tab.contract%TYPE;\n   progress_update_           VARCHAR2(7) := 'FALSE';\n   attr2_                     VARCHAR2(2000);\n-- ... key business logic ...\n   END IF;\n   IF (Validate_SYS.Is_Changed(newrec_.obj_cust_warranty, oldrec_.obj_cust_warranty) OR Validate_SYS.Is_Changed(newrec_.obj_sup_warranty, oldrec_.obj_sup_warranty)) THEN\n   END IF;\n   Update_Resource_Activities___(oldrec_, newrec_);\n   IF (Validate_SYS.Is_Different(oldrec_.actual_obj_conn_rowkey, newrec_.actual_obj_conn_rowkey)) THEN\n      --Check if there are any jobs in the 'Posted' state for the same task and stops the process if it is already executing\n      IF (arg_tab_ IS NOT NULL AND arg_tab_.COUNT > 0) THEN\n         FOR i_ IN arg_tab_.FIRST..arg_tab_.LAST LOOP\n            IF (job_task_no_ = newrec_.task_seq) THEN\n            END IF;\n         END LOOP;\n      END IF;\n      IF (create_job_) THEN\n         Transaction_SYS.Deferred_Call('Jt_Task_API.Re_Calc_Equip_Str_Cost_Rev__', attrib_, Language_SYS.Translate_Constant(lu_name_,'EQUIPCOSTSTRUC: Update Cost Structure for task ') || newrec_.task_seq);\n      END IF;\n   END IF;\n   IF(Jt_Task_API.Is_Critical_Task(newrec_.site,\n                                   NVL(newrec_.actual_obj_conn_rowkey, newrec_.reported_obj_conn_rowkey)) = 'TRUE')THEN", "original_code_length": 22234, "summary": null}
{"id": "Project_Copy_Project_Attr___", "context": {"api_name": "Project", "module": "proj", "file_summary": "Customer order management and processing - Project", "function_name": "Copy_Project_Attr___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 409, "code_lines": 382, "cyclomatic_complexity": 153, "estimated_tokens": 2012.4}, "pagerank_score": 0.000769880419962281, "truncation_metadata": {"original_length": 22068, "truncated_length": 1686, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07640021750951605}}, "code": "PROCEDURE Copy_Project_Attr___ (\n   copy_project_id_              IN     VARCHAR2,\n   new_project_id_               IN     VARCHAR2,\n   copy_sub_project_id_          IN     VARCHAR2,\n   parent_sub_project_id_        IN     VARCHAR2,\n   new_early_start_              IN     DATE,\n   source_sub_project_name_      IN     VARCHAR2,\n   destination_sub_project_name_ IN     VARCHAR2,\n   options_attr_                 IN OUT VARCHAR2 )\nIS\n   copyrec_                   project_tab%ROWTYPE;\n   newrec_                    project_tab%ROWTYPE;\n-- ... key business logic ...\n         END IF;\n      ELSE\n      END IF;\n   END IF;\n   IF (calendar_id_ IS NOT NULL) THEN\n      IF (copy_sub_project_id_ IS NOT NULL) THEN\n         LOOP\n            EXIT WHEN all_activities_sub%NOTFOUND;\n         END LOOP;\n      ELSE\n         IF (copy_or_not_ = 'YES') THEN\n            LOOP\n               EXIT WHEN all_activities%NOTFOUND;\n            END LOOP;\n         END IF;\n      END IF;\n   END IF;\n   IF (new_currency_code_ = proj_currency_code_) THEN\n   ELSE\n      IF (newrec_.currency_type IS NOT NULL) THEN\n      ELSE\n      END IF;\n   END IF;\n   -- Update Project\n   IF (copy_or_not_ = 'YES') THEN\n      IF (new_project_id_ IS NOT NULL AND copy_sub_project_id_ IS NULL) THEN\n         IF (copyrec_.plan_start IS NOT NULL) THEN\n         END IF;\n         IF (copyrec_.plan_finish IS NOT NULL) THEN\n         END IF;\n         -- probability_to_win must not be copied, use existing value in new project if exists, otherwise null.\n         IF (Client_SYS.Get_Item_Value('MULTICURRENCY',options_attr_) = 'YES') THEN\n         END IF;\n         IF (Client_SYS.Get_Item_Value('PROJECTCURRENCY',options_attr_) = 'YES') THEN", "original_code_length": 22068, "summary": null}
{"id": "AccountingCodestr_Codestring_Handling___", "context": {"api_name": "AccountingCodestr", "module": "accrul", "file_summary": "Financial operations and accounting - AccountingCodestr", "function_name": "Codestring_Handling___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 381, "code_lines": 364, "cyclomatic_complexity": 151, "estimated_tokens": 1628.9}, "pagerank_score": 0.0006614529766810643, "truncation_metadata": {"original_length": 20868, "truncated_length": 1651, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07911635039294614}}, "code": "FUNCTION Codestring_Handling___(\n   company_             IN VARCHAR2,\n   code_part_           IN VARCHAR2,\n   code_a_              IN VARCHAR2,\n   code_b_              IN VARCHAR2,\n   code_c_              IN VARCHAR2,\n   code_d_              IN VARCHAR2,\n   code_e_              IN VARCHAR2,\n   code_f_              IN VARCHAR2,\n   code_g_              IN VARCHAR2,\n   code_h_              IN VARCHAR2,\n   code_i_              IN VARCHAR2,\n-- ... key business logic ...\n         ELSE            \n         END IF;         \n         FOR i_ IN 1..9 LOOP                        \n            IF (code_part_demand_ = 'S') THEN\n               IF (mod_codestring_rec_) THEN               \n                  IF (i_ = 1) THEN\n                     return_rec_.modified_code_b := NULL;\n                  ELSIF (i_ = 2) THEN\n                     return_rec_.modified_code_c := NULL;            \n                  ELSIF (i_ = 3) THEN\n                     return_rec_.modified_code_d := NULL;            \n                  ELSIF (i_ = 4) THEN\n                     return_rec_.modified_code_e := NULL;            \n                  ELSIF (i_ = 5) THEN\n                     return_rec_.modified_code_f := NULL;         \n                  ELSIF (i_ = 6) THEN\n                     return_rec_.modified_code_g := NULL;         \n                  ELSIF (i_ = 7) THEN\n                     return_rec_.modified_code_h := NULL;         \n                  ELSIF (i_ = 8) THEN\n                     return_rec_.modified_code_i := NULL;            \n                  ELSIF (i_ = 9) THEN\n                     return_rec_.modified_code_j := NULL;         \n                  END IF;", "original_code_length": 20868, "summary": null}
{"id": "CompanyPersAssign_Change_Pos_Wizard_Finish", "context": {"api_name": "CompanyPersAssign", "module": "person", "file_summary": "Customer order management and processing - CompanyPersAssign", "function_name": "Change_Pos_Wizard_Finish", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 436, "code_lines": 413, "cyclomatic_complexity": 147, "estimated_tokens": 1804.4}, "pagerank_score": 0.0003599931108755574, "truncation_metadata": {"original_length": 24978, "truncated_length": 1642, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.0657378493073905}}, "code": "PROCEDURE Change_Pos_Wizard_Finish (\n   org_error_              OUT CLOB,\n   org_error_msg_          OUT CLOB,\n   job_error_              OUT CLOB,\n   job_error_msg_          OUT CLOB,\n   emp_attr_               IN VARCHAR2,\n   org_attr_               IN VARCHAR2,\n   job_attr_               IN VARCHAR2,\n   org_selection_attr_     IN VARCHAR2,\n   job_selection_attr_     IN VARCHAR2,\n   action_                 IN VARCHAR2)\nIS\n-- ... key business logic ...\n               IF org_attr_ IS NULL THEN\n               END IF;\n               IF (Client_SYS.Item_Exist('TRUE', dummy_org_attr_) AND Client_SYS.Get_Item_Value('TRUE', dummy_org_attr_) = '1') THEN\n                  is_end_loop_org_ := FALSE;\n               END IF;\n               WHILE (Client_SYS.Get_Next_From_Attr(dummy_org_attr_, ptr_, name_, value_)) LOOP\n                  IF (name_ = 'COMPANY_ID') THEN\n                  ELSIF (name_ = 'EMP_NO') THEN\n                  ELSIF (name_ = 'STRUCTURE_ID') THEN\n                  ELSIF (name_ = 'NEW_ORG_CODE') THEN\n                  ELSIF (name_ = 'NEW_POS_CODE') THEN\n                  ELSIF (name_ = 'NEW_ACCESS_ROLE_ID') THEN\n                  ELSIF (name_ = 'NEW_VALID_FROM') THEN\n                  ELSIF (name_ = 'NEW_VALID_TO') THEN\n                  ELSIF (name_ = 'ASSIGNMENT_TYPE') THEN\n                  ELSIF (name_ = 'END_DATE') THEN\n                  ELSIF (name_ = 'SET_AS_DB') THEN\n                  ELSIF (name_ = 'MSG_TYPE_DB') THEN\n                  ELSIF (name_ = 'ORG_WARN_OVERRIDE') THEN\n                  ELSIF (name_ = 'ONBOARD_TEMPLATE_ID') THEN\n                  ELSIF (name_ = 'EXCLUDE_FROM_ORG_CHART') THEN", "original_code_length": 24978, "summary": null}
{"id": "Invoice_Handle_Curr_Rounding_Diff___", "context": {"api_name": "Invoice", "module": "invoic", "file_summary": "Customer order management and processing - Invoice", "function_name": "Handle_Curr_Rounding_Diff___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 158, "code_lines": 158, "cyclomatic_complexity": 145, "estimated_tokens": 995.8000000000001}, "pagerank_score": 0.0005004638579440837, "truncation_metadata": {"original_length": 10006, "truncated_length": 1693, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.16919848091145312}}, "code": "PROCEDURE Handle_Curr_Rounding_Diff___ (\n   company_                IN VARCHAR2,\n   invoice_id_             IN NUMBER,\n   final_post_             IN VARCHAR2,\n   user_group_             IN VARCHAR2,\n   voucher_type_           IN VARCHAR2,\n   voucher_date_           IN DATE,\n   ignore_acc_curr_diff_   IN VARCHAR2 )\nIS\n   possible_to_match_tax_code_      VARCHAR2(5) := 'TRUE';\n   zero_invoice_                    VARCHAR2(5);\n   rounding_diff_item_id_           NUMBER;\n-- ... key business logic ...\n   acc_curr_diff_         := NVL(Company_Invoice_Info_API.Get_Acc_Curr_Diff(company_), 0);\n   rounding_diff_item_id_ := Invoice_Item_API.Get_Max_Rounding_Item_Id(company_, invoice_id_);\n   IF (rounding_diff_item_id_ = 0) THEN\n      rounding_diff_item_id_ := pc_rounding_diff_start_;\n   ELSE\n      rounding_diff_item_id_ := rounding_diff_item_id_ + 1;\n   END IF;\n   --       different tax codes on invoice item and postings, when tax correspondence is false.\n   IF (head_rec_.creator IN ('MAN_CUST_INVOICE_API', Invoice_API.creator_man_supp_inv_)) THEN\n   END IF; \n   IF (head_rec_.party_type = 'SUPPLIER') THEN\n      IF (final_post_ = 'TRUE' OR head_rec_.creator = 'OUTGOING_SUPPLIER_INVOICE_API') THEN\n         IF (zero_invoice_ = 'FALSE') THEN\n            IF (possible_to_match_tax_code_ = 'TRUE') THEN\n               FOR rec_ IN sum_inv_lines_tax_code LOOP              \n                  --       When there are less than 100% UseTax/CalcTax tax codes, there can be an impact, but it is not allowed\n                  --       to enter such tax codes when tax correspondence is TRUE.\n                  diff_dom_amount_  := rec_.sum_inv_dom_amount_tax_code  - sum_post_dom_amount_tax_code_;", "original_code_length": 10006, "summary": null}
{"id": "ShopOrd_Check_Insert___", "context": {"api_name": "ShopOrd", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrd", "function_name": "Check_Insert___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 322, "code_lines": 274, "cyclomatic_complexity": 145, "estimated_tokens": 1816.1000000000001}, "pagerank_score": 0.0004448930294890243, "truncation_metadata": {"original_length": 17144, "truncated_length": 1635, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.0953686420905273}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT shop_ord_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   site_date_                DATE;\n   entered_date_             DATE;\n   source_indicator_         VARCHAR2(30);\n   lead_time_                NUMBER;\n   calendar_id_              VARCHAR2(10);\n   tmp_release_no_           VARCHAR2(4);\n   tmp_sequence_no_          VARCHAR2(4);\n-- ... key business logic ...\n      IF (newrec_.condition_code IS NOT NULL) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF ((part_catalog_rec_.position_part = Position_Part_API.DB_POSITION_PART) AND \n       (newrec_.order_code NOT IN (Shop_Ord_Code_API.DB_MRO_DISASSEMBLY, Shop_Ord_Code_API.DB_MRO_ASSEMBLY, Shop_Ord_Code_API.DB_DISPOSITION))) THEN\n   END IF;\n   IF (newrec_.routing_alternative IS NOT NULL) THEN\n      IF newrec_.order_code != 'T' THEN\n      END IF;\n   END IF;\n   IF newrec_.order_code = 'T' AND ((newrec_.used_struc_bom_type = 'F') OR (newrec_.used_rout_bom_type = 'F')) THEN\n   END IF;\n   IF newrec_.earliest_start_date IS NULL THEN\n   END IF;\n   -- if source is CTP then set earliest_start_date and need_date othrewise proces as normal.\n   Check_Need_Date___(newrec_, same_day_plan_db_, calendar_id_);\n   IF newrec_.sched_direction = 'B' THEN  --Backwards Scheduling\n      IF (same_day_plan_db_ = Fnd_Boolean_API.DB_TRUE) THEN\n      ELSE            \n      END IF;\n   ELSIF newrec_.sched_direction = 'F' THEN --Forward Scheduling\n   END IF;\n   IF (newrec_.demand_code = 'DOP') THEN\n   END IF;\n   -- Need to default need_date and earliest_start_date values if saved from\n   IF newrec_.need_date IS NULL THEN", "original_code_length": 17144, "summary": null}
{"id": "PurchaseOrder_Check_Insert___", "context": {"api_name": "PurchaseOrder", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrder", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 323, "code_lines": 291, "cyclomatic_complexity": 145, "estimated_tokens": 1361.1000000000001}, "pagerank_score": 0.00039647019091784463, "truncation_metadata": {"original_length": 14067, "truncated_length": 1639, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.11651382668657141}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT purchase_order_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS   \n   v_curr_code_              VARCHAR2(5);\n   v_language_code_          VARCHAR2(5);\n   v_buyer_code_             VARCHAR2(20);\n   today_                    DATE;\n   user_                     VARCHAR2(30) := Fnd_Session_API.Get_Fnd_User;\n   company_                  PURCHASE_ORDER.company%TYPE;\n   site_delivery_rec_        Company_Address_API.Public_Rec;\n-- ... key business logic ...\n      Error_SYS.Check_Not_Null(lu_name_, 'PROJECT_ADDRESS_ID', newrec_.project_address_id);\n   END IF;   \n   IF newrec_.pay_term_id IS NULL THEN    \n   END IF;   \n   -- Note: Set Delivery Address as NULL when Order Code is 4\n   IF (newrec_.order_code ='3' ) THEN\n   END IF;   \n   IF (newrec_.order_date IS NULL) THEN\n   END IF;   \n  -- Note: Check Central Order Flag\n   IF (newrec_.central_order_flag IS NULL) THEN\n   END IF;\n   IF (newrec_.centralized_order_site IS NULL) THEN\n   END IF;\n   -- Note: Check Consolidated Flag\n   IF (newrec_.consolidated_flag IS NULL) THEN\n   END IF;\n   -- Note: Check Addr Flag\n   IF (newrec_.addr_flag IS NULL)  THEN\n   END IF;\n   IF (newrec_.tax_liability IS NULL)  THEN      \n   END IF;\n   -- Note: Remove the Address Information when addr_flag is 'FALSE'\n   IF newrec_.addr_flag = 'N' THEN\n   ELSE\n      Address_Setup_API.Validate_Address(newrec_.country_code, newrec_.addr_state, newrec_.county, newrec_.city);\n   END IF;\n   IF (newrec_.authorization_rejected IS NULL) THEN\n   END IF;\n   --  Condition to avoid UAS validation when the PO is created from an inter-site flow.", "original_code_length": 14067, "summary": null}
{"id": "Invoice_Cancel_Invoice___", "context": {"api_name": "Invoice", "module": "invoic", "file_summary": "Customer order management and processing - Invoice", "function_name": "Cancel_Invoice___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 474, "code_lines": 474, "cyclomatic_complexity": 142, "estimated_tokens": 2382.9}, "pagerank_score": 0.0005004638579440837, "truncation_metadata": {"original_length": 30753, "truncated_length": 1678, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.05456378239521348}}, "code": "FUNCTION Cancel_Invoice___ (\n   company_             IN     VARCHAR2,\n   identity_            IN     VARCHAR2,\n   party_type_          IN     VARCHAR2,\n   invoice_id_          IN     NUMBER,\n   voucher_type_        IN OUT VARCHAR2,\n   voucher_type_final_  IN OUT VARCHAR2,\n   voucher_no_          IN OUT NUMBER,\n   voucher_no_final_    IN OUT NUMBER,\n   voucher_date_        IN     DATE,\n   voucher_date_final_  IN     DATE,\n   user_group_          IN     VARCHAR2,\n-- ... key business logic ...\n            END IF;\n            IF (compfin_rec_.parallel_acc_currency IS NOT NULL) THEN\n            END IF;\n            IF (inv_head_rec_.creator IN ('INSTANT_INVOICE_API', 'CUSTOMER_ORDER_INV_HEAD_API')) THEN\n               IF (inv_head_rec_.creator = 'CUSTOMER_ORDER_INV_HEAD_API') THEN\n               END IF;\n            END IF;\n            IF (tax_book_and_tax_numb_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN                         \n            END IF;\n         END LOOP; \n      END IF;\n      EXIT WHEN posteditems%NOTFOUND;\n   END LOOP;\n   -- Create Voucher, Only if the invoice has been posted\n   IF (inv_head_rec_.rowstate <> 'Preliminary') THEN\n      IF (company_info_.use_tax_rates = 'TRUE') THEN\n         IF (party_type_db_ = Party_Type_API.DB_CUSTOMER) THEN\n         ELSE\n         END IF;\n      END IF; \n      -- Loop over every company that has postings created\n      FOR voucher_company_ IN get_voucher_companies LOOP\n         -- Loop over every voucher type within each company\n         FOR voucher_info_ IN get_voucher_info(voucher_company_.company) LOOP\n            IF (voucher_company_.company = company_) THEN\n               IF (function_group_ IN ('F', 'I')) THEN", "original_code_length": 30753, "summary": null}
{"id": "InventoryPartInStock_Cancel_Receipt_In_Place", "context": {"api_name": "InventoryPartInStock", "module": "invent", "file_summary": "Customer order management and processing - InventoryPartInStock", "function_name": "Cancel_Receipt_In_Place", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 485, "code_lines": 445, "cyclomatic_complexity": 142, "estimated_tokens": 1856.4}, "pagerank_score": 0.000439514728940585, "truncation_metadata": {"original_length": 34029, "truncated_length": 1714, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.05036880307972612}}, "code": "PROCEDURE Cancel_Receipt_In_Place (\n   cancel_receipt_in_place_tab_ IN Inv_Part_Ownership_Manager_API.cancel_receipt_in_place_table)\nIS\n   new_trans_                 NUMBER := 0;   \n   transaction_code_          VARCHAR2(10); \n   oldrec_                    INVENTORY_PART_IN_STOCK_TAB%ROWTYPE;\n   newrec_                    INVENTORY_PART_IN_STOCK_TAB%ROWTYPE;\n   home_company_              VARCHAR2(20) := NULL; \n   part_inv_value_method_     VARCHAR2(50);    \n   inventory_value_           NUMBER := NULL; \n   old_trans_cost_detail_tab_ Inventory_Part_Unit_Cost_API.Cost_Detail_Tab; \n   transaction_cost_          NUMBER := 0; \n-- ... key business logic ...\n               END IF;\n               IF (part_rec_.inventory_part_cost_level = 'COST PER CONDITION') THEN\n                  IF (condition_rec_table_.COUNT = 0) THEN\n                  ELSE\n                     FOR i IN condition_rec_table_.FIRST..condition_rec_table_.LAST LOOP\n                        IF (condition_code_ != condition_rec_table_(i).condition_code) THEN\n                           IF (i = condition_rec_table_.LAST) THEN\n                           END IF;\n                        ELSE\n                        END IF;\n                     END LOOP;\n                  END IF;\n               END IF;\n            END IF;\n            IF (part_inv_value_method_ IN ('FIFO','LIFO')) THEN\n               Inventory_Transaction_Hist_API.Remove_Fifo_Lifo_Cost(dummy_,\n            ELSIF (part_inv_value_method_ = 'ST') THEN\n            END IF;\n            -- The Inventory Quantity is updated to simulate the physical removal of parts\n            -- The Qty Onhand cannot go below zero during the transfer of Ownership, exceptions will not be handled", "original_code_length": 34029, "summary": null}
{"id": "Invoice_Gen_Post_Check_Insert___", "context": {"api_name": "Invoice", "module": "invoic", "file_summary": "Customer order management and processing - Invoice", "function_name": "Gen_Post_Check_Insert___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 253, "code_lines": 253, "cyclomatic_complexity": 140, "estimated_tokens": 1336.4}, "pagerank_score": 0.0005004638579440837, "truncation_metadata": {"original_length": 14235, "truncated_length": 1664, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.11689497716894977}}, "code": "PROCEDURE Gen_Post_Check_Insert___ (\n   newrec_ IN OUT invoice_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )   \nIS\n   party_type_             VARCHAR2(200);\n   reference_method_       VARCHAR2(20);\n   reference_mandatory_    VARCHAR2(5);   \n   separate_tax_invoice_   VARCHAR2(5);\n   payer_identity_         VARCHAR2(20);   \n   external_               VARCHAR2(5) := 'FALSE';\n   deduction_group_        invoice_tab.deduction_group%TYPE;\n-- ... key business logic ...\n   END IF;   \n   IF ((newrec_.creator = Invoice_API.creator_man_supp_inv_) AND (NVL(newrec_.automatic_invoice, 'FALSE') = 'TRUE') AND (newrec_.invoice_recipient IS NULL)) THEN\n   END IF;\n   IF (newrec_.party_type = pc_customer_db_) THEN -- so far only for customer\n      IF (Invoice_Party_Type_Group_API.Get_Use_Collective_Voucher (newrec_.company, party_type_, Identity_Invoice_Info_API.Get_Group_Id(newrec_.company, newrec_.identity, party_type_ )) = 'TRUE') THEN\n      END IF;\n   END IF;\n   IF (TRUNC(newrec_.due_date) < TRUNC(newrec_.pay_term_base_date)) THEN\n      $IF Component_Payled_SYS.INSTALLED $THEN\n         IF (format_id_ IN ('ABEUR','DDAGNOR','DDBGSEK','DDEUR','DDPGSEK','ISABEL_I3')) THEN\n         ELSE\n         END IF;\n      $ELSE\n   END IF;   \n   IF (newrec_.language_code IS NULL) THEN\n   END IF;\n   Check_Series_And_Number_Ref___(newrec_.company, newrec_.invoice_id, newrec_.series_reference, newrec_.number_reference);\n   IF (newrec_.creator != Invoice_API.creator_man_supp_inv_) THEN\n      IF (newrec_.number_reference IS NOT NULL AND newrec_.debit_invoice_id IS NULL) THEN\n      END IF;\n   END IF;\n   IF (newrec_.transfer_status IS NOT NULL) THEN", "original_code_length": 14235, "summary": null}
{"id": "Invoice_Gen_Post_Check_Update___", "context": {"api_name": "Invoice", "module": "invoic", "file_summary": "Customer order management and processing - Invoice", "function_name": "Gen_Post_Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 206, "code_lines": 206, "cyclomatic_complexity": 136, "estimated_tokens": 1292.2}, "pagerank_score": 0.0005004638579440837, "truncation_metadata": {"original_length": 12378, "truncated_length": 1643, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1327354984650186}}, "code": "PROCEDURE Gen_Post_Check_Update___ (   \n   newrec_  IN OUT invoice_tab%ROWTYPE,       \n   indrec_  IN OUT Indicator_Rec,\n   attr_    IN OUT VARCHAR2,\n   oldrec_  IN     invoice_tab%ROWTYPE )\nIS    \n   party_type_                 VARCHAR2(200);\n   transfer_status_            VARCHAR2(100);   \n   reference_method_           VARCHAR2(20);   \n   ncf_ref_old_                VARCHAR2(50);\n   ncf_mandatory_              VARCHAR2(5);\n   suggest_deductions_         VARCHAR2(5);\n-- ... key business logic ...\n         END IF;\n         IF (reference_method_ = 'NONE') THEN\n         ELSE\n            IF (reference_method_ != 'ODN') THEN\n               Ncf_Invoice_Util_API.Validate_Reference_(newrec_.company, newrec_.party_type, new_ncf_reference_value_, newrec_.identity);\n            END IF;\n            IF (NVL(newrec_.ncf_reference,'x') != NVL(new_ncf_reference_value_,'x')) THEN\n               IF (newrec_.party_type = 'CUSTOMER') THEN\n                  IF (Ncf_Reference_Exist(newrec_.company, newrec_.party_type, newrec_.ncf_reference, newrec_.identity)) THEN\n                  END IF;\n               END IF;\n            END IF;                                    \n         END IF;\n      END IF;\n      IF (newrec_.creator = 'OUTGOING_SUPPLIER_INVOICE_API') THEN\n      ELSE\n         IF (NVL(ncf_ref_old_,'x') <> NVL(newrec_.ncf_reference,'x')) THEN\n         END IF;\n      END IF;   \n   END IF;  \n   IF (newrec_.payer_identity IS NOT NULL AND newrec_.party_type = 'CUSTOMER') THEN\n      IF (Customer_Info_API.Get_One_Time_Db(newrec_.identity) = 'FALSE') THEN\n         IF (Customer_Info_API.Get_One_Time_Db(newrec_.payer_identity) = 'TRUE') THEN", "original_code_length": 12378, "summary": null}
{"id": "InventoryPartInStock_Receive_Part_Impl___", "context": {"api_name": "InventoryPartInStock", "module": "invent", "file_summary": "Customer order management and processing - InventoryPartInStock", "function_name": "Receive_Part_Impl___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 449, "code_lines": 414, "cyclomatic_complexity": 136, "estimated_tokens": 2029.3000000000002}, "pagerank_score": 0.000439514728940585, "truncation_metadata": {"original_length": 25879, "truncated_length": 1679, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.06487885930677383}}, "code": "PROCEDURE Receive_Part_Impl___ (\n   transaction_id_               IN OUT NUMBER,\n   accounting_id_                IN OUT NUMBER,\n   trans_value_                  IN OUT NUMBER,\n   contract_                     IN     VARCHAR2,\n   part_no_                      IN     VARCHAR2,\n   configuration_id_             IN     VARCHAR2,\n   location_no_                  IN     VARCHAR2,\n   lot_batch_no_                 IN     VARCHAR2,\n   serial_no_                    IN     VARCHAR2,\n   eng_chg_level_                IN     VARCHAR2,\n   waiv_dev_rej_no_              IN     VARCHAR2,\n-- ... key business logic ...\n      ELSE\n      END IF;\n   END IF;\n   -- Investigate if a new record should be created or if an old\n   -- one is present and should be updated.\n   IF (Check_Exist(contract_, part_no_,configuration_id_,\n                   eng_chg_level_,waiv_dev_rej_no_, activity_seq_, handling_unit_id_)) THEN\n   ELSE\n   END IF;\n   IF ((new_record_) OR (oldrec_.qty_onhand = 0 AND oldrec_.qty_in_transit = 0)) THEN\n      -- Checks if the ownership is allowed to be mixed or not in the location level\n      IF (issue_transaction_id_ IS NULL) AND (NOT receipt_in_place_ AND NOT receipt_for_rental_asset_trf_) THEN\n         Check_Allow_Ownership_Mix (contract_,\n      END IF;\n      IF (expiration_date_ IS NULL) THEN\n         IF (part_rec_.durability_day IS NOT NULL)  THEN\n         END IF;\n      ELSE\n      END IF;\n      -- When receiving into a new or empty stock record then we accept the PAC ID sent in through the method parameter.\n   ELSE\n      IF ((NVL(TRUNC(oldrec_.expiration_date), last_calendar_date_)) >\n          (NVL(TRUNC(expiration_date_),        last_calendar_date_))) THEN", "original_code_length": 25879, "summary": null}
{"id": "Resource_Update___", "context": {"api_name": "Resource", "module": "genres", "file_summary": "Business logic and data operations - Resource", "function_name": "Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 308, "code_lines": 286, "cyclomatic_complexity": 133, "estimated_tokens": 1314.3}, "pagerank_score": 0.0005536948421255481, "truncation_metadata": {"original_length": 17319, "truncated_length": 1730, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09989029389687626}}, "code": "PROCEDURE Update___ (\n   objid_      IN     VARCHAR2,\n   oldrec_     IN     resource_tab%ROWTYPE,\n   newrec_     IN OUT NOCOPY resource_tab%ROWTYPE,\n   attr_       IN OUT NOCOPY  VARCHAR2,\n   objversion_ IN OUT NOCOPY  VARCHAR2,\n   by_keys_    IN     BOOLEAN DEFAULT FALSE )\nIS\n   resource_parent_seq_       NUMBER;\n   structure_seq_             NUMBER;\n   scheduling_proficiency_    NUMBER;\n   company_                   VARCHAR2(20);\n-- ... key business logic ...\n      END IF;\n   END IF;\n   $IF Component_Toolmf_SYS.INSTALLED $THEN\n      IF (newrec_.used_in_manufacturing = Fnd_Boolean_API.DB_FALSE AND oldrec_.used_in_manufacturing = Fnd_Boolean_API.DB_TRUE\n      AND Validate_SYS.Is_Changed(oldrec_.used_in_manufacturing, newrec_.used_in_manufacturing)) THEN\n         IF (newrec_.resource_type = Resource_Types_API.DB_EQUIPMENTGROUP) THEN\n            IF (manuf_ext_resource_ IS NOT NULL) THEN\n            END IF;\n         END IF;\n      END IF;\n   IF (update_group_connection_ = Fnd_Boolean_API.DB_TRUE AND update_connections_ = Fnd_Boolean_API.DB_TRUE) THEN\n      IF (newrec_.resource_type != Resource_Types_API.DB_STRUCTURE) THEN\n         Resource_Connection_API.New_Or_Modify_ (resource_seq_           => newrec_.resource_seq,\n      END IF;\n   END IF;\n   IF (newrec_.resource_type = Resource_Types_API.DB_MACHINEGROUP) THEN\n      IF (newrec_.used_in_manufacturing  = Fnd_Boolean_API.DB_TRUE AND\n          Validate_SYS.Is_Changed (oldrec_.used_in_manufacturing, newrec_.used_in_manufacturing)) THEN\n         IF (contract_ IS NOT NULL) THEN\n            $IF Component_Mfgstd_SYS.INSTALLED $THEN\n            IF NOT (newrec_.resource_origin = 'WorkCenter' AND newrec_.origin_key1 IS NOT NULL AND newrec_.origin_key2 IS NOT NULL ", "original_code_length": 17319, "summary": null}
{"id": "ShopOrd_Receive_Part__", "context": {"api_name": "ShopOrd", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrd", "function_name": "Receive_Part__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 474, "code_lines": 426, "cyclomatic_complexity": 133, "estimated_tokens": 2258.1}, "pagerank_score": 0.0004448930294890243, "truncation_metadata": {"original_length": 26369, "truncated_length": 1638, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.062118396602070615}}, "code": "PROCEDURE Receive_Part__ (\n   info_                        OUT    NOCOPY VARCHAR2,\n   lot_batch_no_                IN OUT NOCOPY VARCHAR2,\n   expiration_date_             IN OUT NOCOPY DATE,\n   order_no_                    IN            VARCHAR2,\n   release_no_                  IN            VARCHAR2,\n   sequence_no_                 IN            VARCHAR2,\n   contract_                    IN            VARCHAR2,\n   part_no_                     IN            VARCHAR2,\n   location_no_                 IN            VARCHAR2,\n   serial_no_                   IN            VARCHAR2,\n   eng_chg_level_               IN            VARCHAR2,\n-- ... key business logic ...\n      IF (local_location_no_ IS NULL) THEN\n         Error_SYS.Record_General(lu_name_, 'NODEFLOCATION: Part must have a location specified to be received.');\n      END IF;\n   END IF;\n   -- Add a check for material allocations before allowing to receive.\n   IF (Shop_Material_Alloc_List_API.Exist_Any_Allocs(order_no_, release_no_, sequence_no_) = 0)THEN\n   END IF;\n   IF (received_part_source_ NOT IN (by_product_, disassembly_component_, co_product_) AND NOT (Inventory_Part_API.Get_Type_Code_Db(contract_, part_no_) IN (Inventory_Part_Type_API.DB_PURCHASED__RAW_, Inventory_Part_Type_API.DB_PURCHASED))) THEN\n      IF (rec_.order_code = 'F') THEN\n      ELSE\n      END IF;\n      IF ((effective_status_ = 'NO_EFFECT') AND (rec_.mro_int_ord_header IS NULL) AND (rec_.order_code != 'T') AND (rec_.demand_code NOT IN ('PJD'))) THEN\n         Shop_Ord_Util_API.Insert_To_Temp_Table(order_no_, release_no_, sequence_no_, part_no_, 'ShopOrd', 'WARNING', NULL, NULL, message_);", "original_code_length": 26369, "summary": null}
{"id": "AccessAttribute_Check_Access_Person", "context": {"api_name": "AccessAttribute", "module": "person", "file_summary": "Business logic and data operations - AccessAttribute", "function_name": "Check_Access_Person", "previous_function": "Check_Access", "next_function": null, "complexity_metrics": {"total_lines": 388, "code_lines": 345, "cyclomatic_complexity": 132, "estimated_tokens": 1844.7}, "pagerank_score": 0.0003611978968580303, "truncation_metadata": {"original_length": 22258, "truncated_length": 1640, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07368137298948693}}, "code": "PROCEDURE Check_Access_Person (\n   lu_name_              IN VARCHAR2,\n   old_attr_             IN VARCHAR2,\n   new_attr_             IN VARCHAR2,\n   attr_acc_names_       IN VARCHAR2,\n   access_own_person_id_ IN VARCHAR2 DEFAULT '1',\n   check_hr_mgr_         IN VARCHAR2 DEFAULT '1' )\nIS\n   person_id_col_              VARCHAR2(30);                        \n   trans_date_col_              VARCHAR2(30);\n   old_person_id_              VARCHAR2(30); \n   old_trans_date_              DATE; \n-- ... key business logic ...\n               any_loop_entry_ := TRUE;\n               IF (Business_Unit_Utils_API.Parse_Parameter(new_column_value_, val_rec_.new_value, val_rec_.column_type) = 'FALSE') THEN\n                  IF (client_value_ IS NULL OR client_value_ = ' ') THEN     \n                  ELSE                        \n                  END IF;\n               ELSE\n               END IF;\n               IF (prev_col_name_ IS NOT NULL AND prev_col_name_ = val_rec_.column_name) THEN\n                  IF ((error_in_prev_ = TRUE AND error_in_current_ = FALSE) OR (error_in_prev_ = FALSE AND error_in_current_ = TRUE)) THEN\n                  END IF;\n               END IF;\n            END LOOP;\n            IF (error_category_ IS NOT NULL) THEN\n            ELSE \n            END IF;\n         END IF;\n      END LOOP;\n      IF (NOT any_loop_entry_ AND (data_access_attr_ IS NOT NULL OR own_data_attr_ IS NOT NULL)) THEN\n      END IF;\n      IF (NOT test_passed_ AND recorded_error_category_ IS NOT NULL) THEN\n         IF (recorded_error_category_ = 'NO_ACC_TO_PERS_REG') THEN \n         ELSIF (recorded_error_category_ = 'REG_WRONG_EMPTY_VAL')THEN", "original_code_length": 22258, "summary": null}
{"id": "CustomerOrder_Check_Insert___", "context": {"api_name": "CustomerOrder", "module": "order", "file_summary": "Customer order management and processing - CustomerOrder", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 272, "code_lines": 225, "cyclomatic_complexity": 131, "estimated_tokens": 1394.9}, "pagerank_score": 0.00040705859298745993, "truncation_metadata": {"original_length": 13588, "truncated_length": 1632, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.12010597586105387}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT customer_order_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                  VARCHAR2(30);\n   value_                 VARCHAR2(4000);\n   company_               VARCHAR2(20);\n   source_order_          VARCHAR2(5) := NULL;\n   acquisition_company_   VARCHAR2(20);\n   pick_inventory_type_   CUSTOMER_ORDER_TAB.pick_inventory_type%TYPE;\n   shipment_creation_     BOOLEAN := FALSE;\n-- ... key business logic ...\n   IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'DISC_PRICE_ROUNDED') = true_) THEN\n   ELSE\n   END IF;\n   IF(newrec_.use_delivery_doc_address IS NULL)THEN\n   END IF;\n   Error_SYS.Check_Valid_Key_String('ORDER_NO', newrec_.order_no);\n   IF(newrec_.global_address_id IS NOT NULL)THEN\n      Client_SYS.Add_Info(lu_name_, 'ADDNEWGA: Delivery will be made to the selected Global Address using Single Occurrence functionality');\n   END IF;\n   IF (indrec_.customer_no) AND (trunc(customer_rec_.date_del) <= site_date_) THEN\n      Error_SYS.Record_General(lu_name_, 'DATE_EXP_ERROR: Customer has expired. Check expire date.');\n   END IF;\n   IF (indrec_.customer_no_pay) AND (trunc(customer_no_pay_rec_.date_del) <= site_date_) THEN\n      Error_SYS.Record_General(lu_name_, 'DATE_EXP_ERROR_PAY: Payer has expired. Check expire date.');\n   END IF;\n   IF (newrec_.picking_leadtime != trunc(newrec_.picking_leadtime)) OR (newrec_.picking_leadtime < 0) THEN\n   END IF;\n   IF (customer_rec_.category = 'I') THEN\n      IF ((company_ = acquisition_company_) AND (customer_rec_.acquisition_site = newrec_.contract)) THEN\n      END IF;", "original_code_length": 13588, "summary": null}
{"id": "PurchaseOrderLinePart_Insert___", "context": {"api_name": "PurchaseOrderLinePart", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrderLinePart", "function_name": "Insert___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 463, "code_lines": 427, "cyclomatic_complexity": 129, "estimated_tokens": 1913.6000000000001}, "pagerank_score": 0.0004538509940328695, "truncation_metadata": {"original_length": 28435, "truncated_length": 1633, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.05742922454721294}}, "code": "PROCEDURE Insert___ (\n   objid_       OUT    VARCHAR2,\n   objversion_  OUT    VARCHAR2,\n   newrec_      IN OUT PURCHASE_ORDER_LINE_TAB%ROWTYPE,\n   attr_        IN OUT VARCHAR2 )\nIS\n   exist_flag_                 NUMBER;\n   head_pre_accounting_id_     NUMBER;\n   is_inv_part_                NUMBER;   \n   header_company_             VARCHAR2(20);\n   line_company_               VARCHAR2(20);\n   blanket_number_             VARCHAR2(12) := NULL;\n-- ... key business logic ...\n      END IF;\n      IF ((blanket_number_ IS NOT NULL) AND (newrec_.condition_code IS NULL)) THEN\n         Client_SYS.Add_Info(lu_name_, 'DIFFBLANKET: The price freeze flag has been activated. The line will not be considered in the consolidated price calculation.' );\n      END IF;\n   END IF;\n   IF newrec_.activity_seq IS NOT NULL AND newrec_.activity_seq > 0 THEN\n   END IF;\n   Purchase_Order_Line_API.Validate_Address_Flags(newrec_, purch_order_rec_);\n   $IF (Component_Ecoman_SYS.INSTALLED) $THEN\n      IF (Client_SYS.Item_Exist('INQUIRY_NO', attr_)) THEN\n      END IF;\n      IF (newrec_.requisition_no IS NULL AND inquiry_no_ IS NULL AND (server_data_change_ IS NULL OR server_data_change_ = 1)) THEN\n                                                                  newrec_.emission_modified_date,\n         IF (newrec_.emission_per_unit IS NOT NULL) THEN\n         END IF;\n      END IF;\n   IF newrec_.warranty_id IS NOT NULL THEN\n   END IF;\n   IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('USE_WAREHOUSE_ADDRESS', attr_)) THEN\n   ELSE\n                                                                 'INSERT',", "original_code_length": 28435, "summary": null}
{"id": "PurchaseOrderLine_Check_Update___", "context": {"api_name": "PurchaseOrderLine", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrderLine", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 342, "code_lines": 314, "cyclomatic_complexity": 128, "estimated_tokens": 1705.6000000000001}, "pagerank_score": 0.0003707967412740005, "truncation_metadata": {"original_length": 20624, "truncated_length": 1633, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07917959658650116}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     purchase_order_line_tab%ROWTYPE,\n   newrec_ IN OUT purchase_order_line_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   newrevision_                  NUMBER;\n   confirm_with_differences_     VARCHAR2(30);\n   rec_                          Purchase_Order_API.Public_Rec;   \n   info_                         VARCHAR2(2000);\n   objversion_                   PURCHASE_ORDER_LINE.objversion%TYPE;   \n   old_planned_delivery_date_    DATE;\n-- ... key business logic ...\n   IF (newrec_.cancel_reason IS NULL AND indrec_.cancel_reason) THEN\n   END IF;\n   Restrict_Po_Line__(prj_conn_update_ok_with_poco_, newrec_, oldrec_, 'UPDATE', server_data_change_, empty_cancel_reason_, attr_, fetch_ext_tax_manually_);\n   --Note: Check Freeze Flag\n   IF (newrec_.freeze_flag IS NULL) THEN\n   END IF;\n   IF (newrec_.address_id IS NULL) AND (newrec_.addr_flag = 'N') AND newrec_.default_addr_flag = 'N' THEN\n   END IF;\n   IF (NVL(newrec_.default_addr_flag, 'N') = 'Y') THEN\n      IF NVL(newrec_.project_address,'N') = 'N' AND NVL(rec_.project_Address_flag, 'N') = 'N' THEN\n      END IF;\n   END IF;\n   IF (newrec_.automatic_invoice = 'AUTO') THEN\n      -- IF the PO header supplier's site's company and the PO line site's company are equal or if the PO line invoicing supplier's site's company\n      IF ((line_company_ = NVL(Site_API.Get_Company(Supplier_API.Get_Acquisition_Site(rec_.vendor_no)), string_null_)) OR\n          (line_company_ = NVL(Site_API.Get_Company(Supplier_API.Get_Acquisition_Site(newrec_.invoicing_supplier)), string_null_))) THEN\n      END IF;\n   END IF;", "original_code_length": 20624, "summary": null}
{"id": "AccessAttribute_Check_Access_Org", "context": {"api_name": "AccessAttribute", "module": "person", "file_summary": "Business logic and data operations - AccessAttribute", "function_name": "Check_Access_Org", "previous_function": null, "next_function": "Check_Access", "complexity_metrics": {"total_lines": 380, "code_lines": 347, "cyclomatic_complexity": 128, "estimated_tokens": 1848.6000000000001}, "pagerank_score": 0.0003611978968580303, "truncation_metadata": {"original_length": 22470, "truncated_length": 1690, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07521139296840232}}, "code": "PROCEDURE Check_Access_Org (\n   lu_name_           IN VARCHAR2,\n   old_attr_          IN VARCHAR2,\n   new_attr_          IN VARCHAR2,\n   attr_acc_names_    IN VARCHAR2 )\nIS\n   struct_id_col_  VARCHAR2(30);\n   org_code_col_ VARCHAR2(2000);  \n   trans_date_col_ VARCHAR2(30);\n   old_struct_id_ VARCHAR2(30); \n   old_org_code_ VARCHAR2(30); \n   old_trans_date_ DATE; \n-- ... key business logic ...\n               IF (Business_Unit_Utils_API.Parse_Parameter(new_column_value_, val_rec_.new_value, val_rec_.column_type) = 'FALSE') THEN\n                  IF (client_value_ IS NULL OR client_value_ = ' ') THEN     \n                  ELSE                        \n                  END IF;\n               ELSE\n               END IF;\n               IF (prev_col_name_ IS NOT NULL AND prev_col_name_ = val_rec_.column_name) THEN\n                  IF ((error_in_prev_ = TRUE AND error_in_current_ = FALSE) OR (error_in_prev_ = FALSE AND error_in_current_ = TRUE)) THEN\n                  END IF;\n               END IF;\n            END LOOP;\n            IF (error_category_ IS NOT NULL) THEN\n            ELSE \n            END IF;\n         END IF;\n      END LOOP;\n      IF (NOT any_loop_entry_ AND data_access_attr_ IS NOT NULL) THEN\n      END IF;\n      IF (NOT test_passed_ AND recorded_error_category_ IS NOT NULL) THEN\n         IF (recorded_error_category_ = 'NO_ACC_TO_ORG_REG') THEN \n         ELSIF (recorded_error_category_ = 'REG_WRONG_EMPTY_VAL')THEN\n         ELSIF (recorded_error_category_ = 'REG_WRONG_VAL')THEN\n         ELSE\n         END IF;\n      END IF;\n   ELSIF (operation_ = 'MOD') THEN\n      -- Retrieving the new_company_id, new_org_bu_id, new_org_code and new_trans_date (MODIFICATION)", "original_code_length": 22470, "summary": null}
{"id": "PartSerialCatalog_Check_Dimension_Dependency___", "context": {"api_name": "PartSerialCatalog", "module": "partca", "file_summary": "Customer order management and processing - PartSerialCatalog", "function_name": "Check_Dimension_Dependency___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 177, "code_lines": 177, "cyclomatic_complexity": 127, "estimated_tokens": 850.2}, "pagerank_score": 0.0005126034733078725, "truncation_metadata": {"original_length": 8365, "truncated_length": 1698, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.20298864315600718}}, "code": "PROCEDURE Check_Dimension_Dependency___ (\n   part_no_   IN VARCHAR2,\n   serial_no_ IN VARCHAR2 )\nIS\n   rec_                  part_serial_catalog_tab%ROWTYPE;\n   InvalidCurPos         EXCEPTION;\n   InvalidCombStatus     EXCEPTION;\n   InvalidCombCondition  EXCEPTION;\nBEGIN\n   rec_ := Get_Object_By_Keys___(part_no_, serial_no_);\n   IF (rec_.rowstate  = 'Unlocated') THEN\n      IF (rec_.operational_status = 'PLANNED_FOR_OP') THEN\n-- ... key business logic ...\n      IF (rec_.operational_status = 'IN_OPERATION') THEN\n         IF (rec_.operational_condition != 'OPERATIONAL') THEN\n            RAISE InvalidCombCondition;\n         END IF;\n      ELSIF (rec_.operational_status = 'OUT_OF_OPERATION') THEN\n         IF (rec_.operational_condition NOT IN ('OPERATIONAL', 'NON_OPERATIONAL')) THEN\n            RAISE InvalidCombCondition;\n         END IF;\n      ELSIF (rec_.operational_status = 'PLANNED_FOR_OP') THEN\n         IF (rec_.operational_condition NOT IN ('OPERATIONAL', 'NON_OPERATIONAL')) THEN\n            RAISE InvalidCombCondition;\n         END IF;\n      ELSIF (rec_.operational_status = 'SCRAPPED') THEN\n         IF (rec_.operational_condition != 'NON_OPERATIONAL') THEN\n            RAISE InvalidCombCondition;\n         END IF;\n      ELSE\n         RAISE InvalidCombStatus;\n      END IF;\n   ELSIF (rec_.rowstate  = 'InRepairWorkshop') THEN\n      IF (rec_.operational_status = 'OUT_OF_OPERATION') THEN\n         IF (rec_.operational_condition NOT IN ('OPERATIONAL', 'NON_OPERATIONAL')) THEN\n            RAISE InvalidCombCondition;\n         END IF;\n      ELSIF (rec_.operational_status = 'PLANNED_FOR_OP') THEN\n         IF (rec_.operational_condition NOT IN ('OPERATIONAL', 'NON_OPERATIONAL')) THEN", "original_code_length": 8365, "summary": null}
{"id": "PurchaseOrderLinePart_Build_Attr_For_New_Line___", "context": {"api_name": "PurchaseOrderLinePart", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrderLinePart", "function_name": "Build_Attr_For_New_Line___", "previous_function": null, "next_function": "Validate___", "complexity_metrics": {"total_lines": 434, "code_lines": 418, "cyclomatic_complexity": 127, "estimated_tokens": 1786.2}, "pagerank_score": 0.0004538509940328695, "truncation_metadata": {"original_length": 22869, "truncated_length": 1637, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07158161703616249}}, "code": "PROCEDURE Build_Attr_For_New_Line___ (\n   attr_                      OUT VARCHAR2,\n   order_no_                  IN  VARCHAR2,\n   line_no_                   IN  VARCHAR2,\n   release_no_                IN  VARCHAR2,\n   part_no_                   IN  VARCHAR2,\n   contract_                  IN  VARCHAR2,\n   description_               IN  VARCHAR2,\n   buy_qty_due_               IN  NUMBER,\n   buy_unit_meas_             IN  VARCHAR2,\n   unit_meas_                 IN  VARCHAR2,\n   fbuy_unit_price_           IN  NUMBER,\n-- ... key business logic ...\n   END IF;\n   IF (Order_Supply_Type_API.Encode(demand_code_) = Order_Supply_Type_API.db_shop_order AND close_tolerance_ != 0 ) THEN\n   END IF;\n   IF (tech_coordinator_id_ IS NULL) THEN\n   ELSE\n   END IF;   Client_SYS.Add_To_Attr('NOTE_ID', note_id_, attr_);\n   IF(requisition_no_ IS NOT NULL) THEN\n   ELSE\n   END IF;\n   IF (demand_order_ref1_ IS NOT NULL) THEN\n   ELSE\n      IF (Order_Supply_Type_API.Encode(demand_code_) = Order_Supply_Type_API.db_dop_order) THEN\n      END IF;\n   END IF;\n   IF (address_id_ IS NULL) THEN\n   ELSE\n   END IF;\n   IF NOT (rental_attr_ IS NULL AND ext_tax_calc_method_ = External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL) THEN\n   END IF;\n   IF (part_ownership_ IS NOT NULL) THEN\n   END IF;\n   IF (owner_ IS NOT NULL) THEN\n   END IF;\n   IF (Order_Supply_Type_API.Encode(demand_code_) IN (Order_Supply_Type_API.DB_INT_CUST_DIR, Order_Supply_Type_API.DB_CUST_ORDER_DIR)) THEN\n   ELSE\n   END IF;\n   IF (Order_Supply_Type_API.Encode(demand_code_) = Order_Supply_Type_API.db_shop_order) THEN\n      IF (demand_order_code_ IS NOT NULL) THEN\n      ELSE\n      END IF;", "original_code_length": 22869, "summary": null}
{"id": "InventoryTransactionHist_Call_Lot_Batch_Master__", "context": {"api_name": "InventoryTransactionHist", "module": "invent", "file_summary": "Customer order management and processing - InventoryTransactionHist", "function_name": "Call_Lot_Batch_Master__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 400, "code_lines": 397, "cyclomatic_complexity": 127, "estimated_tokens": 3395.6}, "pagerank_score": 0.00037295383025560285, "truncation_metadata": {"original_length": 39476, "truncated_length": 1636, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.04144290201641504}}, "code": "PROCEDURE Call_Lot_Batch_Master__ (\n   transaction_code_          IN VARCHAR2,\n   contract_                  IN VARCHAR2,\n   part_no_                   IN VARCHAR2,\n   location_no_               IN VARCHAR2,\n   lot_batch_no_              IN VARCHAR2,\n   source_ref1_               IN VARCHAR2,\n   source_ref2_               IN VARCHAR2,\n   source_ref3_               IN VARCHAR2,\n   source_ref4_               IN VARCHAR2,\n   source_ref5_               IN VARCHAR2,\n   reject_code_               IN VARCHAR2,\n-- ... key business logic ...\n   ELSIF original_trans_code_ IN ('UN-PURSHIP','UN-PURBKFL','PD-UNSHIP', 'RRMA-UNSHP') THEN\n      IF (original_trans_code_ = 'PD-UNSHIP') THEN\n      ELSIF(original_trans_code_ = 'RRMA-UNSHP') THEN\n      ELSE\n      END IF;\n   ELSIF original_trans_code_ IN ('PURDIR', 'INTPURDIR') THEN\n   ELSIF original_trans_code_ = 'EXCH-SHIP' THEN\n   ELSIF original_trans_code_ IN ('UNRCPT-','RRMA-UNARR') THEN\n      IF Lot_Batch_Master_API.Check_Exist(part_no_, lot_batch_no_) = true_ THEN\n      END IF;\n   ELSIF original_trans_code_ IN ('UNRC-ARRTR') THEN\n   ELSIF original_trans_code_ IN ('UNR-SHPODS', 'UNR-SHPODW') THEN\n   ELSIF original_trans_code_ IN ('OERET-INT', 'RETSHIPDIR') THEN\n   ELSIF original_trans_code_ IN ('OERET-SINT', 'RETDIR-SCP') THEN\n   ELSIF original_trans_code_ = 'RETCREDIT' THEN\n   ELSIF original_trans_code_ IN ('RETWORK','RETWORKINT') THEN\n   ELSIF original_trans_code_ IN ('RETCORWORK','RETCORWINT') THEN\n   ELSIF original_trans_code_ = 'RETCORCRE' THEN\n   ELSIF original_trans_code_ IN ('PODIRSH','INTPODIRSH') THEN\n   ELSIF original_trans_code_ IN ('POUNDIRSH','UNINTPODIR') THEN", "original_code_length": 39476, "summary": null}
{"id": "Invoice_Prep_Modify_Invoice_Head___", "context": {"api_name": "Invoice", "module": "invoic", "file_summary": "Customer order management and processing - Invoice", "function_name": "Prep_Modify_Invoice_Head___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 242, "code_lines": 242, "cyclomatic_complexity": 126, "estimated_tokens": 1099.8}, "pagerank_score": 0.0005004638579440837, "truncation_metadata": {"original_length": 12091, "truncated_length": 1697, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.14035232817798363}}, "code": "PROCEDURE Prep_Modify_Invoice_Head___ (\n   attr_                IN OUT VARCHAR2,\n   old_rec_             OUT    invoice_rec_,   \n   modify_              OUT    BOOLEAN,\n   creator_             IN     VARCHAR2 )\nIS \n   ptr_                    NUMBER;\n   name_                   VARCHAR2(30);\n   value_                  VARCHAR2(4000);\n   modify_attr_            VARCHAR2(32000);      \n   delivery_identity_      VARCHAR2(100);\n   identity_               VARCHAR2(200);\n-- ... key business logic ...\n      IF (objversion_ IS NOT NULL) THEN\n      END IF;\n   END IF;\n   IF (creator_ IN ('INSTANT_INVOICE_API', 'OUTGOING_SUPPLIER_INVOICE_API')) AND (Invoice_Item_API.Check_Object_Items_Exist(company_, invoice_id_) = 'FALSE') THEN\n   END IF;\n   -- fetch items for call to Modify\n   Client_SYS.Clear_Attr(modify_attr_);\n   WHILE (Client_SYS.Get_Next_From_Attr(attr_,ptr_,name_,value_)) LOOP\n      IF (name_ = 'COMPANY') THEN\n      ELSIF (name_ = 'IDENTITY') THEN\n      ELSIF (name_ = 'IDENTITY') THEN\n      ELSIF (name_ = 'PARTY_TYPE') THEN\n      ELSIF (name_ = 'INVOICE_ID') THEN\n      ELSIF (name_ = 'INVOICE_NO') THEN\n      ELSIF (name_ = 'SERIES_ID') THEN\n      ELSIF (name_ = 'INVOICE_TYPE') THEN\n      ELSIF (name_ = 'CURRENCY') THEN\n         IF (curr_code_rate_editable_) THEN\n            Client_SYS.Add_To_Attr('CURRENCY', value_, modify_attr_);\n         END IF;   \n      ELSIF (name_ = 'CURR_RATE') THEN\n         IF (curr_code_rate_editable_) THEN\n            Client_SYS.Add_To_Attr('CURR_RATE', value_, modify_attr_);\n         END IF;   \n      ELSIF (name_ = 'DIV_FACTOR') THEN\n         IF (curr_code_rate_editable_) THEN\n            Client_SYS.Add_To_Attr('DIV_FACTOR', value_, modify_attr_);", "original_code_length": 12091, "summary": null}
{"id": "PurchaseOrderLine_Update___", "context": {"api_name": "PurchaseOrderLine", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrderLine", "function_name": "Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 255, "code_lines": 237, "cyclomatic_complexity": 126, "estimated_tokens": 1216.8}, "pagerank_score": 0.0003707967412740005, "truncation_metadata": {"original_length": 16054, "truncated_length": 1702, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10601719197707736}}, "code": "PROCEDURE Update___ (\n   objid_      IN     VARCHAR2,\n   oldrec_     IN     PURCHASE_ORDER_LINE_TAB%ROWTYPE,\n   newrec_     IN OUT PURCHASE_ORDER_LINE_TAB%ROWTYPE,\n   attr_       IN OUT VARCHAR2,\n   objversion_ IN OUT VARCHAR2,\n   by_keys_    IN     BOOLEAN DEFAULT FALSE )\nIS\n   header_company_          VARCHAR2(20);\n   temp_addr_flag_          VARCHAR2(1);\n   header_addr_flag_        VARCHAR2(1);\n   new_total_line_amount_   NUMBER := 0;\n-- ... key business logic ...\n   END IF;\n   -- if it is the bulk update PO line operation, we stop the authorisation validation to gain performance improvement.\n   -- So it needs to check this validation once after the bulk update done in calling place.\n   bulk_update_po_line_ := NVL(Client_SYS.Get_Item_Value('BULK_UPDATE_PO_LINE', attr_), 'FALSE');\n   IF (header_cancel_ = 'FALSE') THEN\n      IF (bulk_update_po_line_ = 'FALSE') THEN\n      END IF;\n      IF (NVL(new_total_line_amount_,0) != NVL(old_total_line_amount_,0)) THEN\n         IF (Purchase_Order_Approval_API.Any_Lines_Approved(newrec_.order_no, '*') = 'TRUE') THEN\n            -- IF a rule has been fetched\n            IF app_rule_ IS NOT NULL THEN\n            ELSE\n               -- IF manually selected routing template\n               IF manual_template_id_ IS NOT NULL THEN\n               END IF;\n            END IF;\n            IF (allow_changes_to_po_db_ = 'NO_CHANGES_ALLOWED') THEN\n            END IF;\n         END IF;\n      END IF;\n   END IF;\n   confirmation_type_ := Client_SYS.Get_Item_Value('CONFIRM_WITH_DIFFERENCES', attr_);\n   IF (confirmation_type_ IS NULL OR confirmation_type_ != 'CONFIRM_VIA_POCO') THEN\n      IF (header_cancel_ = 'FALSE' AND bulk_update_po_line_ = 'FALSE') THEN", "original_code_length": 16054, "summary": null}
{"id": "InventoryPartInStock_Create_Data_Capture_Lov", "context": {"api_name": "InventoryPartInStock", "module": "invent", "file_summary": "Customer order management and processing - InventoryPartInStock", "function_name": "Create_Data_Capture_Lov", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 349, "code_lines": 336, "cyclomatic_complexity": 122, "estimated_tokens": 1853.8}, "pagerank_score": 0.000439514728940585, "truncation_metadata": {"original_length": 24443, "truncated_length": 1702, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.06963138730925009}}, "code": "PROCEDURE Create_Data_Capture_Lov (\n   contract_                   IN VARCHAR2,\n   part_no_                    IN VARCHAR2,\n   configuration_id_           IN VARCHAR2,\n   location_no_                IN VARCHAR2,\n   lot_batch_no_               IN VARCHAR2,\n   serial_no_                  IN VARCHAR2,\n   eng_chg_level_              IN VARCHAR2,\n   waiv_dev_rej_no_            IN VARCHAR2,\n   activity_seq_               IN NUMBER,\n   handling_unit_id_           IN NUMBER,\n   alt_handling_unit_label_id_ IN VARCHAR2,  -- send '%' if this item have not been entered/scanned yet\n-- ... key business logic ...\n      END IF;      \n      IF (sql_where_expression_ IS NOT NULL) THEN\n      END IF;\n      IF (lov_type_db_  = Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN\n         -- Don't use DISTINCT select for AUTO PICK \n         stmt_ := 'SELECT ' || column_name_ || stmt_ || ' ORDER BY Utility_SYS.String_To_Number(' || column_name_ || '), ' || column_name_ || ' ASC' ;\n      ELSE\n         stmt_ := 'SELECT DISTINCT ' || column_name_ || stmt_ || ' ORDER BY Utility_SYS.String_To_Number(' || column_name_ || '), ' || column_name_ || ' ASC';\n      END IF;\n      IF (lov_type_db_  = Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN\n      ELSE\n      END IF;\n      IF (lov_value_tab_.COUNT > 0) THEN\n            WHEN ('PART_NO') THEN\n            WHEN ('LOCATION_NO') THEN\n            WHEN ('HANDLING_UNIT_ID') THEN\n            WHEN ('SSCC') THEN\n            WHEN ('ALT_HANDLING_UNIT_LABEL_ID') THEN\n            WHEN ('ACTIVITY_SEQ') THEN\n            ELSE\n         FOR i IN lov_value_tab_.FIRST..lov_value_tab_.LAST LOOP\n            IF (lov_type_db_ != Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN              ", "original_code_length": 24443, "summary": null}
{"id": "BusinessUnit_Check_Update___", "context": {"api_name": "BusinessUnit", "module": "person", "file_summary": "Business logic and data operations - BusinessUnit", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 434, "code_lines": 397, "cyclomatic_complexity": 122, "estimated_tokens": 1937.0}, "pagerank_score": 0.00034881921478185603, "truncation_metadata": {"original_length": 19912, "truncated_length": 1658, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08326637203696263}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     business_unit_tab%ROWTYPE,\n   newrec_ IN OUT business_unit_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_  VARCHAR2(30);\n   value_ VARCHAR2(4000);\n   current_comp_id_  BUSINESS_UNIT_TAB.company_id%TYPE;\n   code_b_        company_org_tab.code_b%TYPE := '-';\n   code_c_        company_org_tab.code_c%TYPE := '-';\n   code_d_        company_org_tab.code_d%TYPE := '-';\n-- ... key business logic ...\n   CURSOR cu_pos_sup_valid_to(pos_code_ VARCHAR2, business_unit_id_ NUMBER) IS\n      SELECT MAX(LEAST(b.valid_to,a.struct_valid_to))\n   IF newrec_.company_id IS NOT NULL AND newrec_.business_unit_type NOT IN  ('POSITION','ORGANIZATION') THEN\n      IF indrec_.dir_sup_logic = FALSE THEN\n      END IF;\n   END IF;\n   IF (Client_SYS.Item_Exist('ORG_TERM_TYPE', attr_)) THEN\n      Organization_Term_API.Check_Exist(newrec_.org_term_id);\n   END IF;\n   IF (Client_SYS.Item_Exist('ORG_NAME', attr_)) THEN\n   END IF;\n   IF newrec_.pos_code IS NOT NULL THEN\n   END IF;   \n   IF (Client_SYS.Item_Exist('POSITION_TITLE', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('POS_CAT', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('ASSIGNED_PROTECTED', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('EXCLUDE_FROM_EXPORT', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('EXCLUDE_FROM_ORG_CHART', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('EXPORT_EMPLOYEES', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_B', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_C', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_D', attr_)) THEN", "original_code_length": 19912, "summary": null}
{"id": "DataCaptConfDataItem_Get_Next_Loop_Start_Item___", "context": {"api_name": "DataCaptConfDataItem", "module": "wadaco", "file_summary": "Business logic and data operations - DataCaptConfDataItem", "function_name": "Get_Next_Loop_Start_Item___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 102, "code_lines": 95, "cyclomatic_complexity": 119, "estimated_tokens": 681.2}, "pagerank_score": 0.0005365311518687165, "truncation_metadata": {"original_length": 6375, "truncated_length": 1705, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.26745098039215687}}, "code": "FUNCTION Get_Next_Loop_Start_Item___(\n   capture_session_id_  IN NUMBER,\n   capture_process_id_  IN VARCHAR2,\n   capture_config_id_   IN NUMBER,\n   data_item_id_        IN VARCHAR2,\n   autopick_exception_  IN BOOLEAN ) RETURN Public_Rec         -- send in FALSE if no execption for auto pick LOV should be done (ie when pressing exit loop button)\nIS\n   first_loop_start_item_order_    DATA_CAPT_CONF_DATA_ITEM_TAB.data_item_order%TYPE; \n   data_item_order_                DATA_CAPT_CONF_DATA_ITEM_TAB.data_item_order%TYPE;\n   valid_loop_start_item_found_    BOOLEAN := FALSE;\n   next_loop_start_data_item_      Public_Rec;\n   process_package_                VARCHAR2(30);\n-- ... key business logic ...\n      SELECT data_item_id, list_of_values\n       AND   loop_start = Fnd_Boolean_API.DB_TRUE\n       AND   data_item_order BETWEEN first_loop_start_item_order_ AND data_item_order_\n      ORDER BY data_item_order DESC;   -- we are going backwards from the \"last\" loop item to first loop item only fetching loop starts\n   OPEN get_first_loop_start_item;\n   FETCH get_first_loop_start_item INTO first_loop_start_item_order_;\n   CLOSE get_first_loop_start_item;\n   OPEN  get_loop_start_items;\n   FETCH get_loop_start_items BULK COLLECT INTO loop_start_data_items_;\n   CLOSE get_loop_start_items;\n   IF (loop_start_data_items_.COUNT > 0) THEN\n      -- Loop around all loop start items to find next valid loop start item to auto exit loop structures that don't have loop start item set by server side functionality automatically\n      LOOP\n         -- Continue search for valid loop start item if the (optional) process implementation says that current loop start item should not continue the configuration loop", "original_code_length": 6375, "summary": null}
{"id": "CustomerOrderLine_Get_Line_Defaults___", "context": {"api_name": "CustomerOrderLine", "module": "order", "file_summary": "Customer order management and processing - CustomerOrderLine", "function_name": "Get_Line_Defaults___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 468, "code_lines": 427, "cyclomatic_complexity": 118, "estimated_tokens": 1930.5}, "pagerank_score": 0.0003574882184538361, "truncation_metadata": {"original_length": 27250, "truncated_length": 1642, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.06025688073394495}}, "code": "PROCEDURE Get_Line_Defaults___ (\n   attr_                     IN OUT VARCHAR2,\n   catalog_no_               IN OUT VARCHAR2,\n   order_no_                 IN     VARCHAR2,\n   part_replacement_allowed_ IN     NUMBER )\nIS\n   buy_qty_due_                     NUMBER;\n   currency_rate_                   NUMBER;\n   sale_unit_price_                 NUMBER;\n   unit_price_incl_tax_             NUMBER;\n   base_sale_unit_price_            NUMBER;\n   base_unit_price_incl_tax_        NUMBER;\n-- ... key business logic ...\n   ELSE\n   END IF;\n   IF (cross_rec_.receiving_advice_type != 'USE_CUSTOMER_DEFAULT') THEN\n   ELSE\n   END IF;\n   IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN\n   ELSE\n   END IF;\n   IF (sales_part_rec_.part_no IS NOT NULL) THEN\n      IF (Part_Catalog_API.Get_Condition_Code_Usage_Db(sales_part_rec_.part_no) = 'ALLOW_COND_CODE') THEN\n      END IF;\n   END IF;\n   Customer_Order_Line_API.Validate_Cust_Ord_Lin_Defaults( catalog_no_, catalog_desc_, supply_code_, vendor_no_,\n   IF NOT (Is_External_Service_Order___(demand_code_, demand_order_ref_) = 'TRUE') THEN\n      -- Check if it's a activ inventory part.\n      Check_Active_Part___(header_rec_.contract, sales_part_rec_.part_no);\n   END IF;\n   IF (line_item_no_ > 0 AND activity_seq_ > 0 AND supply_code_ NOT IN ('PD','IPD', 'SO', 'PT', 'ND', 'IPT', 'DOP','SEO') ) THEN\n      IF (catalog_type_ ='INV') THEN\n      ELSIF (catalog_type_ ='NON') THEN\n      END IF;\n   END IF;\n  IF (value_ IS NOT NULL) THEN\n  END IF;\n  IF (value_ IS NOT NULL) THEN\n  END IF;\n   IF (sales_part_rec_.part_no IS NULL) THEN\n   ELSE\n      IF (revised_qty_due_ IS NOT NULL) THEN\n      END IF;\n   END IF;", "original_code_length": 27250, "summary": null}
{"id": "BusinessUnit_Check_Insert___", "context": {"api_name": "BusinessUnit", "module": "person", "file_summary": "Business logic and data operations - BusinessUnit", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 318, "code_lines": 293, "cyclomatic_complexity": 118, "estimated_tokens": 1370.2}, "pagerank_score": 0.00034881921478185603, "truncation_metadata": {"original_length": 13651, "truncated_length": 1668, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.12218885063365321}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT business_unit_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_             VARCHAR2(30);\n   value_            VARCHAR2(4000);\n   org_code_         BUSINESS_UNIT_TAB.org_code%TYPE;\n   sup_org_code_     BUSINESS_UNIT_TAB.org_code%TYPE;\n   sup_org_code_no_  BUSINESS_UNIT_TAB.business_unit_id%TYPE;\n   sup_pos_code_no_  BUSINESS_UNIT_TAB.business_unit_id%TYPE;\n   sup_valid_from_   BUSINESS_UNIT_TAB.valid_from%TYPE;\n-- ... key business logic ...\n   END IF; \n   IF (Client_SYS.Item_Exist('SUP_POS_CODE', attr_)) THEN\n   END IF;   \n   IF (Client_SYS.Item_Exist('POSITION_TITLE', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('JOB_ID', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('POS_CAT', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('ASSIGNED_PROTECTED', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('EXCLUDE_FROM_EXPORT', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('EXCLUDE_FROM_ORG_CHART', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('EXPORT_EMPLOYEES', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_B', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_C', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_D', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_E', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_F', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_G', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_H', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_I', attr_)) THEN\n   END IF;\n   IF (Client_SYS.Item_Exist('CODE_J', attr_)) THEN", "original_code_length": 13651, "summary": null}
{"id": "ShopOrd_Insert___", "context": {"api_name": "ShopOrd", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrd", "function_name": "Insert___", "previous_function": null, "next_function": "Update___", "complexity_metrics": {"total_lines": 325, "code_lines": 300, "cyclomatic_complexity": 117, "estimated_tokens": 1586.0}, "pagerank_score": 0.0004448930294890243, "truncation_metadata": {"original_length": 19171, "truncated_length": 1722, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08982317041364561}}, "code": "PROCEDURE Insert___ (\n   objid_      OUT    VARCHAR2,\n   objversion_ OUT    VARCHAR2,\n   newrec_     IN OUT SHOP_ORD_TAB%ROWTYPE,\n   attr_       IN OUT VARCHAR2 )\nIS\n   local_objid_               ROWID;\n   rout_template_id_          NUMBER;\n   start_operation_no_        NUMBER;\n   source_indicator_          VARCHAR2(30);\n   demand_code_               VARCHAR2(12);\n   project_id_                VARCHAR2(40);\n-- ... key business logic ...\n         ELSIF (shop_prop_type_ = 'PMRP') THEN\n         END IF;\n      ELSIF (demand_code_ IN ('PRJ', 'CT', 'PLD', 'PJD', 'MRO')) THEN\n      END IF;\n   END IF;\n   -- IF a CBS site, then create shop order in the scheduling server\n   $IF Component_Cbsint_SYS.INSTALLED $THEN\n      $IF Component_Proj_SYS.INSTALLED $THEN\n         IF newrec_.activity_seq IS NOT NULL THEN\n         END IF;\n      $ELSE\n         IF newrec_.activity_seq IS NOT NULL THEN\n         END IF;\n      check_contract_ := Scheduling_Site_Config_API.Check_Contract(newrec_.contract);\n      IF (instr(source_, 'CTP^',1,1) > 0) THEN\n      END IF;\n      IF (check_contract_) AND (NOT promise_order_) THEN\n      END IF;\n   $IF Component_Cbsint_SYS.INSTALLED $THEN\n      -- Check and add project and activity object to CBS if this is the first shop order belonging to them.\n      IF ((newrec_.project_id IS NOT NULL) AND (Scheduling_Site_Config_API.Check_Contract(newrec_.contract))) THEN\n      END IF;\n   -- Reserve lot batch number automatically if Order Based lot tracking and One lot per production order\n   -- If many lots allowed, we will not generate the lot batch number.\n   -- Reserved_Lot_Batch_API.Insert_Data should be called for the Main Part before system generates lot batch no for other Manufactured Parts", "original_code_length": 19171, "summary": null}
{"id": "PurchaseOrderLinePart_Modify_Current_Amt_And_Qty___", "context": {"api_name": "PurchaseOrderLinePart", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrderLinePart", "function_name": "Modify_Current_Amt_And_Qty___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 220, "code_lines": 216, "cyclomatic_complexity": 116, "estimated_tokens": 776.1}, "pagerank_score": 0.0004538509940328695, "truncation_metadata": {"original_length": 12137, "truncated_length": 1675, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1380077449122518}}, "code": "PROCEDURE Modify_Current_Amt_And_Qty___ (\n   qty_diff_               IN OUT NUMBER,\n   order_diff_             IN OUT NUMBER,\n   amount_tax_             IN OUT NUMBER,\n   blanket_order_          IN     VARCHAR2,\n   part_no_                IN     VARCHAR2,\n   company_                IN     VARCHAR2,\n   currency_type_          IN     VARCHAR2,\n   order_no_               IN     VARCHAR2,\n   line_no_                IN     VARCHAR2,\n   release_no_             IN     VARCHAR2,\n   message_                IN     VARCHAR2,\n-- ... key business logic ...\n                  qty_diff_,\n         ELSIF ( Supp_Blk_Part_Cum_API.Exist(blanket_order_, blanket_line_, old_start_date_, part_no_)) THEN\n            Supp_Blk_Period_API.Modify_Current_Amount(blanket_order_, old_start_date_, order_diff_, amount_tax_, modify_blk_from_po_);\n            Supp_Blk_Part_Cum_API.Modify_Part_Cumulative(\n                  order_diff_,\n                  qty_diff_,\n         END IF;\n      END IF;\n   ELSIF (agrmt_part_assort_line_ IS NOT NULL) THEN\n      IF ((order_diff_ != 0) OR (qty_diff_ != 0)) THEN\n         Supp_Blk_Period_API.Modify_Current_Amount(blanket_order_, period_date_, order_diff_, amount_tax_, modify_blk_from_po_);\n         Supp_Agrmt_Part_Assortment_API.Update_Current_Amount_And_Qty(blanket_order_,\n                                                                      order_diff_,\n                                                                      qty_diff_);            \n      END IF;\n   ELSE\n      --Note: Update the Assortment Cumulatives\n      IF (assortment_ IS NOT NULL) THEN\n         IF (Supp_Blk_Ass_Cum_API.Assort_Exist(blanket_order_, start_date_, assortment_)) THEN", "original_code_length": 12137, "summary": null}
{"id": "VoucherType_Check_Update___", "context": {"api_name": "VoucherType", "module": "accrul", "file_summary": "Invoice processing and management - VoucherType", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 186, "code_lines": 179, "cyclomatic_complexity": 116, "estimated_tokens": 1019.2}, "pagerank_score": 0.00032959419808291867, "truncation_metadata": {"original_length": 9510, "truncated_length": 1699, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1786540483701367}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     voucher_type_tab%ROWTYPE,\n   newrec_ IN OUT voucher_type_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   attr2_                  VARCHAR2(2000);\n   is_used_                VARCHAR2(5);\n   ledger_id_              VARCHAR2(10);\n   found_                  BOOLEAN := FALSE;\n   exist_                  NUMBER;\n   il_project_accounting_  VARCHAR2(5);\n-- ... key business logic ...\n      END IF;\n   END IF;\n   IF indrec_.ledger_id THEN   \n      $IF Component_Intled_SYS.INSTALLED $THEN\n         IF (oldrec_.ledger_id = '*' AND newrec_.ledger_id <> '*') THEN\n            Internal_Ledger_Util_Pub_API.Delete_Voucher_Il_Postings(newrec_.company, newrec_.voucher_type);\n         END IF;\n      IF (newrec_.ledger_id <> '*' ) THEN\n         IF (is_used_ = 'TRUE') THEN\n         END IF;\n      END IF;\n   END IF;\n   IF indrec_.use_approval_workflow THEN   \n      IF (Voucher_API.Is_Voucher_Type_Used(newrec_.company, newrec_.voucher_type) = 'TRUE') THEN\n         Error_SYS.Record_General(lu_name_,'APPROVALWORKFLOWNOTCHANGE: Use Voucher Approval Workflow check box cannot be modified '||\n      END IF;\n   END IF;      \n   IF (indrec_.ledger_id) THEN   \n      IF (Ledger_API.Get_Ledger_DB(newrec_.ledger_id) = '01') THEN\n      END IF; \n   END IF;\n   IF (indrec_.automatic_allot) THEN\n      IF (newrec_.automatic_allot = 'N' AND Is_Auto_Allotment_Required___(newrec_.company, newrec_.voucher_type) = TRUE) THEN\n      END IF;\n      IF (newrec_.automatic_allot = 'N') THEN\n         Client_SYS.Add_Warning(lu_name_, 'AUTOALLOTRESET: You will not be able to reset Automatic Allotment if the voucher type is already being used.');            ", "original_code_length": 9510, "summary": null}
{"id": "CustomerOrderLine_Pre_Unpack_Insert___", "context": {"api_name": "CustomerOrderLine", "module": "order", "file_summary": "Customer order management and processing - CustomerOrderLine", "function_name": "Pre_Unpack_Insert___", "previous_function": "Check_Before_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 446, "code_lines": 402, "cyclomatic_complexity": 115, "estimated_tokens": 2076.1}, "pagerank_score": 0.0003574882184538361, "truncation_metadata": {"original_length": 29479, "truncated_length": 1634, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.05542928864615489}}, "code": "PROCEDURE Pre_Unpack_Insert___ (\n   attr_      IN OUT VARCHAR2,\n   newrec_    IN OUT CUSTOMER_ORDER_LINE_TAB%ROWTYPE )\nIS\n   site_date_                 DATE;\n   address_rec_               Cust_Ord_Customer_Address_API.Public_Rec;\n   packrec_                   CUSTOMER_ORDER_LINE_TAB%ROWTYPE;\n   company_                   VARCHAR2(20);\n   customer_agreement_        VARCHAR2(20);\n   delivery_terms_            VARCHAR2(5);\n   price_source_              VARCHAR2(200);\n   price_source_db_           CUSTOMER_ORDER_LINE_TAB.Price_Source%TYPE;\n-- ... key business logic ...\n   IF (line_item_no_ > 0) THEN\n      IF (supply_code_db_ NOT IN ('IPD', 'PD')) OR (default_addr_flag_db_ IS NULL) THEN\n      END IF;\n      Client_SYS.Set_Item_Value('TAX_ID_VALIDATED_DATE',packrec_.tax_id_validated_date,      attr_);\n      IF (packrec_.activity_seq IS NOT NULL) THEN\n      END IF;\n   ELSE\n      -- Retrive the ship address if any\n      -- IF no ship address was passed in, retrive the default to deliver to customer.\n      IF (newrec_.ship_addr_no IS NULL) THEN\n      END IF;\n      IF (NVL(newrec_.ship_addr_no, ' ') != order_rec_.ship_addr_no) THEN\n         -- The ship address for the line is different than the one on the order\n      ELSE\n         IF (Client_SYS.Get_Item_Value('EVALUATE_DEFAULT_INFO', attr_) = 'TRUE') THEN\n         END IF;\n         IF (duplicate_line_ OR auto_substitution_allowed_) THEN\n            newrec_.default_addr_flag := Check_Default_Addr_Flag___(temprec_, temprec_.order_no, temprec_.default_addr_flag, duplicate_line_);\n         ELSE\n            -- Check the DB value for default address flag\n         END IF;   ", "original_code_length": 29479, "summary": null}
{"id": "Invoice_Set_Def_Invoice_No__", "context": {"api_name": "Invoice", "module": "invoic", "file_summary": "Customer order management and processing - Invoice", "function_name": "Set_Def_Invoice_No__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 268, "code_lines": 268, "cyclomatic_complexity": 114, "estimated_tokens": 1401.4}, "pagerank_score": 0.0005004638579440837, "truncation_metadata": {"original_length": 14612, "truncated_length": 1695, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.11600054749520941}}, "code": "PROCEDURE Set_Def_Invoice_No__ (\n   company_     IN     VARCHAR2,\n   identity_    IN     VARCHAR2,\n   party_type_  IN     VARCHAR2,\n   tax_invoice_ IN     VARCHAR2,\n   series_id_   IN OUT VARCHAR2,\n   invoice_no_  IN OUT VARCHAR2 )\nIS\n   id_ver_rec_                   Id_Ver_Rec;\n   oldrec_                       invoice_tab%ROWTYPE;\n   newrec_                       invoice_tab%ROWTYPE;\n   new_inv_no_                   invoice_tab.invoice_no%TYPE;\n-- ... key business logic ...\n      END IF;\n   END IF;\n   Validate_Service_Code___ (company_, newrec_.identity, party_type_, newrec_.creator, newrec_.service_code);\n   IF (Company_Invoice_Info_API.Get_Numb_Cust_Inv_Date_Order(company_) = 'TRUE') THEN\n   ELSE\n   END IF;\n   IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'OUTGOING_FISCAL_NOTE') = Fnd_Boolean_API.DB_TRUE AND newrec_.creator IN ('CUSTOMER_ORDER_INV_HEAD_API', 'PROJECT_INVOICE_API')  AND newrec_.invoice_type IN ('CUSTORDDEB', 'CUSTCOLDEB', 'PRJINV', 'CUSTORDCRE', 'CUSTCOLCRE')) THEN\n   ELSE \n      IF (Exist_Open_Inv_For_Identity___(newrec_.company, newrec_.identity, newrec_.party_type, newrec_.series_id, newrec_.invoice_no)) THEN\n         Error_SYS.Appl_General(lu_name_, 'DUPLINV: There already exist an invoice for :P1 with Series ID :P2 and Invoice Number :P3. Please check Invoice Number Series settings in Invoice\\General Invoice\\Invoice Series\\ command Invoice Number Series.', newrec_.identity, newrec_.series_id, newrec_.invoice_no);\n      END IF;\n   END IF;\n   IF (newrec_.creator = 'OUTGOING_SUPPLIER_INVOICE_API') THEN\n   ELSE\n   END IF;\n   IF (party_type_db_ = 'CUSTOMER') THEN\n      Validate_Cash_Account___(company_, id_ver_rec_.invoice_id);", "original_code_length": 14612, "summary": null}
{"id": "StatutoryFee_Check_Common___", "context": {"api_name": "StatutoryFee", "module": "accrul", "file_summary": "Customer order management and processing - StatutoryFee", "function_name": "Check_Common___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 150, "code_lines": 150, "cyclomatic_complexity": 113, "estimated_tokens": 1150.5}, "pagerank_score": 0.0006193637656654021, "truncation_metadata": {"original_length": 10424, "truncated_length": 1673, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.16049501151189563}}, "code": "PROCEDURE Check_Common___ (\n   oldrec_ IN     statutory_fee_tab%ROWTYPE,\n   newrec_ IN OUT statutory_fee_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   currency_code_   VARCHAR2(20);\nBEGIN\n   newrec_.tax_type_category        := NVL(newrec_.tax_type_category, 'NONE');\n   newrec_.tax_factor               := NVL(newrec_.tax_factor, 'NONE');\n   newrec_.tax_in_tax_base          := NVL(newrec_.tax_in_tax_base, 'FALSE');\n   newrec_.diot_tax_classification  := NVL(newrec_.diot_tax_classification, 'NONE');\n-- ... key business logic ...\n   END IF;\n   IF (newrec_.vat_disbursed = Vat_Method_API.DB_FINAL_POSTING) THEN\n   END IF;\n   IF (newrec_.fee_type IN (Fee_Type_API.DB_TAX, Fee_Type_API.DB_CALCULATED_TAX, Fee_Type_API.DB_USE_TAX)) THEN\n      IF (newrec_.vat_disbursed = Vat_Method_API.DB_NO_TAX OR newrec_.vat_received = Vat_Method_API.DB_NO_TAX) THEN\n      END IF;\n   END IF;\n   IF (newrec_.fee_type IN (Fee_Type_API.DB_NO_TAX, Fee_Type_API.DB_TAX_WITHHOLD)) THEN\n      IF (newrec_.tax_amt_limit IS NOT NULL ) THEN\n      END IF;\n   END IF;\n   IF (newrec_.fee_type IN (Fee_Type_API.DB_NO_TAX, Fee_Type_API.DB_USE_TAX)) THEN\n      IF (newrec_.tax_reporting_category IN (Tax_Reporting_Category_API.DB_EU_SERVICES, Tax_Reporting_Category_API.DB_TRIPARTITE_EU_TRADE)) THEN\n      END IF;\n   END IF;   \n   IF (newrec_.fee_type = Fee_Type_API.DB_USE_TAX) THEN\n      IF (newrec_.vat_disbursed = Vat_Method_API.DB_PAYMENT OR newrec_.vat_received = Vat_Method_API.DB_PAYMENT) THEN\n         Error_SYS.Appl_General(lu_name_, 'PAYMTONLYVATWITH: Tax Method :P1 is not valid for the selected Tax Type.', Vat_Method_API.Decode(Vat_Method_API.DB_PAYMENT));", "original_code_length": 10424, "summary": null}
{"id": "Invoice_Create_Voucher_Unposted_Inv_", "context": {"api_name": "Invoice", "module": "invoic", "file_summary": "Customer order management and processing - Invoice", "function_name": "Create_Voucher_Unposted_Inv_", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 308, "code_lines": 308, "cyclomatic_complexity": 111, "estimated_tokens": 1618.5}, "pagerank_score": 0.0005004638579440837, "truncation_metadata": {"original_length": 16682, "truncated_length": 1644, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09854933461215681}}, "code": "FUNCTION Create_Voucher_Unposted_Inv_ (\n   err_msg_ OUT VARCHAR2,\n   attr_    IN  VARCHAR2,\n   creator_ IN  VARCHAR2 ) RETURN BOOLEAN\nIS\n   company_              VARCHAR2(20);\n   identity_             VARCHAR2(200);\n   series_id_            VARCHAR2(20);\n   invoice_no_           VARCHAR2(50);\n   party_type_           VARCHAR2(200);\n   posting_attr_         VARCHAR2(2000);\n   vouch_attr_           VARCHAR2(2000);\n-- ... key business logic ...\n      ELSIF (name_ = 'IDENTITY') THEN\n      ELSIF (name_ = 'PARTY_TYPE') THEN\n      ELSIF (name_ = 'SERIES_ID') THEN\n      ELSIF (name_ = 'INVOICE_NO') THEN\n      ELSIF (name_ = 'USER_GROUP') THEN\n      END IF;\n   END LOOP;\n   IF (Is_Unposted_Error___(head_rec_.company, head_rec_.invoice_id)) THEN\n      Delete_Unposted_Errors___(head_rec_.company, head_rec_.invoice_id);\n   END IF;\n   IF (Is_Prepared_Error___(company_, head_rec_.invoice_id)) THEN\n      Delete_Prepared_Errors___(company_, head_rec_.invoice_id);\n   END IF;\n   $IF Component_Order_SYS.INSTALLED $THEN\n   $ELSE\n   IF (head_rec_.creator = 'CUSTOMER_ORDER_INV_HEAD_API' AND ins_ord_) THEN -- check for latest interface\n      IF (replace_c_o_postings_ OR No_C_O_postings___(company_, head_rec_.invoice_id)) THEN\n         OPEN  check_for_unposted_items;\n         FETCH check_for_unposted_items INTO unposted_item_;\n         IF (check_for_unposted_items%FOUND) THEN\n            -- delete pre_cust_pay_adv_ postings to stop creating duplicate postings\n            FOR rec_ IN get_adv_inv_posting(company_, head_rec_.invoice_id) LOOP\n               Invoice_Item_API.Cascade_Delete_Postings__(company_, head_rec_.invoice_id, rec_.item_id);", "original_code_length": 16682, "summary": null}
{"id": "CreateCompany_Create_New_Company__", "context": {"api_name": "CreateCompany", "module": "enterp", "file_summary": "Financial operations and accounting - CreateCompany", "function_name": "Create_New_Company__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 298, "code_lines": 298, "cyclomatic_complexity": 110, "estimated_tokens": 1272.7}, "pagerank_score": 0.000431065284646526, "truncation_metadata": {"original_length": 16418, "truncated_length": 1653, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10068217809721038}}, "code": "PROCEDURE Create_New_Company__ (\n   error_         OUT VARCHAR2,\n   company_       IN  VARCHAR2,\n   component_     IN  VARCHAR2,\n   package_       IN  VARCHAR2,\n   attr_          IN  VARCHAR2,\n   languages_     IN  VARCHAR2 DEFAULT NULL )\nIS\n   ptr_                    NUMBER;\n   msg_                    VARCHAR2(2000);\n   active_                 VARCHAR2(5);\n   pkg_tab_                Crecomp_Component_API.PackageTab;\n-- ... key business logic ...\n      ELSIF (name_ = 'USE_VOU_NO_PERIOD') THEN\n      ELSIF (name_ = 'NAME') THEN\n      ELSIF (name_ = 'DEFAULT_LANGUAGE_DB') THEN\n      ELSIF (name_ = 'COUNTRY_DB') THEN\n      ELSIF (name_ = 'TEMPLATE_COMPANY') THEN\n      ELSIF (name_ = 'LANGUAGES') THEN\n      ELSIF (name_ = 'MAIN_PROCESS') THEN\n      ELSIF (name_ = 'PARALLEL_CURR_BASE') THEN\n      ELSIF (name_ = 'MASTER_COMPANY_DB') THEN\n      ELSIF (name_ = 'CURR_BAL_CODE_PART') THEN\n      ELSIF (name_ = 'CURR_BAL_CODE_PART_DESC') THEN\n      ELSIF (name_ = 'LOGICAL_ACC_TYPES') THEN\n      END IF;\n   END LOOP;\n   IF (from_window_ = 'UPDATE_TRANSLATION') THEN\n      from_update_trans_ := TRUE;\n   ELSIF (from_window_ = 'UPDATE_COMPANY') THEN\n      from_update_company_ := TRUE;\n   ELSIF (from_window_ = 'CREATE_COMPANY') THEN\n   ELSE\n   END IF;\n   IF (from_update_company_ OR from_update_trans_) THEN\n      -- If Accrul exist and company exists in CompanyFinance then perform check \n      $IF Component_Accrul_SYS.INSTALLED $THEN\n         IF (Company_Finance_API.Check_Exist(crecomp_rec_.company)) THEN\n         END IF;\n      $ELSE\n   END IF;\n   IF (update_from_template_ IS NOT NULL) THEN\n      crecomp_rec_.template_id := update_from_template_;", "original_code_length": 16418, "summary": null}
{"id": "ShopOrd_Issue__", "context": {"api_name": "ShopOrd", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrd", "function_name": "Issue__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 340, "code_lines": 313, "cyclomatic_complexity": 109, "estimated_tokens": 1557.4}, "pagerank_score": 0.0004448930294890243, "truncation_metadata": {"original_length": 17083, "truncated_length": 1633, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09559210911432418}}, "code": "PROCEDURE Issue__ (\n   rec_  IN            SHOP_ORD_TAB%ROWTYPE,\n   attr_ IN OUT NOCOPY VARCHAR2 )\nIS\n   info_                    VARCHAR2(32000);\n   objid_                   SHOP_ORD.objid%TYPE;\n   objversion_              SHOP_ORD.objversion%TYPE;\n   ptr_                     NUMBER;\n   name_                    VARCHAR2(30);\n   value_                   VARCHAR2(2000);\n   l_parent_qty_            NUMBER;\n   issue_all_               VARCHAR2(20);\n-- ... key business logic ...\n      ELSIF name_ = 'ISSUE_CONNECTED' THEN\n      ELSIF name_ = 'ISSUE_NON_CONNECTED' THEN\n      ELSIF name_ = 'LOT_BATCH_NO' THEN\n      ELSIF name_ = 'SERIAL_NO' THEN\n      END IF;\n   END LOOP;\n   -- If an operation_no was specified which is a child of a split operation then replace it with the\n   IF (operation_no_ IS NOT NULL) THEN\n      IF (op_rec_.split_from_operation_no IS NULL) THEN\n         operation_no_to_check_ := operation_no_;\n      ELSE\n         operation_no_to_check_ := op_rec_.split_from_operation_no;\n      END IF;\n   END IF;   \n   -- SOISSUE is for those issues that are initiated from elsewhere (not picklists).\n   IF client_transaction_type_ IN ('SOISSUE', 'PICK_ISSUE', 'SHOP ORDER SPLIT') THEN\n      IF (supply_code_ IN ('IO', 'PI') AND client_transaction_type_ IN ('SOISSUE', 'PICK_ISSUE')) THEN\n         Shop_Material_Alloc_API.Update_Ms_Forecast__( comp_contract_,\n      END IF;\n      IF (total_issues_shopord_ = 0) THEN\n      ELSE\n         Modify__(info_, objid_, objversion_, attr_, 'DO');\n      END IF;\n   ELSE\n      IF (l_parent_qty_ <= 0) THEN\n      END IF;\n      IF (issue_all_ = yes_) THEN --  Check if qty issued is OK", "original_code_length": 17083, "summary": null}
{"id": "InventoryPartInStock_Validate_Count_Part", "context": {"api_name": "InventoryPartInStock", "module": "invent", "file_summary": "Customer order management and processing - InventoryPartInStock", "function_name": "Validate_Count_Part", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 205, "code_lines": 186, "cyclomatic_complexity": 109, "estimated_tokens": 1045.2}, "pagerank_score": 0.000439514728940585, "truncation_metadata": {"original_length": 11635, "truncated_length": 1722, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.14800171895143963}}, "code": "PROCEDURE Validate_Count_Part (\n   contract_                       IN VARCHAR2,\n   part_no_                        IN VARCHAR2,\n   configuration_id_               IN VARCHAR2,\n   location_no_                    IN VARCHAR2,\n   lot_batch_no_                   IN VARCHAR2,\n   serial_no_                      IN VARCHAR2,\n   eng_chg_level_                  IN VARCHAR2,\n   waiv_dev_rej_no_                IN VARCHAR2,\n   activity_seq_                   IN NUMBER,\n   handling_unit_id_               IN NUMBER,\n   qty_counted_                    IN NUMBER,\n-- ... key business logic ...\n   IF ((part_catalog_rec_.serial_tracking_code       = db_not_serial_tracking_) AND \n      (part_catalog_rec_.receipt_issue_serial_track = db_true_) AND (serial_no_ = '*')) THEN\n      number_of_identified_serials_ := serial_catch_tab_.COUNT;\n      IF (number_of_identified_serials_ != ABS(qty_difference_)) THEN\n         -- there must be as many serial numbers identified as the counting difference.\n         Error_SYS.Record_General(lu_name_, 'SERIALCOUNTDIFF: The counting difference is :P1 but :P2 serials has been identified for the difference.', qty_difference_, number_of_identified_serials_);\n      END IF;\n      IF (number_of_identified_serials_ > 0) THEN\n         FOR i IN serial_catch_tab_.FIRST..serial_catch_tab_.LAST LOOP\n            IF (qty_difference_ > 0) THEN\n               IF (Part_Serial_Catalog_API.Check_Exist(part_no_, serial_catch_tab_(i).serial_no) = db_true_) THEN\n                  IF (Part_Serial_Catalog_API.Is_Issued(part_no_, serial_catch_tab_(i).serial_no) = db_false_) THEN\n                     -- IF the serial is not in state Issued then it cannot be put into Inventory as a positive counting difference", "original_code_length": 11635, "summary": null}
{"id": "CustomerOrderLine_Get_Supply_Chain_Defaults___", "context": {"api_name": "CustomerOrderLine", "module": "order", "file_summary": "Customer order management and processing - CustomerOrderLine", "function_name": "Get_Supply_Chain_Defaults___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 266, "code_lines": 256, "cyclomatic_complexity": 109, "estimated_tokens": 1224.6000000000001}, "pagerank_score": 0.0003574882184538361, "truncation_metadata": {"original_length": 16070, "truncated_length": 1671, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10398257622899813}}, "code": "PROCEDURE Get_Supply_Chain_Defaults___ (\n   newrec_  IN OUT CUSTOMER_ORDER_LINE_TAB%ROWTYPE,\n   indrec_  IN     Indicator_Rec,\n   del_terms_loc_from_client_ IN     BOOLEAN,\n   oldrec_  IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE DEFAULT NULL )\nIS\n   ship_via_code_                CUSTOMER_ORDER_LINE_TAB.ship_via_code%TYPE;\n   delivery_leadtime_            CUSTOMER_ORDER_LINE_TAB.delivery_leadtime%TYPE;\n   pkg_rec_                      Public_Rec;\n   default_ship_via_code_        CUSTOMER_ORDER_LINE_TAB.ship_via_code%TYPE;\n   default_delivery_terms_       CUSTOMER_ORDER_LINE_TAB.delivery_terms%TYPE;\n   default_del_terms_location_   CUSTOMER_ORDER_LINE_TAB.del_terms_location%TYPE;\n-- ... key business logic ...\n         IF newrec_.delivery_terms IS NULL THEN\n         END IF;\n         IF (delivery_leadtime_ IS NOT NULL) THEN\n            -- IF a delivery leadtime was sent in the attribute string this should\n         END IF;\n         IF (supplier_ship_via_transit_ IS NOT NULL) THEN\n            -- IF a value for supplier ship via transit was sent in this should override the default\n         END IF;\n         IF (ext_transport_calendar_id_ IS NOT NULL) THEN\n            -- IF a external transport calendar was sent in the attribute string this should override the default\n         END IF;\n         IF (picking_leadtime_ IS NOT NULL) THEN\n            -- IF a picking leadtime was sent in the attribute string this should override the default value\n         END IF;\n         IF (route_id_ IS NOT NULL) THEN\n             -- IF route_id_ was sent in the attribute string this should override the default value\n      END IF;\n         IF (forward_agent_id_ IS NOT NULL) THEN", "original_code_length": 16070, "summary": null}
{"id": "Project_Get_Proj_Fin_Detail_Lobby", "context": {"api_name": "Project", "module": "proj", "file_summary": "Customer order management and processing - Project", "function_name": "Get_Proj_Fin_Detail_Lobby", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 103, "code_lines": 103, "cyclomatic_complexity": 107, "estimated_tokens": 516.1}, "pagerank_score": 0.000769880419962281, "truncation_metadata": {"original_length": 5370, "truncated_length": 1622, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.30204841713221603}}, "code": "FUNCTION Get_Proj_Fin_Detail_Lobby (\n   project_id_             IN VARCHAR2,\n   budget_forecast_id_     IN NUMBER,\n   selected_forecast_id_   IN NUMBER,\n   column_type_            IN VARCHAR2,\n   column_name_            IN VARCHAR2,\n   item_type_              IN VARCHAR2) RETURN NUMBER\nIS\n   total_                     NUMBER;\n   total_budget_rev_          NUMBER;\n   total_budget_cost_         NUMBER;\n   total_selected_forecast_   NUMBER;\n-- ... key business logic ...\n            END IF;\n         ELSE \n   ELSIF column_type_ = 'PROFIT' THEN\n         WHEN 'PROFIT_BUDGET' THEN\n         WHEN 'PROFIT_FORECAST' THEN\n            RETURN NVL(Get_Forecast_Total(selected_forecast_id_, project_id_, 'REVENUE'), 0) - NVL(Get_Forecast_Total(selected_forecast_id_, project_id_, 'COST'), 0);\n         WHEN 'PROFIT_VARIANCE' THEN\n            RETURN (NVL(Get_Forecast_Total(selected_forecast_id_, project_id_, 'REVENUE'), 0) - NVL(Get_Forecast_Total(selected_forecast_id_, project_id_, 'COST'), 0)) - NVL(Get_Forecast_Total(budget_forecast_id_, project_id_, 'REVENUE'), 0) - NVL(Get_Forecast_Total(budget_forecast_id_, project_id_, 'COST'), 0);\n         WHEN 'PROFIT_PC' THEN \n            IF total_ > 0 THEN \n               RETURN ((NVL(Get_Forecast_Total(selected_forecast_id_, project_id_, 'REVENUE'), 0) - NVL(Get_Forecast_Total(selected_forecast_id_, project_id_, 'COST'), 0)) - total_ ) / total_;\n            ELSE\n            END IF;\n         WHEN 'ACTUAL' THEN\n         ELSE RETURN 0;\n   ELSIF column_type_ = 'MARGIN' THEN\n         WHEN 'BUDGET_MARGIN' THEN\n            IF total_ > 0 THEN \n            ELSE\n            END IF;", "original_code_length": 5370, "summary": null}
{"id": "CompanyPerson_Unpack_Dummy_Rec___", "context": {"api_name": "CompanyPerson", "module": "person", "file_summary": "Financial operations and accounting - CompanyPerson", "function_name": "Unpack_Dummy_Rec___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 254, "code_lines": 243, "cyclomatic_complexity": 105, "estimated_tokens": 1084.2}, "pagerank_score": 0.000723904672220897, "truncation_metadata": {"original_length": 9059, "truncated_length": 1682, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.18567170769400596}}, "code": "PROCEDURE Unpack_Dummy_Rec___ (\n   newrec_    IN OUT NOCOPY company_person_tab%ROWTYPE,\n   dummy_rec_ IN OUT        Dummy_Rec,\n   indrec_    IN OUT NOCOPY Indicator_Rec,\n   attr_      IN OUT NOCOPY VARCHAR2 )\nIS\n   ptr_   NUMBER;\n   name_  VARCHAR2(30);\n   value_ VARCHAR2(4000);\n   ext_name_exist_ INTEGER;\n   picture_id_exist_ INTEGER;\n   date_of_birth_exist_ INTEGER;\n-- ... key business logic ...\n      ELSIF (name_ = 'NAME3') THEN\n      ELSIF (name_ = 'NAME5') THEN\n      ELSIF (name_ = 'NAME6') THEN\n      ELSIF (name_ = 'NAME7') THEN\n      ELSIF (name_ = 'NAME8') THEN\n      ELSIF (name_ = 'INTERNAL_DISPLAY_NAME') THEN\n      ELSIF (name_ = 'EXTERNAL_DISPLAY_NAME') THEN\n      ELSIF (name_ = 'DATE_OF_BIRTH') THEN\n      ELSIF (name_ = 'PLACE_OF_BIRTH') THEN\n      ELSIF (name_ = 'CITIZENSHIP') THEN\n      ELSIF (name_ = 'INSURANCE_ID') THEN\n      ELSIF (name_ = 'MARITAL_STATUS') THEN\n      ELSIF (name_ = 'BLOOD_TYPE') THEN\n      ELSIF (name_ = 'GENDER') THEN\n      ELSIF (name_ = 'HAVE_CHILD') THEN\n      ELSE\n      END IF;   \n   END LOOP;\n   IF (((Check_First_Employee(newrec_.company_id,dummy_rec_.person_id) = 'TRUE') OR (Check_No_Employee(newrec_.company_id,dummy_rec_.person_id) = 'TRUE')) AND (newrec_.master_employment != '0')) THEN\n   END IF;\n   IF(NVL(newrec_.created_by_mcpr, '0') = '1') THEN \n   END IF;\n   IF (newrec_.emp_no IS NOT NULL) THEN\n      IF Company_Emp_API.Get_Person_Id(newrec_.company_id, newrec_.emp_no) != dummy_rec_.person_id THEN\n      END IF;\n   END IF; \n   OPEN check_mast;\n   FETCH check_mast INTO dummy_master_;\n   IF (check_mast%FOUND) THEN\n      IF ((dummy_master_ > 1) OR ((dummy_master_ = 1) AND (newrec_.master_employment = '1'))) THEN", "original_code_length": 9059, "summary": null}
{"id": "CompanyAddress_Get_Line", "context": {"api_name": "CompanyAddress", "module": "enterp", "file_summary": "Customer order management and processing - CompanyAddress", "function_name": "Get_Line", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 204, "code_lines": 204, "cyclomatic_complexity": 105, "estimated_tokens": 1043.9}, "pagerank_score": 0.0006127694540534866, "truncation_metadata": {"original_length": 8650, "truncated_length": 1661, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.19202312138728322}}, "code": "FUNCTION Get_Line (\n   company_    IN VARCHAR2,\n   address_id_ IN VARCHAR2,\n   line_no_    IN NUMBER DEFAULT 1 ) RETURN VARCHAR2\nIS\n   country_       company_address.country%TYPE;\n   address_pres_  Address_Presentation_API.Public_Rec_Address;\n   line_          NUMBER;\n   row1_          VARCHAR2(100);\n   row2_          VARCHAR2(100);\n   row3_          VARCHAR2(100);\n   row4_          VARCHAR2(100);\n-- ... key business logic ...\n      ELSIF (address_pres_.address2_order = 2) THEN\n      ELSIF (address_pres_.address2_order = 3) THEN\n      ELSIF (address_pres_.address2_order = 4) THEN\n      ELSIF (address_pres_.address2_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address3_row = line_) THEN\n      IF (address_pres_.address3_order = 1) THEN\n      ELSIF (address_pres_.address3_order = 2) THEN\n      ELSIF (address_pres_.address3_order = 3) THEN\n      ELSIF (address_pres_.address3_order = 4) THEN\n      ELSIF (address_pres_.address3_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address4_row = line_) THEN\n      IF (address_pres_.address4_order = 1) THEN\n      ELSIF (address_pres_.address4_order = 2) THEN\n      ELSIF (address_pres_.address4_order = 3) THEN\n      ELSIF (address_pres_.address4_order = 4) THEN\n      ELSIF (address_pres_.address4_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address5_row = line_) THEN\n      IF (address_pres_.address5_order = 1) THEN\n      ELSIF (address_pres_.address5_order = 2) THEN\n      ELSIF (address_pres_.address5_order = 3) THEN\n      ELSIF (address_pres_.address5_order = 4) THEN\n      ELSIF (address_pres_.address5_order = 5) THEN", "original_code_length": 8650, "summary": null}
{"id": "CustomerInfoAddress_Get_Line", "context": {"api_name": "CustomerInfoAddress", "module": "enterp", "file_summary": "Customer order management and processing - CustomerInfoAddress", "function_name": "Get_Line", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 204, "code_lines": 204, "cyclomatic_complexity": 105, "estimated_tokens": 1042.6000000000001}, "pagerank_score": 0.0004930191429047051, "truncation_metadata": {"original_length": 8878, "truncated_length": 1670, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.18810542915070963}}, "code": "FUNCTION Get_Line (\n   customer_id_ IN VARCHAR2,\n   address_id_  IN VARCHAR2,\n   line_no_     IN NUMBER DEFAULT 1 ) RETURN VARCHAR2\nIS\n   country_       customer_info_address.country%TYPE;\n   address_pres_  Address_Presentation_API.Public_Rec_Address;\n   line_          NUMBER;\n   row1_          VARCHAR2(100);\n   row2_          VARCHAR2(100);\n   row3_          VARCHAR2(100);\n   row4_          VARCHAR2(100);\n-- ... key business logic ...\n      ELSIF (address_pres_.address2_order = 2) THEN\n      ELSIF (address_pres_.address2_order = 3) THEN\n      ELSIF (address_pres_.address2_order = 4) THEN\n      ELSIF (address_pres_.address2_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address3_row = line_) THEN\n      IF (address_pres_.address3_order = 1) THEN\n      ELSIF (address_pres_.address3_order = 2) THEN\n      ELSIF (address_pres_.address3_order = 3) THEN\n      ELSIF (address_pres_.address3_order = 4) THEN\n      ELSIF (address_pres_.address3_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address4_row = line_) THEN\n      IF (address_pres_.address4_order = 1) THEN\n      ELSIF (address_pres_.address4_order = 2) THEN\n      ELSIF (address_pres_.address4_order = 3) THEN\n      ELSIF (address_pres_.address4_order = 4) THEN\n      ELSIF (address_pres_.address4_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address5_row = line_) THEN\n      IF (address_pres_.address5_order = 1) THEN\n      ELSIF (address_pres_.address5_order = 2) THEN\n      ELSIF (address_pres_.address5_order = 3) THEN\n      ELSIF (address_pres_.address5_order = 4) THEN\n      ELSIF (address_pres_.address5_order = 5) THEN", "original_code_length": 8878, "summary": null}
{"id": "SupplierInfoAddress_Get_Line", "context": {"api_name": "SupplierInfoAddress", "module": "enterp", "file_summary": "Business logic and data operations - SupplierInfoAddress", "function_name": "Get_Line", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 204, "code_lines": 204, "cyclomatic_complexity": 105, "estimated_tokens": 1042.6000000000001}, "pagerank_score": 0.0003767172141798654, "truncation_metadata": {"original_length": 8933, "truncated_length": 1663, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.18616366282323968}}, "code": "FUNCTION Get_Line (\n   supplier_id_ IN VARCHAR2,\n   address_id_  IN VARCHAR2,\n   line_no_     IN NUMBER DEFAULT 1 ) RETURN VARCHAR2\nIS\n   country_      supplier_info_address.country%TYPE;\n   address_pres_ Address_Presentation_API.Public_Rec_Address;\n   line_         NUMBER;\n   row1_         VARCHAR2(100);\n   row2_         VARCHAR2(100);\n   row3_         VARCHAR2(100);\n   row4_         VARCHAR2(100);\n-- ... key business logic ...\n      ELSIF (address_pres_.address2_order = 2) THEN\n      ELSIF (address_pres_.address2_order = 3) THEN\n      ELSIF (address_pres_.address2_order = 4) THEN\n      ELSIF (address_pres_.address2_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address3_row = line_) THEN\n      IF (address_pres_.address3_order = 1) THEN\n      ELSIF (address_pres_.address3_order = 2) THEN\n      ELSIF (address_pres_.address3_order = 3) THEN\n      ELSIF (address_pres_.address3_order = 4) THEN\n      ELSIF (address_pres_.address3_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address4_row = line_) THEN\n      IF (address_pres_.address4_order = 1) THEN\n      ELSIF (address_pres_.address4_order = 2) THEN\n      ELSIF (address_pres_.address4_order = 3) THEN\n      ELSIF (address_pres_.address4_order = 4) THEN\n      ELSIF (address_pres_.address4_order = 5) THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (address_pres_.address5_row = line_) THEN\n      IF (address_pres_.address5_order = 1) THEN\n      ELSIF (address_pres_.address5_order = 2) THEN\n      ELSIF (address_pres_.address5_order = 3) THEN\n      ELSIF (address_pres_.address5_order = 4) THEN\n      ELSIF (address_pres_.address5_order = 5) THEN", "original_code_length": 8933, "summary": null}
{"id": "SalesPart_Check_Update___", "context": {"api_name": "SalesPart", "module": "order", "file_summary": "Customer order management and processing - SalesPart", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 194, "code_lines": 165, "cyclomatic_complexity": 104, "estimated_tokens": 1103.7}, "pagerank_score": 0.0005218373734792644, "truncation_metadata": {"original_length": 10054, "truncated_length": 1661, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1652078774617068}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     sales_part_tab%ROWTYPE,\n   newrec_ IN OUT sales_part_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                   VARCHAR2(30);\n   value_                  VARCHAR2(4000);\n   price_changed_          BOOLEAN := FALSE;\n   sales_price_group_unit_ VARCHAR2(10);\n   company_                VARCHAR2(20);   \n   inventory_uom_group_    VARCHAR2(30);\n-- ... key business logic ...\n   Tax_Handling_Util_API.Validate_Tax_On_Object(company_, tax_types_event_, newrec_.tax_code, newrec_.taxable ,newrec_.tax_class_id, newrec_.catalog_no, SYSDATE, 'CUSTOMER_TAX');\n   IF (newrec_.replacement_part_no IS NOT NULL) THEN\n      IF (newrec_.replacement_part_no = newrec_.catalog_no) THEN\n         Error_SYS.Record_General(lu_name_, 'SAMEASSALESPARTNO: The replacement part number must be different from the sales part number.');\n      END IF;\n      IF Sales_Part_Package_API.Check_Exist(newrec_.contract, newrec_.replacement_part_no, newrec_.catalog_no) THEN\n      END IF;\n      IF (newrec_.date_of_replacement IS NULL) THEN\n      END IF;\n   END IF;\n   IF (newrec_.date_of_replacement IS NOT NULL) AND (newrec_.replacement_part_no IS NULL) THEN\n      Error_SYS.Record_General(lu_name_, 'NOPART: Date of replacement may only be entered if a replacement part number has been indicated.');\n   END IF;\n   IF (newrec_.list_price < 0) THEN\n   END IF;\n   IF (newrec_.rental_list_price < 0) THEN\n   END IF;\n   -- create SM object option check\n   IF ((newrec_.create_sm_object_option = 'CREATESMOBJECT') AND\n       (Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(newrec_.part_no) = db_false_)) THEN", "original_code_length": 10054, "summary": null}
{"id": "ShopOrd_Close_Receive_Possible__", "context": {"api_name": "ShopOrd", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrd", "function_name": "Close_Receive_Possible__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 235, "code_lines": 209, "cyclomatic_complexity": 103, "estimated_tokens": 1207.7}, "pagerank_score": 0.0004448930294890243, "truncation_metadata": {"original_length": 11509, "truncated_length": 1639, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1424102876010079}}, "code": "FUNCTION Close_Receive_Possible__ (\n   rec_                       IN SHOP_ORD_TAB%ROWTYPE,\n   action_                    IN VARCHAR2,\n   close_tolerance_           IN NUMBER,\n   close_code_                IN VARCHAR2,\n   simplified_material_check_ IN VARCHAR2 ) RETURN BOOLEAN\nIS\n   byprod_tolerance         EXCEPTION;\n   so_tolerance             EXCEPTION;\n   shopalloc                EXCEPTION;\n   salvage_receive          EXCEPTION;\n   tolerance_qty_           NUMBER;\n-- ... key business logic ...\n   IF (newrec_.multilevel_repair = 'TRUE') THEN\n      --Check if all the salvage parts are received before closing the shop order\n      IF (Salvage_Part_API.Check_All_Sal_Parts_Received(rec_.order_no, rec_.release_no, rec_.sequence_no) = 'FALSE') THEN\n         IF (action_ = 'CHECK') THEN\n         ELSIF (action_ = 'DO') THEN\n            RAISE salvage_receive;\n         END IF;\n      END IF;\n   END IF;\n   IF (newrec_.order_code NOT IN (Shop_Ord_Code_API.DB_DISASSEMBLY, Shop_Ord_Code_API.DB_MRO_DISASSEMBLY)) THEN\n      IF (close_code_ = 'Y') THEN\n         -- If received + scrapped qty < lot size + reported deviation  - tolerance for auto close case close it\n         IF (so_receive_scrap_qty_ < tolerance_qty_) THEN\n         END IF;\n         -- If received + scrapped qty < lot size - tolerance for manual close case raise error.\n      ELSIF (so_receive_scrap_qty_ < tolerance_qty_ AND NVL(close_tolerance_, 0) != 99) THEN\n         IF (action_ = 'CHECK') THEN\n         ELSIF (action_ = 'DO') THEN\n            RAISE so_tolerance;\n         END IF;\n      END IF;\n   END IF;\n   OPEN check_prod_part;\n   FETCH check_prod_part INTO dummy_;", "original_code_length": 11509, "summary": null}
{"id": "PurchaseOrderLine_Get_Activity_Info___", "context": {"api_name": "PurchaseOrderLine", "module": "purch", "file_summary": "Customer order management and processing - PurchaseOrderLine", "function_name": "Get_Activity_Info___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 266, "code_lines": 254, "cyclomatic_complexity": 103, "estimated_tokens": 1445.6000000000001}, "pagerank_score": 0.0003707967412740005, "truncation_metadata": {"original_length": 18587, "truncated_length": 1680, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09038575348361758}}, "code": "PROCEDURE Get_Activity_Info___ (\n   planned_tab_           OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,\n   planned_committed_tab_ OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,\n   committed_tab_         OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,\n   used_tab_              OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,\n   rec_                   IN  PURCHASE_ORDER_LINE_TAB%ROWTYPE)\nIS\n   order_status_               VARCHAR2(20);\n   part_ownership_             VARCHAR2(20);\n   qty_return_rework_          NUMBER;\n   current_arrived_qty_        NUMBER;\n   remaining_qty_              NUMBER;\n-- ... key business logic ...\n                        END IF;\n                     ELSE\n                        IF rec_.purchase_payment_type = 'STAGED' THEN\n                           IF( (rec_.rowstate != 'Closed') AND ((Purchase_Order_Milestone_API.Get_Approved_Stage_Total(rec_.order_no,rec_.line_no,rec_.release_no)) < (Purchase_Order_Milestone_API.Get_Sum_Stage_Amount(rec_.order_no,rec_.line_no,rec_.release_no))))THEN\n                           END IF;\n                        ELSE\n                           -- Committed cost will be shown until fully invoiced when Post Price Difference at Arrival check box is unchecked \n                           IF (remaining_qty_ > 0) THEN\n                           END IF;\n                        END IF;\n                     END IF;\n                  ELSIF report_service_cost_ THEN\n                     IF (remaining_qty_ > 0) THEN\n                     END IF;\n                  END IF;\n               ELSE\n                  IF (rec_.rowstate != 'Closed') THEN\n                     IF (remaining_qty_ > 0) THEN", "original_code_length": 18587, "summary": null}
{"id": "PartSerialCatalog_Check_Update___", "context": {"api_name": "PartSerialCatalog", "module": "partca", "file_summary": "Customer order management and processing - PartSerialCatalog", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 171, "code_lines": 152, "cyclomatic_complexity": 102, "estimated_tokens": 984.1}, "pagerank_score": 0.0005126034733078725, "truncation_metadata": {"original_length": 9838, "truncated_length": 1673, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.170054889205123}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_                  IN     part_serial_catalog_tab%ROWTYPE,\n   newrec_                  IN OUT part_serial_catalog_tab%ROWTYPE,\n   indrec_                  IN OUT Indicator_Rec,\n   attr_                    IN OUT VARCHAR2,\n   reversing_op_condition_  IN     BOOLEAN DEFAULT FALSE,\n   transaction_date_        IN     DATE DEFAULT NULL,\n   created_by_server_       IN     BOOLEAN DEFAULT FALSE,\n   serial_lifecycle_rename_ IN     BOOLEAN DEFAULT FALSE,\n   cancel_lifecycle_rename_ IN     BOOLEAN DEFAULT FALSE )\nIS\n   name_                VARCHAR2(30);\n-- ... key business logic ...\n      END IF;\n      IF (newrec_.renamed_to_part_no IS NOT NULL) AND (newrec_.renamed_to_serial_no IS NULL) THEN\n         Error_SYS.Record_General(lu_name_, 'RENTOSERIAL: <Renamed To Serial No> should be specified when <Renamed To Part No> contains a value.');\n      END IF;\n      IF (newrec_.part_no = newrec_.renamed_to_part_no) AND (newrec_.serial_no = newrec_.renamed_to_serial_no) THEN\n      END IF;\n      IF (newrec_.renamed_from_part_no IS NOT NULL AND NOT cancel_lifecycle_rename_) THEN\n         IF (nvl(oldrec_.renamed_from_part_no,char_null_) != newrec_.renamed_from_part_no OR\n             nvl(oldrec_.renamed_from_serial_no,char_null_) != newrec_.renamed_from_serial_no) THEN\n            IF (newrec_.renamed_to_part_no IS NOT NULL) THEN\n               Error_SYS.Record_General(lu_name_, 'RENFROMONLY: <Renamed To Part No> and <Renamed To Serial No> may not contain values when specifying values for <Renamed From Part No> and <Renamed From Serial No>, rename not allowed.');\n            END IF;\n            IF (NOT serial_lifecycle_rename_) THEN", "original_code_length": 9838, "summary": null}
{"id": "DataCaptConfDataItem_Get_Next_Data_Item", "context": {"api_name": "DataCaptConfDataItem", "module": "wadaco", "file_summary": "Business logic and data operations - DataCaptConfDataItem", "function_name": "Get_Next_Data_Item", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 118, "code_lines": 108, "cyclomatic_complexity": 101, "estimated_tokens": 899.6}, "pagerank_score": 0.0005365311518687165, "truncation_metadata": {"original_length": 7905, "truncated_length": 1636, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.20695762175838078}}, "code": "FUNCTION Get_Next_Data_Item (\n   data_set_is_complete_    OUT BOOLEAN,\n   next_item_should_be_defaulted_ OUT BOOLEAN,\n   capture_process_id_       IN  VARCHAR2,\n   capture_config_id_        IN  NUMBER, \n   data_item_id_             IN  VARCHAR2 DEFAULT NULL,\n   exit_loop_                IN  BOOLEAN  DEFAULT FALSE,\n   capture_session_id_       IN  NUMBER   DEFAULT NULL) RETURN Public_Rec\nIS\n   next_data_item_           Public_Rec;\n   current_loop_start_item_  Public_Rec;\n   previous_data_item_       Public_Rec;\n-- ... key business logic ...\n      IF (next_data_item_.data_item_id IS NULL) THEN -- Get Next Data Item after Loop End Item if no outer loop exist\n      ELSE\n         -- If next loop start data item have the exit loop assistance set to MESSAGE then continue with the exit loop check\n         IF (Get_Exit_Loop_Assistance_Db(capture_process_id_ => capture_process_id_,\n                                         data_item_id_       => next_data_item_.data_item_id) = Data_Capt_Exit_Loop_Option_API.DB_MESSAGE) THEN\n            -- Trigger the exit loop functionality by checking if the Auto-Pick LOV can find any records left to pick or not\n            Data_Capture_Session_API.Exit_Loop_Check(exit_loop_          => exit_loop_message_,\n            -- Set exit loop message on the session header message attribute\n            IF (exit_loop_message_) THEN\n               Data_Capture_Session_API.Modify(capture_session_id_ => capture_session_id_,\n                                               message_            => Language_SYS.Translate_Constant(lu_name_,'EXITLOOPMESSAGE: No more lines to process'));\n            END IF;", "original_code_length": 7905, "summary": null}
{"id": "InventoryPartInStock_Check_Update___", "context": {"api_name": "InventoryPartInStock", "module": "invent", "file_summary": "Customer order management and processing - InventoryPartInStock", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 228, "code_lines": 205, "cyclomatic_complexity": 100, "estimated_tokens": 1047.8}, "pagerank_score": 0.000439514728940585, "truncation_metadata": {"original_length": 12891, "truncated_length": 1692, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.13125436350942518}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_                        IN     inventory_part_in_stock_tab%ROWTYPE,\n   newrec_                        IN OUT inventory_part_in_stock_tab%ROWTYPE,\n   indrec_                        IN OUT Indicator_Rec,\n   attr_                          IN OUT VARCHAR2,\n   counting_result_               IN     BOOLEAN DEFAULT FALSE,\n   part_catalog_rec_              IN     Part_Catalog_API.Public_Rec DEFAULT NULL,\n   check_mandatory_expire_date_   IN     BOOLEAN                     DEFAULT TRUE,\n   lot_serial_required_in_shpmnt_ IN     BOOLEAN                     DEFAULT TRUE)\nIS\n   name_                   VARCHAR2(30);\n   value_                  VARCHAR2(2000);\n-- ... key business logic ...\n      ELSE\n         Raise_Serial_Qty_1_Error___;\n      END IF;\n   END IF;\n   IF (nvl(newrec_.rotable_part_pool_id, 'DuMmY1')    != nvl(oldrec_.rotable_part_pool_id, 'DuMmY1')) OR\n      (nvl(newrec_.availability_control_id, 'DuMmY1') != nvl(oldrec_.availability_control_id, 'DuMmY1'))   THEN\n      Validate_Rotable_Part_Pool___(newrec_,\n   END IF;\n   IF (((newrec_.qty_onhand     != oldrec_.qty_onhand)     OR\n        (newrec_.qty_in_transit != 0))) THEN\n      IF (local_part_catalog_rec_.receipt_issue_serial_track = db_true_) THEN\n         IF (newrec_.serial_no = '*') THEN\n            IF (local_part_catalog_rec_.serial_tracking_code = db_serial_tracking_) THEN\n               IF (local_part_catalog_rec_.condition_code_usage  != 'NOT_ALLOW_COND_CODE') THEN\n                  Raise_Serial_Req_Error___(newrec_.part_no);\n               END IF;\n               IF (Location_Requires_Tracking___(newrec_.location_type, stock_location_, lot_serial_required_in_shpmnt_)) THEN", "original_code_length": 12891, "summary": null}
{"id": "PlantObject_Count_Indicator_Rec___", "context": {"api_name": "PlantObject", "module": "plades", "file_summary": "Financial operations and accounting - PlantObject", "function_name": "Count_Indicator_Rec___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 358, "code_lines": 358, "cyclomatic_complexity": 241, "estimated_tokens": 1393.6000000000001}, "pagerank_score": 0.00031323819053244683, "truncation_metadata": {"original_length": 8285, "truncated_length": 1636, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.19746529873264937}}, "code": "FUNCTION Count_Indicator_Rec___ (\n   indrec_   IN Indicator_Rec ) RETURN NUMBER\nIS\n   count_  NUMBER := 0;\nBEGIN\n   IF indrec_.plt_sq THEN\n      count_ := count_ +1;\n   END IF;\n   IF indrec_.object_sq THEN\n      count_ := count_ +1;\n   END IF;\n   IF indrec_.object_revision THEN\n-- ... key business logic ...\n   IF indrec_.from_plt_sq THEN\n   END IF;\n   IF indrec_.from_object_sq THEN\n   END IF;\n   IF indrec_.from_object_revision THEN\n   END IF;\n   IF indrec_.to_plt_sq THEN\n   END IF;\n   IF indrec_.to_object_sq THEN\n   END IF;\n   IF indrec_.to_object_revision THEN\n   END IF;\n   IF indrec_.std_sq THEN\n   END IF;\n   IF indrec_.process_keya THEN\n   END IF;\n   IF indrec_.process_keyb THEN\n   END IF;\n   IF indrec_.process_sort_order THEN\n   END IF;\n   IF indrec_.location_keya THEN\n   END IF;\n   IF indrec_.location_keyb THEN\n   END IF;\n   IF indrec_.location_sort_order THEN\n   END IF;\n   IF indrec_.function_keya THEN\n   END IF;\n   IF indrec_.function_keyb THEN\n   END IF;\n   IF indrec_.function_sort_order THEN\n   END IF;\n   IF indrec_.remark1 THEN\n   END IF;\n   IF indrec_.remark2 THEN\n   END IF;\n   IF indrec_.process_plt_sq THEN\n   END IF;\n   IF indrec_.process_object_sq THEN\n   END IF;\n   IF indrec_.process_object_revision THEN\n   END IF;\n   IF indrec_.function_plt_sq THEN\n   END IF;\n   IF indrec_.function_object_sq THEN\n   END IF;\n   IF indrec_.function_object_revision THEN\n   END IF;\n   IF indrec_.location_plt_sq THEN\n   END IF;\n   IF indrec_.location_object_sq THEN\n   END IF;\n   IF indrec_.location_object_revision THEN\n   END IF;\n   IF indrec_.location_remark THEN\n   END IF;\n   IF indrec_.location_x THEN\n   END IF;", "original_code_length": 8285, "summary": null}
{"id": "ActiveSeparate_Common_Date_Handling___", "context": {"api_name": "ActiveSeparate", "module": "wo", "file_summary": "Customer order management and processing - ActiveSeparate", "function_name": "Common_Date_Handling___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 517, "code_lines": 464, "cyclomatic_complexity": 231, "estimated_tokens": 2931.5}, "pagerank_score": 0.00019149182787929524, "truncation_metadata": {"original_length": 28363, "truncated_length": 1639, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.05778655290343052}}, "code": "PROCEDURE Common_Date_Handling___ (\n   oldrec_ IN            active_work_order_tab%ROWTYPE,\n   newrec_ IN OUT NOCOPY active_work_order_tab%ROWTYPE,\n   indrec_ IN OUT NOCOPY Indicator_Rec,\n   attr_   IN OUT NOCOPY VARCHAR2 )\nIS\n   ptr_                       NUMBER;\n   name_                      VARCHAR2(30);\n   value_                     VARCHAR2(32000);\n   msg_                       VARCHAR2(32000);\n   called_form_update_        BOOLEAN := FALSE;    --Is it called from an UPDATING method (TRUE) or INSERTING method (FALSE).\n   called_before_update_      BOOLEAN := TRUE;     --Is it called before (TRUE) or after (FALSE) updating values to database.\n-- ... key business logic ...\n               END IF;\n               IF (customer_info_changed_ AND oldrec_.required_end_date = newrec_.required_end_date) THEN\n               END IF;\n            END IF;\n         END IF;\n         -- <<<Sections specific to Check_Update___.2: END>>>}\n      ELSE\n         -- <<<Sections specific to Check_Insert___: BEGIN>>>{\n         -- Moved from Insert___: BEGIN{\n         IF (newrec_.plan_hrs IS NULL) THEN\n            IF (newrec_.contract_id IS NOT NULL AND newrec_.line_no IS NOT NULL) THEN\n               $IF Component_Pcmsci_SYS.INSTALLED $THEN\n                  IF (exec_time_ IS NOT NULL) THEN\n                  END IF;\n               $ELSE\n            END IF;\n         END IF;\n         -- Moved from Insert___: END}\n         -- <<<Sections specific to Check_Insert___: END>>>}\n      END IF;\n      -- <<<Sections common to Check_Insert___ and Check_Update___.3: BEGIN>>>{\n      -- Get Warnings only if there is a modification relevant to a Date", "original_code_length": 28363, "summary": null}
{"id": "ShopOrdUtil_Merge_Shop_Order_Multiple", "context": {"api_name": "ShopOrdUtil", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrdUtil", "function_name": "Merge_Shop_Order_Multiple", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 465, "code_lines": 407, "cyclomatic_complexity": 209, "estimated_tokens": 2860.0}, "pagerank_score": 0.0001980034146697676, "truncation_metadata": {"original_length": 28139, "truncated_length": 1646, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.05849532677067416}}, "code": "PROCEDURE Merge_Shop_Order_Multiple (\n   info_         OUT    VARCHAR2,\n   so_order_no_  IN OUT NOCOPY VARCHAR2,\n   in_order_no_  IN     VARCHAR2,\n   parameters_   IN     VARCHAR2 )\nIS\n   from_                      NUMBER;\n   to_                        NUMBER;\n   index_                     NUMBER;\n   order_no_                  VARCHAR2(25);\n   rel_no_                    VARCHAR2(4);\n   seq_no_                    VARCHAR2(4);\n-- ... key business logic ...\n      IF (so_rec_.customer_order_no IS NOT NULL) THEN\n         Error_SYS.Record_General(lu_name_, 'CUSTNOTNULL: Cannot merge shop orders if any are connected to a customer order.');\n      END IF;\n      IF (so_rec_.demand_code = 'DOP') AND (parameters_ = 'MERGE_NEW') THEN\n      END IF;\n      IF (parameters_ = 'MERGE_EXISTING') THEN\n         IF (so_rec_.demand_code = 'DOP') AND (so_rec_.project_id IS NOT NULL) THEN\n         END IF;\n         IF (NVL(so_rec_.eng_chg_level, ' ') != NVL(merge_to_so_rec_.eng_chg_level, ' ')) THEN\n            Error_SYS.Record_General(lu_name_, 'DIFFMEECL: Cannot merge into existing shop order if destination structure revision is different .');\n         ELSIF (NVL(so_rec_.routing_revision, ' ') != NVL(merge_to_so_rec_.routing_revision, ' ')) THEN\n            Error_SYS.Record_General(lu_name_, 'DIFFMEROUTREV: Cannot merge into existing shop order if destination routing revision is different.');\n         END IF;\n         -- Check if the order to merge into is one of the orders selected to be merged.\n         IF (so_rec_.order_no = merge_to_so_rec_.order_no) AND\n            (so_rec_.sequence_no = merge_to_so_rec_.sequence_no) THEN\n         END IF;", "original_code_length": 28139, "summary": null}
{"id": "ActiveSeparate_Check_Update___", "context": {"api_name": "ActiveSeparate", "module": "wo", "file_summary": "Customer order management and processing - ActiveSeparate", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 376, "code_lines": 327, "cyclomatic_complexity": 207, "estimated_tokens": 2295.8}, "pagerank_score": 0.00019149182787929524, "truncation_metadata": {"original_length": 19825, "truncated_length": 1676, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08453972257250945}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     active_work_order_tab%ROWTYPE,\n   newrec_ IN OUT active_work_order_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_  VARCHAR2(30);\n   value_ VARCHAR2(4000);\n   coordin_updated_     BOOLEAN := FALSE;\n   --   old_customer_id_     ACTIVE_WORK_ORDER_TAB.Customer_No%TYPE;\n   old_mch_code_        VARCHAR2(100);\n   s_line_exist_           NUMBER;\n-- ... key business logic ...\n   ELSIF (newrec_.item_class_id != oldrec_.item_class_id) OR ((newrec_.item_class_id IS NOT NULL) AND (oldrec_.item_class_id IS NULL)) THEN\n      IF(NOT indrec_.item_class_function) THEN\n      END IF;\n      IF(NOT indrec_.err_cause) THEN\n      END IF;\n      IF(NOT indrec_.err_type) THEN\n      END IF;\n   END IF;\n   $IF Component_Order_SYS.INSTALLED $THEN\n      IF indrec_.customer_no  AND newrec_.cust_order_no IS NOT NULL THEN\n         IF (newrec_.customer_no != co_customer_) OR ( newrec_.customer_no IS NULL)  THEN\n         END IF;\n      END IF;\n   IF(newrec_.connection_type != 'LINAST') THEN\n      IF ( rename_serial_ != 'TRUE') THEN\n         IF (indrec_.mch_code AND (newrec_.mch_code IS NOT NULL)) THEN\n            IF(newrec_.repair_flag = 'TRUE' AND (newrec_.non_serial_repair_flag IS NULL OR newrec_.non_serial_repair_flag != 'TRUE'))THEN\n            END IF;\n         END IF;\n      END IF;\n   END IF;\n   IF ( rename_serial_ != 'TRUE' ) THEN\n      $IF Component_Vim_SYS.INSTALLED $THEN\n         IF (newrec_.connection_type = 'VIM') THEN\n            Transfer_Maint_Event_Util_API.Validate_Work_Order(\n         END IF;\n      Work_Order_Permit_Util_API.Check_Permit_Leader(newrec_.wo_no, newrec_.work_leader_sign);", "original_code_length": 19825, "summary": null}
{"id": "HandlingUnit_Get_Compiled_Part_Stock_Info", "context": {"api_name": "HandlingUnit", "module": "invent", "file_summary": "Customer order management and processing - HandlingUnit", "function_name": "Get_Compiled_Part_Stock_Info", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 380, "code_lines": 342, "cyclomatic_complexity": 187, "estimated_tokens": 1268.8}, "pagerank_score": 0.0002333476446448171, "truncation_metadata": {"original_length": 27884, "truncated_length": 1682, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.060321331229378855}}, "code": "FUNCTION Get_Compiled_Part_Stock_Info (\n      handling_unit_id_         IN   NUMBER) RETURN Compiled_Part_Stock_Rec\nIS \n   compiled_part_stock_rec_       Compiled_Part_Stock_Rec;   \n   keys_and_qty_tab_               Inventory_Part_In_Stock_API.Keys_And_Qty_Tab;\n   part_in_stock_rec_              Inventory_Part_In_Stock_API.Public_Rec;\n   inventory_part_rec_             Inventory_Part_API.Public_Rec;\n   previous_part_no_               VARCHAR2(25);\n   last_activity_date_             inventory_part_in_stock_tab.last_activity_date%TYPE;\n   owner_                          inventory_part_in_stock_tab.owning_customer_no%TYPE;\n   owner_name_                     VARCHAR2(100);\n   condition_code_                 VARCHAR2(10);\n-- ... key business logic ...\n            END IF;        \n         END IF;   \n         IF NOT(activity_seq_changed_) THEN\n            IF (i = keys_and_qty_tab_.FIRST) THEN                                                \n            ELSIF Validate_SYS.Is_Different(compiled_part_stock_rec_.activity_seq , keys_and_qty_tab_(i).activity_seq) THEN\n            END IF;        \n         END IF;   \n         IF NOT(rotable_part_pool_id_changed_) THEN\n            IF (i = keys_and_qty_tab_.FIRST) THEN                                                            \n            ELSIF Validate_SYS.Is_Different(compiled_part_stock_rec_.rotable_part_pool_id, part_in_stock_rec_.rotable_part_pool_id) THEN\n            END IF;        \n         END IF;   \n         IF NOT(last_activity_date_changed_) THEN\n            IF (i = keys_and_qty_tab_.FIRST) THEN \n            ELSIF Validate_SYS.Is_Different(compiled_part_stock_rec_.last_activity_date, last_activity_date_) THEN", "original_code_length": 27884, "summary": null}
{"id": "CbsSoInt_Modify_Operation___", "context": {"api_name": "CbsSoInt", "module": "cbsint", "file_summary": "Customer order management and processing - CbsSoInt", "function_name": "Modify_Operation___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 255, "code_lines": 217, "cyclomatic_complexity": 173, "estimated_tokens": 1352.0}, "pagerank_score": 0.00023699432843038963, "truncation_metadata": {"original_length": 12200, "truncated_length": 1692, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.13868852459016393}}, "code": "PROCEDURE Modify_Operation___ (\n   order_no_              IN VARCHAR2,\n   release_no_            IN VARCHAR2,\n   sequence_no_           IN VARCHAR2,\n   operation_no_          IN NUMBER,\n   oldrec_                IN Shop_Order_Operation_Tab%ROWTYPE,\n   send_msg_              IN VARCHAR2 )\nIS\n   pd_                           CONSTANT VARCHAR2(2) := Scheduling_Int_API.path_delim_;\n   name_                         VARCHAR2(75);\n   contract_                     VARCHAR2(5);\n   wc_name_                      VARCHAR2(75);\n-- ... key business logic ...\n         ELSIF (rec_.run_time_code = '2') THEN\n            ifm_ := ifm_ || '$IDI_UNITSPERHOUR=' || rec_.mach_run_factor || lf_;\n         ELSE\n            ifm_ := ifm_ || '$IDI_TIME_RUN_FIXED=' || rec_.mach_run_factor || lf_;\n         END IF;\n         -- If overlap_qty is defined to a value less than 0 set it to 0 in the CBS server\n         IF rec_.overlap < 0 THEN\n            ifm_ := ifm_ || '$IDI_OVERLAP_QUANTITY=0.0' || lf_;\n         ELSE\n            ifm_ := ifm_ || '$IDI_OVERLAP_QUANTITY=' || rec_.overlap || lf_;\n         END IF;\n         -- If overlap_qty is defined to a value different from 'Units' or 'Percent' set it to 'Units' in the CBS server\n         IF (rec_.overlap_unit NOT IN ('UNITS', 'PERCENT')) THEN\n            ifm_ := ifm_ || '$IDI_OVERLAP_TYPE=1' || lf_;\n         ELSE\n            IF (rec_.overlap_unit = 'UNITS') THEN\n            ELSE\n            END IF;\n            ifm_ := ifm_ || '$IDI_OVERLAP_TYPE=' || overlap_unit_to_cbs_ || lf_;\n         END IF;\n         IF (rec_.include_setup_for_overlap = 'Y') THEN\n         ELSE\n         END IF;\n         ifm_ := ifm_ || '$IDI_INCLUDE_SETUP=' || include_setup_ || lf_;", "original_code_length": 12200, "summary": null}
{"id": "VimSerialStructure_Validate_Dependencies___", "context": {"api_name": "VimSerialStructure", "module": "vim", "file_summary": "Customer order management and processing - VimSerialStructure", "function_name": "Validate_Dependencies___", "previous_function": "Validate_Alternate___", "next_function": null, "complexity_metrics": {"total_lines": 395, "code_lines": 395, "cyclomatic_complexity": 161, "estimated_tokens": 2373.8}, "pagerank_score": 0.00018739465816759772, "truncation_metadata": {"original_length": 23450, "truncated_length": 1699, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07245202558635394}}, "code": "PROCEDURE Validate_Dependencies___ (\n   parent_seq_no_temp_ IN NUMBER,  \n   top_part_no_        IN VARCHAR2,\n   top_part_rev_       IN VARCHAR2,\n   structure_address_  IN VARCHAR2,\n   part_no_            IN VARCHAR2,\n   part_rev_           IN VARCHAR2,\n   raise_error_        IN BOOLEAN DEFAULT TRUE,\n   str_validate_type_  IN VARCHAR2 DEFAULT NULL )   \nIS\n   TYPE Dependency_Rec IS RECORD (\n      top_part_no         vim_serial_structure_tab.top_part_no%TYPE,\n-- ... key business logic ...\n            CLOSE Check_Inst_Same_Template_Down;\n            IF (position_type_ = 'MASTER') THEN\n               IF ((str_change_type_ ='Insert') AND (found_)) THEN\n                  IF ((part_no_actual_ = part_no_temp_) AND (part_rev_actual_ = part_rev_temp_ )) THEN\n                  ELSE\n                     warning_required_ := 'TRUE_NOCHECK';\n                  END IF;\n               END IF;\n            ELSIF (position_type_ = 'DEPENDENT') THEN\n               IF ((str_change_type_ ='Insert') AND (found_)) THEN\n                  IF ((part_no_actual_ = part_no_temp_) AND (part_rev_actual_ = part_rev_temp_)) THEN\n                     IF (directy_dependent_ = 'TRUE') THEN\n                     ELSIF (directy_dependent_ = 'FALSE') THEN\n                        warning_required_ := 'TRUE_NOCHECK';\n                     END IF;\n                  ELSE\n                  END IF;   \n               END IF;   \n               IF ((str_change_type_ ='Remove') AND (NOT found_)) THEN\n                  warning_required_ := 'CHECK_FURTHER';\n               ELSIF ((str_change_type_ ='Remove') AND (found_)) THEN\n                  IF ((part_no_actual_ = part_no_temp_) AND (part_rev_actual_ = part_rev_temp_)) THEN", "original_code_length": 23450, "summary": null}
{"id": "PurchaseReqLine_Check_Update___", "context": {"api_name": "PurchaseReqLine", "module": "purch", "file_summary": "Customer order management and processing - PurchaseReqLine", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 509, "code_lines": 449, "cyclomatic_complexity": 160, "estimated_tokens": 2096.9}, "pagerank_score": 0.00019470142977973638, "truncation_metadata": {"original_length": 27790, "truncated_length": 1678, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.06038143216984527}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     purchase_req_line_tab%ROWTYPE,\n   newrec_ IN OUT purchase_req_line_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   contract_                       PURCHASE_REQ_LINE_TAB.contract%TYPE;\n   part_no_                        VARCHAR2(25);\n   affects_approval_               BOOLEAN;\n   old_vendor_no_                  PURCHASE_REQ_LINE_TAB.vendor_no%TYPE;\n   b_code_                         VARCHAR2(20);\n   user_contract_                  VARCHAR2(30);\n-- ... key business logic ...\n            END IF;\n            IF (get_price_flag_ =0 ) THEN\n            END IF;\n         END IF;\n      END IF;\n   ELSIF (newrec_.price_confirmed = 'FALSE') THEN\n      IF ((oldrec_.original_qty != newrec_.original_qty) OR (NVL(oldrec_.vendor_no, string_null_) != NVL(newrec_.vendor_no, string_null_)) OR\n         (oldrec_.wanted_receipt_date != newrec_.wanted_receipt_date) OR (NVL(oldrec_.assortment, string_null_) != NVL(newrec_.assortment, string_null_)) ) THEN\n         IF (newrec_.assortment IS NOT NULL) AND (newrec_.vendor_no IS NOT NULL) THEN\n            IF (newrec_.use_price_incl_tax = 'TRUE') THEN\n            ELSE\n            END IF;\n         END IF;\n      END IF;\n      IF (( NVL(newrec_.discount, 0) = 0) AND (newrec_.vendor_no IS NOT NULL)) THEN\n         IF ( NVL(newrec_.discount, 0) = 0) THEN\n         END IF;\n      ELSIF (newrec_.discount IS NULL) THEN\n      END IF;\n      IF (( NVL(newrec_.additional_cost_amount, 0) = 0) AND (newrec_.vendor_no IS NOT NULL)) THEN\n         IF ( NVL(newrec_.additional_cost_amount, 0) = 0) THEN\n         END IF;\n      ELSIF (newrec_.additional_cost_amount IS NULL) THEN", "original_code_length": 27790, "summary": null}
{"id": "ActiveSeparate_Update___", "context": {"api_name": "ActiveSeparate", "module": "wo", "file_summary": "Customer order management and processing - ActiveSeparate", "function_name": "Update___", "previous_function": "Insert___", "next_function": null, "complexity_metrics": {"total_lines": 433, "code_lines": 378, "cyclomatic_complexity": 156, "estimated_tokens": 2197.0}, "pagerank_score": 0.00019149182787929524, "truncation_metadata": {"original_length": 22239, "truncated_length": 1800, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08093889113719142}}, "code": "PROCEDURE Update___ (\n   objid_      IN     VARCHAR2,\n   oldrec_     IN     ACTIVE_WORK_ORDER_TAB%ROWTYPE,\n   newrec_     IN OUT ACTIVE_WORK_ORDER_TAB%ROWTYPE,\n   attr_       IN OUT VARCHAR2,\n   objversion_ IN OUT VARCHAR2,\n   by_keys_    IN     BOOLEAN DEFAULT FALSE )\nIS\n   --   fixed_price_         NUMBER;\n   --   object_id_           ROWID;\n   --   objstate_         VARCHAR2(2000);\n   msg_                       VARCHAR2(32000);\n-- ... key business logic ...\n         mch_code_updated_ := TRUE;\n      END IF;\n      IF (oldrec_.mch_code_contract IS NULL AND newrec_.mch_code_contract IS NOT NULL OR oldrec_.mch_code_contract != newrec_.mch_code_contract OR oldrec_.mch_code_contract IS NOT NULL AND newrec_.mch_code_contract IS NULL) THEN\n         mch_code_contract_updated_ := TRUE;\n      END IF;\n      IF  (mch_code_contract_updated_) THEN\n         IF (oldrec_.mch_code IS NOT NULL AND newrec_.mch_code IS NOT NULL  AND oldrec_.mch_code = newrec_.mch_code) THEN\n            mch_code_updated_ := TRUE;\n         END IF;\n      END IF;\n   END IF;\n   $IF Component_Proj_SYS.INSTALLED $THEN\n      IF (newrec_.activity_seq IS NOT NULL) AND (oldrec_.activity_seq IS NULL)THEN\n      END IF;\n   IF (newrec_.activity_seq IS NULL) AND (oldrec_.activity_seq IS NOT NULL)THEN\n      $IF Component_Proj_SYS.INSTALLED $THEN\n         IF (system_ctrl_conn_ = 'TRUE') THEN\n         END IF;\n      $ELSE\n   END IF;\n   -- Check if the new contract is in the same company as the old.\n   IF NOT (Site_API.Get_Company(oldrec_.contract) = company_) THEN\n   END IF;\n   -- Update WoMetaData\n   IF ((oldrec_.progress_template_id IS NULL AND newrec_.progress_template_id IS NOT NULL )OR (oldrec_.progress_template_id != newrec_.progress_template_id) OR (oldrec_.progress_template_id IS NOT NULL AND newrec_.progress_templ...", "original_code_length": 22239, "summary": null}
{"id": "CbsSoInt_Schedule_Shop_Order", "context": {"api_name": "CbsSoInt", "module": "cbsint", "file_summary": "Customer order management and processing - CbsSoInt", "function_name": "Schedule_Shop_Order", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 227, "code_lines": 181, "cyclomatic_complexity": 152, "estimated_tokens": 1140.1000000000001}, "pagerank_score": 0.00023699432843038963, "truncation_metadata": {"original_length": 11504, "truncated_length": 1637, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.14229833101529904}}, "code": "PROCEDURE Schedule_Shop_Order (\n   order_no_             IN VARCHAR2,\n   release_no_           IN VARCHAR2,\n   sequence_no_          IN VARCHAR2 )\nIS\n   pd_               CONSTANT VARCHAR2(2) := Scheduling_Int_API.path_delim_;\n   kpd_              CONSTANT VARCHAR2(1) := Scheduling_Int_API.key_part_delim_;\n   ifm_              VARCHAR2(32500);\n   name_             VARCHAR2(75);\n   sched_action_     VARCHAR2(200);\n   transaction_id_   NUMBER;\n   pointer_          VARCHAR2(50);\n-- ... key business logic ...\n            Transport_Util_API.Add_Command(ifm_);\n            ifm_ := '!SCHEDULING.SET_SCHEDULE_MODIFIED' || lf_;\n            ifm_ := ifm_ || '$OBJECTS=SHOPORDERS'||pd_||order_no_||kpd_|| release_no_ ||kpd_|| sequence_no_ || lf_;\n            ifm_ := ifm_ || '$CLASS=SHOPORDER' || lf_;\n            ifm_ := ifm_ || '$ITEMS=IDI_TIME_START;IDI_TIME_END;IDI_STATUS_INCOMPLETE;IDI_STATUS_UNSCHEDULED;IDI_STATUS_BOOKED;IDI_STATUS_SCHEDULED;IDI_STATUS_RELEASED;IDI_STATUS_INFSCHED' || lf_;\n            Transport_Util_API.Add_Command(ifm_);\n            -- Select all modified Shoporder operations\n            ifm_ := '!SCHEDULING.SELECTMODIFIED' || lf_;\n            ifm_ := ifm_ || '$OBJECTS=SHOPORDERS' || lf_;\n            ifm_ := ifm_ || '$CLASS=OPERATION' || lf_;\n            ifm_ := ifm_ || '$ITEMS=IDI_TIME_START;IDI_TIME_END;IDI_TIME_QUEUE;IDI_RESOURCE_BOOKED;IDI_OPER_TIME_PARTS;IDI_TIME_SETUP_ACTUAL;IDI_OPERATION_SETUP_TIME;IDI_STATUS_INCOMPLETE;IDI_STATUS_UNSCHEDULED;IDI_STATUS_BOOKED;IDI_STATUS_INFSCHED;IDI_SCHED_INFO' || lf_;\n            Transport_Util_API.Add_Command(ifm_);\n            -- Select all modified Shoporders", "original_code_length": 11504, "summary": null}
{"id": "CbsSoInt_Operation_Connections___", "context": {"api_name": "CbsSoInt", "module": "cbsint", "file_summary": "Customer order management and processing - CbsSoInt", "function_name": "Operation_Connections___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 290, "code_lines": 264, "cyclomatic_complexity": 147, "estimated_tokens": 1333.8}, "pagerank_score": 0.00023699432843038963, "truncation_metadata": {"original_length": 13948, "truncated_length": 1648, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.11815314023515916}}, "code": "PROCEDURE Operation_Connections___ (\n   order_no_              IN VARCHAR2,\n   release_no_            IN VARCHAR2,\n   sequence_no_           IN VARCHAR2,\n   operation_no_          IN NUMBER,\n   op_sequence_no_        IN NUMBER,\n   action_                IN VARCHAR2,\n   parallel_operation_db_ IN VARCHAR2 )\nIS\n\n   TYPE rOldOperation IS RECORD(\n      operation_no          NUMBER,\n-- ... key business logic ...\n         IF (op_sequence_no_ IS NULL) THEN\n            IF rec_.operation_no = operation_no_ THEN\n            ELSE\n            END IF;\n         ELSE\n            IF max_op_before_ IS NULL THEN\n            END IF;\n            IF (rec_.operation_no != operation_no_) THEN\n               IF (rec_.op_sequence_no < op_sequence_no_) THEN\n                  IF (max_op_before_ IS NOT NULL) AND (rec_.op_sequence_no = max_op_before_) THEN\n                  END IF;\n               ELSE\n                  IF (max_op_before_ IS NULL) AND (min_op_after_ IS NOT NULL) AND (rec_.op_sequence_no = min_op_after_) THEN\n                  END IF;\n               END IF;\n            ELSE\n               IF (max_op_before_ IS NULL) AND (min_op_after_ IS NULL) THEN\n               END IF;\n            END IF;\n         END IF;\n      ELSIF action_ = 'D' THEN --this function is being called from  Remove_Operation\n         IF (rec_.op_sequence_no >  op_sequence_no_) AND (NOT deleted_oper_inserted_) THEN\n            deleted_oper_inserted_ := TRUE;\n         ELSE\n         END IF;\n         -- ie if last operation was deleted\n         IF (op_sequence_no_ > last_op_sequence_no_) AND (last_op_sequence_no_ = rec_.op_sequence_no) AND (NOT deleted_oper_inserted_) THEN", "original_code_length": 13948, "summary": null}
{"id": "PlantObject_Check_Update___", "context": {"api_name": "PlantObject", "module": "plades", "file_summary": "Financial operations and accounting - PlantObject", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 362, "code_lines": 322, "cyclomatic_complexity": 145, "estimated_tokens": 1627.6000000000001}, "pagerank_score": 0.00031323819053244683, "truncation_metadata": {"original_length": 19424, "truncated_length": 1757, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09045510708401977}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     plant_object_tab%ROWTYPE,\n   newrec_ IN OUT plant_object_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   ptr_                       NUMBER;\n   name_                      VARCHAR2(30);\n   value_                     VARCHAR2(4000);\n   old_state_                 VARCHAR2(30);\n   property_changed_          NUMBER := 0;\n   from_changeclass_          NUMBER := 0;\n-- ... key business logic ...\n   IF newrec_.denom1 IS NULL THEN\n   END IF;\n   IF (Count_Indicator_Rec___(indrec_) > nvl(length(projconn_attr_),0) AND prevent_completed_change_ = 'TRUE' AND old_state_ = 'Completed' AND NOT nvl(indrec_.operational_status, FALSE)) THEN\n      Error_SYS.Record_General(lu_name_,'CANNOTMODIFY: Cannot Modify Objects in status :P1 and operational status :P2.', Finite_State_Decode__(old_state_), Serial_Operational_Status_API.Decode(old_operational_state_));\n   END IF;\n   IF (indrec_.keya01 = TRUE OR indrec_.keya02 = TRUE OR indrec_.keya03 = TRUE OR indrec_.keya04 = TRUE OR indrec_.keya05 = TRUE\n      OR indrec_.keya06 = TRUE OR indrec_.keya07 = TRUE OR indrec_.keya08 = TRUE OR indrec_.keya09 = TRUE OR indrec_.keya10 = TRUE) THEN\n   END IF;\n   Plant_Object_Util_API.Check_Object_Id_Site_Status__(oldrec_, newrec_, indrec_.keya, keya_part_mod_);\n   IF (newrec_.process_data_changed IS NULL OR newrec_.process_data_changed <> 'Y') THEN\n   END IF;\n   Validate_Updated_Relations___(oldrec_, newrec_);\n   IF (newrec_.process_plt_sq IS NOT NULL AND newrec_.process_object_sq IS NOT NULL AND newrec_.process_object_revision IS NOT NULL) AND\n       Plant_Class_Cross_Ref_API.Check_Cross_Ref_Exist_(newrec_.std_sq, newrec_.class, plant_object_rec_.std_sq, plant_object_rec_.class) = 'TRUE' THEN", "original_code_length": 19424, "summary": null}
{"id": "ActiveSeparate_Insert___", "context": {"api_name": "ActiveSeparate", "module": "wo", "file_summary": "Customer order management and processing - ActiveSeparate", "function_name": "Insert___", "previous_function": null, "next_function": "Update___", "complexity_metrics": {"total_lines": 435, "code_lines": 394, "cyclomatic_complexity": 144, "estimated_tokens": 1892.8}, "pagerank_score": 0.00019149182787929524, "truncation_metadata": {"original_length": 21675, "truncated_length": 1651, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07617070357554787}}, "code": "PROCEDURE Insert___ (\n   objid_      OUT    VARCHAR2,\n   objversion_ OUT    VARCHAR2,\n   newrec_     IN OUT ACTIVE_WORK_ORDER_TAB%ROWTYPE,\n   attr_       IN OUT VARCHAR2 )\nIS\n   project_no_                 VARCHAR2(30);\n   part_no_                    VARCHAR2(25);\n   serial_no_                  Equipment_Object.serial_no%TYPE;\n   next_wo_no_                 ACTIVE_SEPARATE_SERV.wo_no%TYPE;\n   --   fixed_price_                NUMBER;\n   wo_no_                      ACTIVE_SEPARATE_SERV.wo_no%TYPE;\n-- ... key business logic ...\n   $IF Component_Mpbint_SYS.INSTALLED $THEN\n      IF (Scheduling_Site_Maint_API.Get_Cbs_Enabled_Db(newrec_.contract) = 'Y') THEN\n      END IF;\n   IF newrec_.sched_maint_win IS NULL THEN\n   END IF;\n   IF newrec_.note_id IS NULL THEN\n   END IF;\n--   IF meta_fixed_price_ IS NULL THEN\n--   END IF;\n   IF(newrec_.connection_type ='CMPUNT') THEN\n   END IF;\n   IF (newrec_.connection_type='VIM') THEN\n      IF (newrec_.mch_code_description = 'TOP_WO') THEN\n         IF (Client_SYS.Item_Exist('PART_NO', attr_)) THEN\n         END IF;\n      ELSE\n      END IF;\n   ELSE\n      IF (newrec_.mch_code_description IS NULL) THEN\n         IF (newrec_.connection_type ='TOOLEQ') THEN\n         ELSIF (newrec_.connection_type ='LINAST') THEN\n         ELSIF (newrec_.connection_type ='CMPUNT') THEN\n         ELSE\n         END IF;\n      END IF;\n   END IF;\n   IF (newrec_.mch_code_contract IS NULL) THEN\n      IF (newrec_.connection_type ='LINAST') THEN\n      ELSIF (newrec_.connection_type ='CMPUNT') THEN\n      END IF;\n   END IF;   \n   IF (newrec_.structure_progress IS NULL) THEN\n   END IF;\n   IF (newrec_.progress_template_id IS NULL) THEN", "original_code_length": 21675, "summary": null}
{"id": "CbsSoInt_Schedule_Site", "context": {"api_name": "CbsSoInt", "module": "cbsint", "file_summary": "Customer order management and processing - CbsSoInt", "function_name": "Schedule_Site", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 222, "code_lines": 191, "cyclomatic_complexity": 142, "estimated_tokens": 1081.6000000000001}, "pagerank_score": 0.00023699432843038963, "truncation_metadata": {"original_length": 9921, "truncated_length": 1663, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.16762423142828345}}, "code": "PROCEDURE Schedule_Site (\n   contract_          IN VARCHAR2,\n   dispatch_          IN VARCHAR2,\n   released_          IN VARCHAR2,\n   set_start_         IN VARCHAR2,\n   min_horizon_       IN VARCHAR2,\n   reassign_          IN VARCHAR2,\n   left_shift_        IN VARCHAR2,\n   right_shift_       IN VARCHAR2,\n   pairwise_          IN VARCHAR2,\n   pairwise_time_     IN NUMBER,\n   refresh_materials_ IN VARCHAR2 DEFAULT 'FALSE',\n-- ... key business logic ...\n      Transport_Util_API.Add_Command(ifm_);\n      IF (dispatch_ = Dispatch_Rules_API.Get_Client_Value(3)) THEN\n         ifm_ := '!SCHEDULING.SORTBYEDD' || lf_;\n         ifm_ := ifm_ || '$OBJECT=SHOPORDERS' || lf_;\n         Transport_Util_API.Add_Command(ifm_);\n      ELSIF (dispatch_ = Dispatch_Rules_API.Get_Client_Value(2)) THEN\n         ifm_ := '!SCHEDULING.SORTBYLPST' || lf_;\n         ifm_ := ifm_ || '$OBJECT=SHOPORDERS' || lf_;\n         Transport_Util_API.Add_Command(ifm_);\n      ELSIF (dispatch_ = Dispatch_Rules_API.Get_Client_Value(1)) THEN\n         ifm_ := '!SCHEDULING.SORTBYFCFS' || lf_;\n         ifm_ := ifm_ || '$OBJECT=SHOPORDERS' || lf_;\n         Transport_Util_API.Add_Command(ifm_);\n      ELSE\n      END IF;\n      ifm_ := '!SCHEDULING.ACTION' || lf_;\n      ifm_ := ifm_ || '$OBJECT=SHOPORDERS' || lf_;\n      ifm_ := ifm_ || '$ACTION=SCHEDULE' || lf_;\n      Transport_Util_API.Add_Command(ifm_);\n      IF (pairwise_ = true_value_) THEN\n         IF (pairwise_time_ > 30) OR (pairwise_time_ < 0) THEN\n         END IF;\n         IF (reassign_ = true_value_) THEN\n         ELSE\n         END IF;\n         ifm_ := '!SCHEDULING.ACTION' || lf_;\n         ifm_ := ifm_ || '$OBJECT=SHOPORDERS' || lf_;", "original_code_length": 9921, "summary": null}
{"id": "Step_Copy_Steps", "context": {"api_name": "Step", "module": "percos", "file_summary": "Financial operations and accounting - Step", "function_name": "Copy_Steps", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 480, "code_lines": 416, "cyclomatic_complexity": 142, "estimated_tokens": 1567.8}, "pagerank_score": 0.00019543392005726433, "truncation_metadata": {"original_length": 19969, "truncated_length": 1636, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08192698682958585}}, "code": "PROCEDURE Copy_Steps (\n   company_              IN VARCHAR2,\n   accounting_year_      IN NUMBER,\n   accounting_period_    IN NUMBER,\n   procedure_id_         IN VARCHAR2,\n   ledger_id_            IN VARCHAR2,\n   allocation_type_      IN VARCHAR2,\n   src_budget_           IN VARCHAR2,\n   dest_budget_          IN VARCHAR2,\n   from_step_id_         IN VARCHAR2,\n   to_step_id_           IN VARCHAR2,\n   to_company_           IN VARCHAR2,\n-- ... key business logic ...\n   IF (procedure_exists_ = 'FALSE') THEN\n      RAISE no_dest_procedure;\n   ELSE\n      -- if procedure is Closed copying is not allowed ...\n      IF (dst_procedure_closed_ = 'TRUE') THEN\n         RAISE dst_procedure_is_closed;\n      END IF;\n      IF (dst_procedure_active_ = 'TRUE') THEN\n         IF (copy_mode_ = 'R') THEN\n            RAISE replace_in_active;\n         END IF;\n         IF (new_seq_no_ < last_executed_) THEN\n            RAISE insert_before_executed;\n         END IF;\n      END IF;\n      -- if copy in Replace mode,remove all existing steps ....\n      IF (copy_mode_ = 'R') THEN\n         Delete_Steps(to_company_,\n      ELSE\n         IF (step_in_procedure_ = 'TRUE') THEN\n            RAISE can_not_append;\n         END IF;\n      END IF;\n   END IF;\n   -- copy step from selected range ...\n                              max_seq_no_) LOOP\n      -- if step uses feactor and factor is not defined in destination\n      IF (step_row_.factor_id IS NOT NULL) THEN\n         IF (factor_exist_ = 'FALSE') THEN\n         END IF;\n      END IF;\n      -- if step uses distribution and it's not defined in destination\n      IF (step_row_.distribution_id IS NOT NULL) THEN", "original_code_length": 19969, "summary": null}
{"id": "ActiveSeparate_Validate_Comb___", "context": {"api_name": "ActiveSeparate", "module": "wo", "file_summary": "Customer order management and processing - ActiveSeparate", "function_name": "Validate_Comb___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 303, "code_lines": 270, "cyclomatic_complexity": 140, "estimated_tokens": 1550.9}, "pagerank_score": 0.00019149182787929524, "truncation_metadata": {"original_length": 15515, "truncated_length": 1709, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.11015146632291331}}, "code": "PROCEDURE Validate_Comb___ (\n   newrec_ IN OUT ACTIVE_WORK_ORDER_TAB%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec )\nIS\n   company_           VARCHAR2(20);\n   order_type_        VARCHAR2(3);\n   project_approved_  NUMBER;\n   project_no_        VARCHAR2(30);\n   external_project_flag_  VARCHAR2(10);\n   agr_customer_      ACTIVE_WORK_ORDER_TAB.CUSTOMER_NO%TYPE;\n   agr_contract_      ACTIVE_WORK_ORDER_TAB.Contract%TYPE;\n   ref_cust_          Active_Work_Order_Tab.Customer_No%TYPE;\n-- ... key business logic ...\n      IF (newrec_.connection_type = 'PLD') THEN\n         IF (newrec_.pld_plt_sq IS NULL OR\n             newrec_.mch_code IS NULL ) THEN\n         END IF;\n         $IF Component_Plades_SYS.INSTALLED $THEN\n            Plant_Order_Management_API.Validate_Wo_Object(newrec_.pld_plt_sq,\n         $ELSE\n      ELSIF (newrec_.connection_type IN ('EQUIPMENT', 'CATEGORY')) THEN\n         -- Object should be a Equipment Object. Check if the equipment object exists and that its operational status is not scrapped\n         IF ( (oldrec_.mch_code_contract IS NULL OR oldrec_.mch_code IS NULL ) OR newrec_.mch_code_contract <> oldrec_.mch_code_contract OR newrec_.mch_code <> oldrec_.mch_code ) THEN\n            IF (Equipment_Object_API.Get_Operational_Status_Db(newrec_.mch_code_contract,newrec_.mch_code) IS NULL) THEN\n            END IF;\n         END IF;        \n      END IF;\n   END IF;\n   IF (newrec_.obj_cust_warranty IS NOT NULL) THEN\n   END IF;\n   IF (newrec_.obj_sup_warranty IS NOT NULL) THEN\n   END IF;\n   IF (newrec_.cust_warr_type IS NOT NULL) THEN\n   END IF;\n   IF (newrec_.sup_warr_type IS NOT NULL) THEN\n   END IF;\n   -- Check that warranty supplier also is a customer when running Service management.", "original_code_length": 15515, "summary": null}
{"id": "ShopOrdUtil_Create_Data_Capture_Lov", "context": {"api_name": "ShopOrdUtil", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrdUtil", "function_name": "Create_Data_Capture_Lov", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 375, "code_lines": 359, "cyclomatic_complexity": 130, "estimated_tokens": 2061.8}, "pagerank_score": 0.0001980034146697676, "truncation_metadata": {"original_length": 19798, "truncated_length": 1648, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08324073138700878}}, "code": "PROCEDURE Create_Data_Capture_Lov (\n   contract_              IN VARCHAR2,\n   order_no_              IN VARCHAR2,\n   release_no_            IN VARCHAR2,\n   sequence_no_           IN VARCHAR2,\n   part_no_               IN VARCHAR2,\n   eng_chg_level_         IN VARCHAR2,\n   activity_seq_          IN NUMBER,\n   condition_code_        IN VARCHAR2,\n   lot_batch_no_          IN VARCHAR2,\n   capture_session_id_    IN NUMBER,\n   column_name_           IN VARCHAR2,\n-- ... key business logic ...\n         END IF;\n            WHEN ('PART_NO') THEN\n            WHEN ('LOCATION_NO') THEN\n            WHEN ('ORDER_NO') THEN\n            ELSE\n         IF (lov_value_tab_.COUNT > 0) THEN\n            FOR i IN lov_value_tab_.FIRST..lov_value_tab_.LAST LOOP\n               IF (lov_type_db_ != Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN\n                  IF (second_column_name_ IS NOT NULL) THEN\n                     IF (second_column_name_ = 'PART_DESCRIPTION') THEN\n                        IF (column_name_ = 'PART_NO') THEN\n                        ELSE\n                           local_part_no_ := Get_Column_Value_If_Unique(contract_       => contract_,\n                        END IF;\n                     ELSIF (second_column_name_ = 'LOCATION_DESCRIPTION') THEN\n                     END IF;\n                  END IF;\n               END IF;\n               EXIT WHEN exit_lov_;\n            END LOOP;\n         END IF;\n      ELSIF lov_id_ = 2 THEN\n         FOR lov_rec_ IN get_list_of_values_2 LOOP\n            EXIT WHEN exit_lov_;\n         END LOOP;\n      ELSIF lov_id_ = 3 THEN\n         IF (lov_type_db_  = Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN", "original_code_length": 19798, "summary": null}
{"id": "VimSerial_Set_Maint_Program", "context": {"api_name": "VimSerial", "module": "vim", "file_summary": "Customer order management and processing - VimSerial", "function_name": "Set_Maint_Program", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 235, "code_lines": 235, "cyclomatic_complexity": 122, "estimated_tokens": 2137.2000000000003}, "pagerank_score": 0.00028195091115468143, "truncation_metadata": {"original_length": 18842, "truncated_length": 1714, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09096698864239465}}, "code": "PROCEDURE Set_Maint_Program (\n   info_                OUT VARCHAR2,\n   part_no_             IN  VARCHAR2,\n   serial_no_           IN  VARCHAR2,\n   maint_prog_id_       IN  VARCHAR2,\n   maint_prog_rev_      IN  VARCHAR2,\n   maint_group_         IN  VARCHAR2,\n   set_maint_prog_str_  IN  VARCHAR2 DEFAULT 'FALSE',\n   raise_lock_          IN  VARCHAR2 DEFAULT 'TRUE',\n   raise_act_           IN  VARCHAR2 DEFAULT 'TRUE',\n   set_maint_group_str_ IN  VARCHAR2 DEFAULT 'TRUE',\n   str_unlock_          IN  VARCHAR2 DEFAULT 'FALSE' )\n-- ... key business logic ...\n   IF ((maint_prog_id_ IS NOT NULL) AND (maint_prog_rev_ IS NOT NULL) AND (maint_group_ IS NULL) AND (maint_prog_str_ = 'TRUE')) THEN\n      FOR structure_ IN Vim_Serial_Structure_API.Get_Compl_Serial_Structure(part_no_, serial_no_) LOOP\n         IF (maint_prog_required_ = 'TRUE') THEN\n            IF (Maint_Program_Maint_Group_API.Maint_Gr_Exist_On_Maint_Prog(structure_.part_no, structure_.part_rev, str_serial_rec_.maint_group, maint_prog_id_, maint_prog_rev_) = 'TRUE') THEN\n               Set_Maint_Program___(structure_.part_no, structure_.serial_no, maint_prog_id_, maint_prog_rev_, raise_lock_, skip_err_, skip_err_);\n               serials_updated_ := serials_updated_ + 1;\n            ELSE\n               serials_not_updated_ := serials_not_updated_ + 1;               \n            END IF;\n         END IF;\n      END LOOP;\n   -- Change for selected serial only (maint_prog_str_ = 'FALSE')\n   ELSIF ((maint_prog_id_ IS NOT NULL) AND (maint_prog_rev_ IS NOT NULL) AND (maint_group_ IS NULL) AND (maint_prog_str_ = 'FALSE')) THEN\n      IF ((tmp_maint_prog_id_ IS NOT NULL) AND (tmp_maint_prog_rev_ IS NOT NULL) AND (valid_maint_group_ = 'FALSE')) THEN", "original_code_length": 18842, "summary": null}
{"id": "CbsSoInt_So_Operation_Modified", "context": {"api_name": "CbsSoInt", "module": "cbsint", "file_summary": "Customer order management and processing - CbsSoInt", "function_name": "So_Operation_Modified", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 427, "code_lines": 382, "cyclomatic_complexity": 121, "estimated_tokens": 1379.3}, "pagerank_score": 0.00023699432843038963, "truncation_metadata": {"original_length": 19113, "truncated_length": 1669, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08732276461047454}}, "code": "PROCEDURE So_Operation_Modified (\n   order_no_                      IN VARCHAR2,\n   release_no_                    IN VARCHAR2,\n   sequence_no_                   IN VARCHAR2,\n   operation_no_                  IN NUMBER,\n   contract_                      IN VARCHAR2,\n   oldrec_                        IN Shop_Order_Operation_Tab%ROWTYPE,\n   source_                        IN VARCHAR2,\n   reported_mach_setup_time_      IN NUMBER,\n   reported_mach_time_            IN NUMBER,\n   reported_labor_setup_time_     IN NUMBER,\n   reported_labor_time_           IN NUMBER,\n-- ... key business logic ...\n   IF (mfg_server_state_  = 'TRUE') THEN\n      IF (oldrec_.revised_qty_due           != newrec_.revised_qty_due           OR\n      THEN\n         send_with_modify_ := 'TRUE';\n         scheduling_modify_ := 1;\n      END IF;\n      IF ((oldrec_.note_text IS NULL)     AND (newrec_.note_text IS NOT NULL))   OR\n         (oldrec_.note_text != newrec_.note_text) THEN\n         IF(scheduling_modify_ != 1)THEN\n            send_with_modify_  := 'TRUE';\n            scheduling_modify_ := 1;\n         END IF;\n      END IF;\n      IF ((oldrec_.operation_block_id IS NULL)     AND (newrec_.operation_block_id IS NOT NULL))   OR\n            (NVL(oldrec_.operation_block_id, 'STRING_NULL') != NVL(newrec_.operation_block_id, 'STRING_NULL' )) THEN\n            IF(scheduling_modify_ != 1)THEN\n               send_with_modify_  := 'TRUE';\n               scheduling_modify_ := 1;\n            END IF;\n         END IF;\n      IF (((oldrec_.oper_status_code       != newrec_.oper_status_code) AND\n      THEN\n      END IF;\n      -- Check if labor class changes needs to be sent to scheduling server.", "original_code_length": 19113, "summary": null}
{"id": "CbsSoInt_Create_Operation___", "context": {"api_name": "CbsSoInt", "module": "cbsint", "file_summary": "Customer order management and processing - CbsSoInt", "function_name": "Create_Operation___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 182, "code_lines": 154, "cyclomatic_complexity": 119, "estimated_tokens": 893.1}, "pagerank_score": 0.00023699432843038963, "truncation_metadata": {"original_length": 9317, "truncated_length": 1666, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.17881292261457551}}, "code": "PROCEDURE Create_Operation___ (\n   oper_rec_              IN SHOP_ORDER_OPERATION_TAB%ROWTYPE,\n   reopen_flag_           IN VARCHAR2 )\nIS\n   pd_                           CONSTANT VARCHAR2(2) := Scheduling_Int_API.path_delim_;\n   ifm_                          VARCHAR2(32500);\n   order_name_                   VARCHAR2(75);\n   wc_name_                      VARCHAR2(75);\n   transaction_id_               NUMBER;\n   overlap_unit_to_cbs_          NUMBER;\n   closed_in_cbs_                VARCHAR2(20);\n   include_setup_                NUMBER;\n-- ... key business logic ...\n      IF (oper_rec_.overlap_unit NOT IN ('UNITS', 'PERCENT')) THEN\n         ifm_ := ifm_ || '$IDI_OVERLAP_TYPE=1' || lf_;\n      ELSE\n         IF (oper_rec_.overlap_unit = 'UNITS') THEN\n         ELSE\n         END IF;\n         ifm_ := ifm_ || '$IDI_OVERLAP_TYPE=' || overlap_unit_to_cbs_ || lf_;\n      END IF;\n      IF (oper_rec_.include_setup_for_overlap = 'Y') THEN\n      ELSE\n      END IF;\n      ifm_ := ifm_ || '$IDI_INCLUDE_SETUP=' || include_setup_ || lf_;\n      ifm_ := ifm_ || '$IDI_QTY_DUE='              || oper_rec_.revised_qty_due        || lf_;\n      ifm_ := ifm_ || '$IDI_QTY_COMPLETE=0'        || lf_;\n      ifm_ := ifm_ || '$IDI_QTY_SCRAPPED=0'        || lf_;\n      ifm_ := ifm_ || '$IDI_MACH_SETUP_REPORTED='  || rep_machine_setup_time_ || lf_;\n      ifm_ := ifm_ || '$IDI_MACH_REPORTED='        || rep_machine_run_time_   || lf_;\n      ifm_ := ifm_ || '$IDI_LABOR_SETUP_REPORTED=' || rep_labor_setup_time_   || lf_;\n      ifm_ := ifm_ || '$IDI_LABOR_REPORTED='       || rep_labor_run_time_     || lf_;\n      ifm_ := ifm_ || '$IDI_TIME_SETUP=' || oper_rec_.mach_setup_time || lf_;", "original_code_length": 9317, "summary": null}
{"id": "VimSerialStructure_Validate_Alternate___", "context": {"api_name": "VimSerialStructure", "module": "vim", "file_summary": "Customer order management and processing - VimSerialStructure", "function_name": "Validate_Alternate___", "previous_function": null, "next_function": "Validate_Dependencies___", "complexity_metrics": {"total_lines": 253, "code_lines": 253, "cyclomatic_complexity": 119, "estimated_tokens": 1683.5}, "pagerank_score": 0.00018739465816759772, "truncation_metadata": {"original_length": 17830, "truncated_length": 1721, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09652271452607965}}, "code": "PROCEDURE Validate_Alternate___ (\n   parent_seq_no_     IN NUMBER,\n   top_part_no_       IN VARCHAR2,\n   top_part_rev_      IN VARCHAR2,\n   structure_address_ IN VARCHAR2,\n   old_part_no_       IN VARCHAR2,\n   old_part_rev_      IN VARCHAR2,\n   old_serial_no_     IN VARCHAR2,\n   new_part_no_       IN VARCHAR2,\n   new_part_rev_      IN VARCHAR2,\n   new_serial_no_     IN VARCHAR2,\n   sst_rec_           IN Serial_Structure_Template_API.Public_Rec,\n-- ... key business logic ...\n      END IF;\n   ELSE\n   END IF;\n   -- check if an alternate is installed in the structure position - start the check if the old and new part are different\n   IF ((nvl(l_old_part_no_, ' ') != new_part_no_) OR (nvl(l_old_part_rev_, ' ') != new_part_rev_)) THEN\n      -- check position alternates\n      IF (nvl(validate_all_, FALSE) = TRUE) THEN\n         IF (nvl(valid_pos_alt_, 'FALSE') = 'FALSE') THEN\n            --it has been changed in template. Check all alternates.\n         END IF;\n      ELSE\n         IF (new_serial_no_ IS NOT NULL) THEN\n            Alternate_Part_Util_API.Check_Valid_Pos_Alternate(valid_pos_alt_, mod_code_, mod_rev_, validate_mod_, allow_without_compliance_, top_part_no_, top_part_rev_, structure_address_, l_old_part_no_, l_old_part_rev_, l_old_serial_no_, new_part_no_, new_part_rev_, l_parent_rec_.part_no, l_parent_rec_.serial_no, raise_error_,not_installed_);\n         ELSE\n            Alternate_Part_Util_API.Check_Valid_Pos_Alternate(valid_pos_alt_, mod_code_, mod_rev_, validate_mod_, allow_without_compliance_, top_part_no_, top_part_rev_, structure_address_, l_old_part_no_, l_old_part_rev_, NULL, new_part_no_, new_part_rev_, l_parent_rec_.part_no, l_parent_rec_.serial_no, raise_error_,not_installed_);", "original_code_length": 17830, "summary": null}
{"id": "ManufPartAttribute_Check_Update___", "context": {"api_name": "ManufPartAttribute", "module": "mfgstd", "file_summary": "Inventory management and tracking - ManufPartAttribute", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 239, "code_lines": 205, "cyclomatic_complexity": 118, "estimated_tokens": 1363.7}, "pagerank_score": 0.00023388095102400475, "truncation_metadata": {"original_length": 11907, "truncated_length": 1643, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.13798605862097926}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     manuf_part_attribute_tab%ROWTYPE,\n   newrec_ IN OUT manuf_part_attribute_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_  VARCHAR2(30);\n   value_ VARCHAR2(4000);\n   unit_type_                 VARCHAR2(20);\n   volume_type_               VARCHAR2(20);\n   weight_type_               VARCHAR2(20);\n   serial_tracked_            BOOLEAN;\n-- ... key business logic ...\n   END IF;\n   IF (newrec_.close_tolerance < 0) THEN\n   END IF;\n   IF (newrec_.density <= 0) AND (unit_type_ IN (volume_type_, weight_type_))\n   THEN\n      Error_SYS.Record_General(lu_name_, 'DENSITYMISSING: Density must have a value > 0 if UoM is of type VOLUME or WEIGHT.');\n   END IF;\n   IF (newrec_.density IS NOT NULL) AND\n      (unit_type_ NOT IN (volume_type_, weight_type_)) THEN\n      Error_SYS.Record_General(lu_name_, 'DENSITYNOTALLOWED: Density cannot be entered if UoM is not of type VOLUME or WEIGHT.');\n   END IF;\n   IF newrec_.default_print_unit IS NOT NULL THEN\n      IF Iso_Unit_API.Get_Base_Unit( inv_part_rec_.unit_meas )\n                   <> Iso_Unit_API.Get_Base_Unit( newrec_.default_print_unit ) THEN\n         IF Iso_Unit_API.Get_Unit_Type_Db(inv_part_rec_.unit_meas) IN ('WEIGHT', 'VOLUME') AND Iso_Unit_API.Get_Unit_Type_Db(newrec_.default_print_unit) IN ('WEIGHT', 'VOLUME') THEN\n            IF newrec_.density IS NULL  THEN\n            END IF;\n         ELSE\n            Error_SYS.Record_General(lu_name_, 'NOTSAMEUOMBASE: The Default Print UoM must be the same Base UoM as the Inventory Part UoM if not for UoMs in weight and volume.');\n         END IF;\n      END IF;", "original_code_length": 11907, "summary": null}
{"id": "InventoryLocation_Create_Data_Capture_Lov", "context": {"api_name": "InventoryLocation", "module": "invent", "file_summary": "Inventory management and tracking - InventoryLocation", "function_name": "Create_Data_Capture_Lov", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 370, "code_lines": 344, "cyclomatic_complexity": 116, "estimated_tokens": 1717.3}, "pagerank_score": 0.0002209205998334247, "truncation_metadata": {"original_length": 20412, "truncated_length": 1666, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08161865569272976}}, "code": "PROCEDURE Create_Data_Capture_Lov (\n   contract_                  IN VARCHAR2,\n   capture_session_id_        IN NUMBER,\n   lov_id_                    IN NUMBER DEFAULT 1,\n   exclude_location_no_       IN VARCHAR2 DEFAULT NULL,\n   include_location_no_       IN VARCHAR2 DEFAULT NULL,\n   include_warehouse_id_      IN VARCHAR2 DEFAULT NULL,    \n   exclude_remote_warehouses_ IN BOOLEAN DEFAULT FALSE )\nIS\n   lov_item_description_ VARCHAR2(200);\n   session_rec_          Data_Capture_Common_Util_API.Session_Rec;\n   lov_row_limitation_   NUMBER;\n-- ... key business logic ...\n         FOR lov_rec_ IN get_list_of_values_1 LOOP\n            IF (lov_rec_.location_name IS NOT NULL) THEN\n            ELSE\n            END IF;\n            EXIT WHEN exit_lov_;\n         END LOOP;\n      ELSIF lov_id_ = 2 THEN\n         FOR lov_rec_ IN get_list_of_values_2 LOOP\n            IF (lov_rec_.location_name IS NOT NULL) THEN\n            ELSE\n            END IF;\n            EXIT WHEN exit_lov_;\n         END LOOP;\n      ELSIF lov_id_ = 3 THEN\n         IF (session_rec_.capture_process_id = 'REGISTER_ARRIVALS' AND \n            Fnd_Boolean_API.Evaluate_Db(Data_Capture_Config_Detail_API.Get_Enabled_Db(session_rec_.capture_process_id, session_rec_.capture_config_id, 'DISPLAY_WAREHOUSE_INFO'))) THEN\n         END IF;\n         FOR lov_rec_ IN get_list_of_values_3 LOOP\n            IF (exclude_remote_warehouses_) THEN\n            END IF;\n            IF (include_location_) THEN\n               IF (lov_rec_.location_name IS NOT NULL) THEN\n               ELSE\n               END IF;\n               IF display_warehouse_info_ THEN\n               END IF;\n               EXIT WHEN exit_lov_;", "original_code_length": 20412, "summary": null}
{"id": "BusinessUnitRelation_Check_Insert___", "context": {"api_name": "BusinessUnitRelation", "module": "person", "file_summary": "Financial operations and accounting - BusinessUnitRelation", "function_name": "Check_Insert___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 318, "code_lines": 286, "cyclomatic_complexity": 115, "estimated_tokens": 1534.0}, "pagerank_score": 0.000220510722547958, "truncation_metadata": {"original_length": 15936, "truncated_length": 1632, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10240963855421686}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT business_unit_relation_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_  VARCHAR2(30);\n   value_ VARCHAR2(4000);\n   business_unit_type_db_  VARCHAR2(20);\n   business_unit_type_     VARCHAR2(50);\n   company_id_             person_company_tab.company_id%TYPE := NULL;\n   org_company_id_         person_company_tab.company_id%TYPE;\n   top_level_company_id_   person_company_tab.company_id%TYPE := NULL;\n-- ... key business logic ...\n   ELSE\n      subst_access_check_ := 'TRUE';\n   END IF;\n   IF (Client_SYS.Item_Exist('FROM_ROLE_DELEGATION', attr_)) THEN\n   ELSE\n   END IF;\n   IF newrec_.relation_type = 'ACCESS' THEN                   \n      Check_Valid_Interval__(newrec_.valid_from, newrec_.valid_to);\n      IF (newrec_.related_to IS NOT NULL AND newrec_.position_id IS NOT NULL) THEN         \n         IF business_unit_api.Get_Business_Unit_Type_Db(newrec_.related_to) = 'COMPANY' THEN\n         ELSE            \n         END IF;\n         IF (User_Access_API.Is_User_Available_Pos_Code(NULL, newrec_.position_id, struct_id_, org_code_) = 'FALSE') THEN\n            IF subst_access_check_= 'FALSE' THEN \n               FOR rec_ IN get_subst_access(struct_id_) LOOP\n                  IF rec_.pos_code = newrec_.position_id THEN\n                     check_ok_ := FALSE;\n                  ELSE\n                     check_ok_ := TRUE;\n                  END IF;\n               END LOOP;\n            END IF;\n            IF (subst_access_check_ = 'TRUE') \n            OR (subst_access_check_= 'FALSE' AND check_ok_) THEN\n            END IF;\n         END IF;", "original_code_length": 15936, "summary": null}
{"id": "FaObject_Make_Accnt_Depr_Res_Trans___", "context": {"api_name": "FaObject", "module": "fixass", "file_summary": "Customer order management and processing - FaObject", "function_name": "Make_Accnt_Depr_Res_Trans___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 536, "code_lines": 500, "cyclomatic_complexity": 115, "estimated_tokens": 1956.5}, "pagerank_score": 0.00021210060479732703, "truncation_metadata": {"original_length": 27711, "truncated_length": 1649, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.05950705496012414}}, "code": "PROCEDURE Make_Accnt_Depr_Res_Trans___ (\n   company_             IN VARCHAR2,\n   proposal_id_         IN VARCHAR2,\n   user_group_          IN VARCHAR2,\n   voucher_type_        IN VARCHAR2,\n   voucher_date_        IN DATE,\n   description_         IN VARCHAR2,\n   trans_type_db_       IN VARCHAR2 DEFAULT NULL,\n   via_res_             IN BOOLEAN  DEFAULT NULL,\n   change_reason_       IN VARCHAR2 DEFAULT NULL,\n   first_obj_id_        IN NUMBER   DEFAULT NULL,\n   last_obj_id_         IN NUMBER   DEFAULT NULL)\n-- ... key business logic ...\n            IF (run_obj_trans_id_) THEN         \n            END IF;\n         IF (run_obj_trans_id_) THEN\n         ELSE            \n         END IF;         \n      END IF;\n      LOOP      \n         EXIT WHEN trans_tab_rec_cnt_ < 1;\n         IF (is_first_) THEN\n            IF (proposal_id_ IS NOT NULL) THEN\n            ELSE\n            END IF;\n         END IF;\n         WHILE count_ <= trans_tab_rec_cnt_ LOOP     \n            WHILE ( count_ <= trans_tab_rec_cnt_ AND old_book_id_ = trans_rec_.book_id ) LOOP\n               IF ( do_create_accounting_ ) THEN\n                  -- NOTE that default_attr_ may be modified in Make_Acctrans_Posting_Accnt___\n                  IF (book_vou_type_ IS NULL) THEN\n                  END IF;\n                  IF (book_vou_type_ <> default_voucher_row_.voucher_type ) THEN\n                     IF ( voucher_id_ IS NOT NULL) THEN\n                        Voucher_End_Check___( voucher_id_,\n                        -- update voucher no of accounting transactions\n                     END IF;\n                     /*  IF (all_vou_no_ IS NULL) THEN\n                       ELSE", "original_code_length": 27711, "summary": null}
{"id": "PreAccounting_Compile_Codestrings", "context": {"api_name": "PreAccounting", "module": "mpccom", "file_summary": "Customer order management and processing - PreAccounting", "function_name": "Compile_Codestrings", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 272, "code_lines": 235, "cyclomatic_complexity": 114, "estimated_tokens": 1253.2}, "pagerank_score": 0.00020549062276102088, "truncation_metadata": {"original_length": 11619, "truncated_length": 1653, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.14226697650400205}}, "code": "PROCEDURE Compile_Codestrings (\n   codestring_tab_             IN OUT Codestring_Table_Type,\n   codestring_rec_             IN OUT Accounting_Codestr_API.CodestrRec,\n   control_type_key_rec_       IN     Mpccom_Accounting_API.Control_Type_Key,\n   pre_accounting_id_          IN     NUMBER,\n   pre_accounting_flag_db_     IN     VARCHAR2,\n   project_accounting_flag_db_ IN     VARCHAR2)\nIS\n   parent_rec_ PRE_ACCOUNTING_TAB%ROWTYPE;\n   counter_    NUMBER := 0;\n   --\n   company_                 VARCHAR2(20);\n-- ... key business logic ...\n      IF (parent_rec_.account_no IS NOT NULL) THEN\n         IF (((project_code_part_  = 'A') AND (project_pre_posting_)) OR\n             ((project_code_part_ != 'A') AND (other_pre_posting_  ))) THEN\n         END IF;\n      END IF;\n      IF (parent_rec_.codeno_b IS NOT NULL) THEN\n         IF (((project_code_part_  = 'B') AND (project_pre_posting_)) OR\n             ((project_code_part_ != 'B') AND (other_pre_posting_  ))) THEN\n         END IF;\n      END IF;\n      IF (parent_rec_.codeno_c IS NOT NULL) THEN\n         IF (((project_code_part_  = 'C') AND (project_pre_posting_)) OR\n             ((project_code_part_ != 'C') AND (other_pre_posting_  ))) THEN\n         END IF;\n      END IF;\n      IF (parent_rec_.codeno_d IS NOT NULL) THEN\n         IF (((project_code_part_  = 'D') AND (project_pre_posting_)) OR\n             ((project_code_part_ != 'D') AND (other_pre_posting_  ))) THEN\n         END IF;\n      END IF;\n      IF (parent_rec_.codeno_e IS NOT NULL) THEN\n         IF (((project_code_part_  = 'E') AND (project_pre_posting_)) OR\n             ((project_code_part_ != 'E') AND (other_pre_posting_  ))) THEN", "original_code_length": 11619, "summary": null}
{"id": "VimSerial_Rename_Serial__", "context": {"api_name": "VimSerial", "module": "vim", "file_summary": "Customer order management and processing - VimSerial", "function_name": "Rename_Serial__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 262, "code_lines": 262, "cyclomatic_complexity": 113, "estimated_tokens": 1501.5}, "pagerank_score": 0.00028195091115468143, "truncation_metadata": {"original_length": 13537, "truncated_length": 1751, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.12934919110585802}}, "code": "PROCEDURE Rename_Serial__ (\n   info_                  OUT VARCHAR2,\n   from_part_no_          IN  VARCHAR2,\n   from_part_rev_         IN  VARCHAR2,\n   from_serial_no_        IN  VARCHAR2,\n   to_part_no_            IN  VARCHAR2,\n   to_part_rev_           IN  VARCHAR2,\n   to_serial_no_          IN  VARCHAR2,\n   eco_no_                IN  VARCHAR2,\n   maint_group_           IN  VARCHAR2,\n   manufacture_no_        IN  VARCHAR2,\n   manufactured_part_no_  IN  VARCHAR2,\n-- ... key business logic ...\n      Part_Manu_Part_Rev_API.Check_Manu_Of_Part_Rev(to_part_no_, to_part_rev_, nvl(manufacture_no_, psc_rec_.manufacturer_no), nvl(manufactured_part_no_, psc_rec_.manu_part_no));\n   END IF;\n   -- check if order number exist\n   IF (eco_no_ IS NOT NULL) THEN\n   END IF;\n   -- check if valid to enter serial number for this part\n   -- check that status is not locked\n   IF (Part_Serial_Catalog_API.Is_Locked_For_Update(lu_rec_.part_no, lu_rec_.serial_no) = 'TRUE') THEN\n   END IF;\n   -- check if new primary operation parameter exist in old maintenance group. IF not, start values must be added\n   IF (Part_Oper_Parameter_API.Check_Exist(new_oper_param_, from_part_no_, lu_rec_.maint_group) = 'FALSE') THEN\n   END IF;\n   -- check that the revision is valid for serial tracking\n   IF (sst_status_ = 'Obsolete' AND rename_reason_db_ = 'MODIFICATION COMPLIANCE') THEN\n      Error_SYS.Record_General(lu_name_, 'PARTOBSOLETERR: Template structure for part revision (:P1, :P2) is obsolete. You cannot rename to an obsolete template if the reason for renaming is Modification Compliance.', top_part_no_, top_part_rev_);\n   END IF;   \n   IF ((rename_reason_db_ IS NOT NULL) AND (rename_reason_db_ IN ('CORRECT TYPING ERROR','MODIFY GENERATED SERIAL NUMBER'))) THEN", "original_code_length": 13537, "summary": null}
{"id": "FaObject_Rollback_Disposal___", "context": {"api_name": "FaObject", "module": "fixass", "file_summary": "Customer order management and processing - FaObject", "function_name": "Rollback_Disposal___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 414, "code_lines": 379, "cyclomatic_complexity": 112, "estimated_tokens": 1504.1000000000001}, "pagerank_score": 0.00021210060479732703, "truncation_metadata": {"original_length": 21542, "truncated_length": 1642, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07622319190418717}}, "code": "PROCEDURE Rollback_Disposal___(\n   company_              IN VARCHAR2,\n   object_id_            IN VARCHAR2,\n   attr_                 IN VARCHAR2,\n   obj_trans_id_attr_    IN VARCHAR2,\n   company_currency_rec_ IN Currency_Amount_API.CompanyCurrencyRec,\n   correction_type_db_   IN VARCHAR2)\nIS\n   TYPE NetValueRec IS RECORD (voucher_type      FA_ACCOUNTING_TRANSACTION_TAB.voucher_type%TYPE,\n                               net_value         NUMBER,\n                               par_cur_net_value NUMBER);\n   TYPE OldAndNewTransRec IS RECORD (old_trans FA_OBJECT_TRANSACTION_TAB.object_transaction_id%TYPE,\n-- ... key business logic ...\n      IF (name_ = 'ID') THEN\n         FOR tot_rec_ IN get_total_net LOOP\n            IF (net_value_tab_.COUNT > 0) THEN\n               FOR net_count_ IN net_value_tab_.FIRST..net_value_tab_.LAST LOOP\n                  IF (net_value_tab_(net_count_).voucher_type = tot_rec_.voucher_type) THEN\n                  END IF;\n               END LOOP;\n            END IF;\n            IF (NOT(found_)) THEN\n            END IF;\n         END LOOP;\n         FOR vou_rec_ IN get_voucher_type LOOP\n            IF (vou_type_tab_.COUNT > 0) THEN\n               FOR net_count_ IN vou_type_tab_.FIRST..vou_type_tab_.LAST LOOP\n                  IF (vou_type_tab_(net_count_) = vou_rec_.voucher_type) THEN\n                  END IF;\n               END LOOP;\n            END IF;\n            IF (NOT(found_)) THEN\n            END IF;\n         END LOOP;\n      END IF;\n   END LOOP;\n   IF (vou_type_tab_.COUNT > 0) THEN\n      FOR net_count_ IN vou_type_tab_.FIRST..vou_type_tab_.LAST LOOP\n         IF (net_value_tab_.COUNT > 0) THEN", "original_code_length": 21542, "summary": null}
{"id": "PresObjectUtil_Upgrade_Role", "context": {"api_name": "PresObjectUtil", "module": "fndbas", "file_summary": "Business logic and data operations - PresObjectUtil", "function_name": "Upgrade_Role", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 192, "code_lines": 177, "cyclomatic_complexity": 110, "estimated_tokens": 1418.3}, "pagerank_score": 0.00026975228242336676, "truncation_metadata": {"original_length": 12744, "truncated_length": 1649, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.12939422473320777}}, "code": "PROCEDURE Upgrade_Role  (\n   role_                     IN VARCHAR2,\n   upgrade_option_           IN VARCHAR2 DEFAULT 'GRANT_NEW_DB_OBJECTS', \n   grant_new_dependencies_   IN VARCHAR2 DEFAULT 'FALSE',\n   grant_mode_               IN VARCHAR2 DEFAULT 'DYNAMIC', \n   raise_error_              IN VARCHAR2 DEFAULT 'FALSE',\n   log_                      IN VARCHAR2 DEFAULT 'APP_TRACE',\n   run_as_test_              IN VARCHAR2 DEFAULT 'FALSE')\nIS\n  \n   po_recursive_  VARCHAR2(5) := grant_new_dependencies_;\n   sep_ CLOB := Client_SYS.text_separator_; \n-- ... key business logic ...\n      IF (upgrade_option_ = 'REGRANT_MODIFIED_PO') THEN\n         -- For upgrade option REGRANT_MODIFIED_PO , if recursive pres object granting, we only grant new dependencies\n      ELSE\n         -- For upgrade option REGRANT_ALL , if recursive pres object granting, we grant all dependencies\n      END IF;\n      FOR po_ IN get_pres_objects(role_,upgrade_option_) LOOP\n         IF log_ = 'APP_LOG' THEN\n            IF module_ IS NULL OR module_ <> po_.module THEN\n            END IF;\n         END IF;\n         --Dynamic means that if role already contains grants for this presentation object to transaction methods then do a full grant for this presentation object otherwise do a grant query since this would most likely be the wanted setup\n         --grant_new_dependencies_ option will also grant non granted pres objects if they are new and added as children to already granted presentation objects\n         IF ((grant_mode_ = 'DYNAMIC' AND Transactional_Methods_Granted(po_.po_id, role_) = 'TRUE') OR grant_mode_ = 'FULL')  THEN\n            IF log_ = 'APP_TRACE' THEN ", "original_code_length": 12744, "summary": null}
{"id": "PreAccounting_Check_Mandatory_Code_Parts", "context": {"api_name": "PreAccounting", "module": "mpccom", "file_summary": "Customer order management and processing - PreAccounting", "function_name": "Check_Mandatory_Code_Parts", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 236, "code_lines": 226, "cyclomatic_complexity": 109, "estimated_tokens": 1049.1000000000001}, "pagerank_score": 0.00020549062276102088, "truncation_metadata": {"original_length": 8560, "truncated_length": 1641, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1917056074766355}}, "code": "PROCEDURE Check_Mandatory_Code_Parts (\n   pre_accounting_id_            IN NUMBER,\n   posting_type_                 IN VARCHAR2,\n   company_                      IN VARCHAR2,\n   source_identifier_            IN VARCHAR2,\n   check_only_project_code_part_ IN BOOLEAN DEFAULT FALSE )\nIS\n   code_a_flag_       NUMBER;  -- for account_no\n   code_b_flag_       NUMBER;  -- for codeno_b\n   code_c_flag_       NUMBER;  -- for codeno_c\n   code_d_flag_       NUMBER;  -- for codeno_d\n   code_e_flag_       NUMBER;  -- for codeno_e\n-- ... key business logic ...\n      END IF;\n      IF (project_code_part_ != 'G') THEN\n      END IF;\n      IF (project_code_part_ != 'H') THEN\n      END IF;\n      IF (project_code_part_ != 'I') THEN\n      END IF;\n      IF (project_code_part_ != 'J') THEN\n      END IF;\n   END IF;\n   -- Check if split rows (children) exist.\n   IF get_children%FOUND THEN\n   ELSE\n   END IF;\n   IF NOT children_ THEN\n      -- Check the main pre accounting.\n      IF ((code_a_flag_ = 1) AND (main_rec_.account_no IS NULL)) THEN\n         RAISE code_part_missing;\n      END IF;\n      IF ((code_b_flag_ = 1) AND (main_rec_.codeno_b IS NULL)) THEN\n         RAISE code_part_missing;\n      END IF;\n      IF ((code_c_flag_ = 1) AND (main_rec_.codeno_c IS NULL)) THEN\n         RAISE code_part_missing;\n      END IF;\n      IF ((code_d_flag_ = 1) AND (main_rec_.codeno_d IS NULL)) THEN\n         RAISE code_part_missing;\n      END IF;\n      IF ((code_e_flag_ = 1) AND (main_rec_.codeno_e IS NULL)) THEN\n         RAISE code_part_missing;\n      END IF;\n      IF ((code_f_flag_ = 1) AND (main_rec_.codeno_f IS NULL)) THEN\n         RAISE code_part_missing;", "original_code_length": 8560, "summary": null}
{"id": "SubContract_Check_Update___", "context": {"api_name": "SubContract", "module": "subcon", "file_summary": "Invoice processing and management - SubContract", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 142, "code_lines": 127, "cyclomatic_complexity": 108, "estimated_tokens": 1281.8}, "pagerank_score": 0.00022746205019725927, "truncation_metadata": {"original_length": 9829, "truncated_length": 1673, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.17021060128192084}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_       IN     sub_contract_tab%ROWTYPE,\n   newrec_       IN OUT sub_contract_tab%ROWTYPE,\n   indrec_       IN OUT Indicator_Rec,\n   attr_         IN OUT VARCHAR2 )\nIS\n   sub_con_status_      VARCHAR2(2000);\n   supplier_id_changed_ BOOLEAN := FALSE;\n   afp_exist_           VARCHAR2(5);\n   indicator_           NUMBER;\n   valuation_exist_     VARCHAR2(5);\n   sub_contract_item_exist_ VARCHAR2(5);\n-- ... key business logic ...\n   END IF;\n   IF newrec_.discount != oldrec_.discount AND Sub_Con_Revision_Api.Get_Cost_Reported_Rev_Seq(newrec_.sub_con_no) IS NOT NULL THEN\n         'CHANGEPLANDREVDIS: Changing the discount will effect the planned cost. Please select the update planned cost menu option in the sub contract line items to reflect this change. Do you want to continue?');\n   END IF;\n   IF (supplier_id_changed_) THEN\n      IF (oldrec_.supplier_id IS NOT NULL AND newrec_.supplier_id IS NOT NULL) THEN\n            'SUPPNEWTAX: Changing the supplier may delete the items'' current taxes and be replaced by the taxes of this new supplier. This process may also take a long time. Do you still want to proceed?');\n      END IF;\n      IF (sub_con_status_ IN ('Awarded','Under Review','Active')) THEN\n         Error_SYS.Record_General(lu_name_, 'SUBCONMODSUPP: The supplier can only be modified when the sub contract is in status Planned, Released, or Submitted.',NULL,NULL,NULL);\n      END IF;\n   END IF;\n   -- no modification is allowed if status is closed or cancelled\n   IF (sub_con_status_ = 'Closed') THEN\n      Error_SYS.Record_General(lu_name_, 'SUBCONCLOSED: Update is not allowed if the Sub Contract is in status Closed');", "original_code_length": 9829, "summary": null}
{"id": "VimSerial_Set_Current_Stress_Rating", "context": {"api_name": "VimSerial", "module": "vim", "file_summary": "Customer order management and processing - VimSerial", "function_name": "Set_Current_Stress_Rating", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 168, "code_lines": 168, "cyclomatic_complexity": 107, "estimated_tokens": 1129.7}, "pagerank_score": 0.00028195091115468143, "truncation_metadata": {"original_length": 10761, "truncated_length": 1707, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.15862838026205742}}, "code": "PROCEDURE Set_Current_Stress_Rating (\n   part_no_            IN VARCHAR2,\n   serial_no_          IN VARCHAR2,\n   template_part_no_   IN VARCHAR2,\n   template_part_rev_  IN VARCHAR2,\n   stress_rating_id_   IN VARCHAR2,\n   life_limited_       IN VARCHAR2 DEFAULT NULL,\n   date_changed_       IN DATE DEFAULT NULL,\n   generate_hist_      IN VARCHAR2 DEFAULT 'TRUE',\n   stress_rating_type_ IN VARCHAR2 DEFAULT 'CURRENT',\n   remark_             IN VARCHAR2 DEFAULT NULL )\nIS\n-- ... key business logic ...\n         FOR oper_param_rec IN Oper_Per_Part_API.Get_Llp_Oper_Param(part_no_) LOOP\n            IF (template_part_no_ IS NOT NULL AND template_part_rev_ IS NOT NULL AND stress_rating_id_ IS NOT NULL) THEN\n               IF (Op_Life_Limit_Per_Part_API.Op_Limit_Exist(template_part_no_, template_part_rev_, stress_rating_id_, part_no_, vss_rec_.part_rev, oper_param_rec.oper_param) = 'FALSE') THEN\n                  Error_SYS.Record_General(lu_name_,'NOLIFELIMIT: There is no life limit defined for operational parameter :P1 of serial :P2 (stress rating :P3).', oper_param_rec.oper_param, part_no_||','||serial_no_, stress_rating_id_||','||template_part_no_||','||template_part_rev_);\n               END IF;\n            END IF;\n         END LOOP;\n      END IF;\n      -- If the serial is installed in a structure, stress rating Id must be defined for one of the parents.     \n      IF (template_part_no_ IS NOT NULL AND template_part_rev_ IS NOT NULL AND stress_rating_id_ IS NOT NULL) THEN\n         Life_Limit_API.Exist(template_part_no_, template_part_rev_, stress_rating_id_, part_no_, vss_rec_.part_rev);\n         serial_str_member_ := Vim_Serial_Structure_API.Check_Serial_Member_Str(part_no_, serial_no_);", "original_code_length": 10761, "summary": null}
{"id": "VimSerialStructure_Install_Component___", "context": {"api_name": "VimSerialStructure", "module": "vim", "file_summary": "Customer order management and processing - VimSerialStructure", "function_name": "Install_Component___", "previous_function": null, "next_function": "Remove_Component___", "complexity_metrics": {"total_lines": 326, "code_lines": 324, "cyclomatic_complexity": 107, "estimated_tokens": 1692.6000000000001}, "pagerank_score": 0.00018739465816759772, "truncation_metadata": {"original_length": 18299, "truncated_length": 1647, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09000491830154653}}, "code": "PROCEDURE Install_Component___ (\n   no_of_tasks_          OUT NUMBER,\n   str_rec_in_           IN  vim_serial_structure_tab%ROWTYPE,\n   parent_rec_           IN  vim_serial_structure_tab%ROWTYPE,\n   top_rec_              IN  vim_serial_structure_tab%ROWTYPE,\n   sst_rec_              IN  Serial_Structure_Template_API.Public_Rec,\n   serial_rec_           IN  Part_Serial_Catalog_API.Public_Rec,\n   parent_serial_rec_    IN  Part_Serial_Catalog_API.Public_Rec,\n   v_serial_rec_in_      IN  Vim_Serial_API.Serial_Info_Rec,\n   installation_date_    IN  DATE,\n   workshop_code_        IN  VARCHAR2,\n   replace_date_         IN  DATE,\n-- ... key business logic ...\n      IF (set_parent_oper_cond_ = 'TRUE') THEN\n         IF ((serial_rec_.operational_condition = 'NON_OPERATIONAL') AND (sst_rec_.minimum_config = 'TRUE') AND (nvl(parent_serial_rec_.operational_condition, ' ') = 'OPERATIONAL')) THEN\n            IF (parent_rec_.serial_no IS NOT NULL) THEN\n            END IF;\n         END IF;\n      END IF;\n   END IF;\n   -- if the part is serialised only one dummy positions must be removed before an installation can be performed. \n   --  When a part/serial is removed from a str, removed part/serial's SEQ_NO and newly created dummy postion's SEQ_NO are not related.\n   IF (wo_no_ IS NOT NULL)THEN\n   END IF;\n   Check_Update___(oldrec_, newrec_, indrec_, attr_);\n   IF (Serial_Structure_Top_Part_API.Get_Keep_Sorting(top_part_no_, top_part_rev_) = 'TRUE') THEN\n   END IF;\n   Update___(NULL, oldrec_, newrec_, attr_, objversion_, TRUE);\n   IF (str_rec_in_.serial_no IS NOT NULL) THEN\n      IF (sst_rec_.qty = 1) THEN\n         IF (NOT same_parent_) THEN", "original_code_length": 18299, "summary": null}
{"id": "SchedulingUtility_Send_Dataset_Update_", "context": {"api_name": "SchedulingUtility", "module": "fndsch", "file_summary": "Financial operations and accounting - SchedulingUtility", "function_name": "Send_Dataset_Update_", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 192, "code_lines": 179, "cyclomatic_complexity": 105, "estimated_tokens": 1275.3}, "pagerank_score": 0.0002275412247435098, "truncation_metadata": {"original_length": 11428, "truncated_length": 1701, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.14884494224711237}}, "code": "PROCEDURE Send_Dataset_Update_(\n   context_     IN OUT Scheduling_Context,\n   dataset_id_  IN     VARCHAR2,\n   force_load_  IN     BOOLEAN DEFAULT FALSE,\n   force_reset_ IN     BOOLEAN DEFAULT FALSE,\n   appointment_ IN     BOOLEAN DEFAULT FALSE )\nIS\n   dataset_                      Scheduling_Dataset_API.Public_Rec;\n   message_                      CLOB;\n   update_scheduling_            BOOLEAN;\n   update_modelling_             BOOLEAN;\n   update_system_                BOOLEAN;\n-- ... key business logic ...\n      END IF;\n      IF (update_scheduling_) THEN\n         -- Only send if forcing load/reset, or if load/reload is due or past due, or if there are any changes recorded since the last run, or if it's being run the first time after activating the dataset (last_load is not set), or if more than 30 seconds has passed\n         --  since the last timeline update and the DB process is not the executor. The 30 seconds margin is to prevent sending a bulk of timeline update messages at the same time if the background job queue has stacked up.\n         IF (force_load_ OR force_reset_ OR is_load_due_ OR has_changes_ OR dataset_.last_load IS NULL OR (dataset_.last_updated < (SYSDATE - 30/86400) AND context_.log_source != Scheduling_Log_Source_API.DB_DB_PROCESS)) THEN\n            IF (force_load_ OR force_reset_ OR is_load_due_ OR dataset_.last_load IS NULL) THEN\n            ELSIF (has_changes_) THEN\n               Scheduling_Logging_API.Log_Trace_(context_, 'Scheduling Data Update [:P1] -> [:P2]', nvl(dataset_.last_change_log_id, 0), latest_change_id_);\n            ELSE\n               Scheduling_Logging_API.Log_Trace_(context_, 'Scheduling Timeline Update [:P1]', latest_change_id_);", "original_code_length": 11428, "summary": null}
{"id": "VimSerialStructure_Remove_Component___", "context": {"api_name": "VimSerialStructure", "module": "vim", "file_summary": "Customer order management and processing - VimSerialStructure", "function_name": "Remove_Component___", "previous_function": "Install_Component___", "next_function": null, "complexity_metrics": {"total_lines": 304, "code_lines": 301, "cyclomatic_complexity": 105, "estimated_tokens": 1504.1000000000001}, "pagerank_score": 0.00018739465816759772, "truncation_metadata": {"original_length": 17185, "truncated_length": 1649, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.09595577538551062}}, "code": "PROCEDURE Remove_Component___ (\n   no_of_tasks_            OUT NUMBER,\n   str_rec_out_            IN  vim_serial_structure_tab%ROWTYPE,\n   parent_rec_             IN  vim_serial_structure_tab%ROWTYPE,\n   top_rec_                IN  vim_serial_structure_tab%ROWTYPE,\n   sst_rec_                IN  Serial_Structure_Template_API.Public_Rec,\n   serial_rec_             IN  Part_Serial_Catalog_API.Public_Rec,\n   parent_serial_rec_      IN  Part_Serial_Catalog_API.Public_Rec,\n   location_code_          IN  VARCHAR2,\n   workshop_code_          IN  VARCHAR2,\n   replace_date_           IN  DATE,\n   new_oper_cond_          IN  VARCHAR2,\n-- ... key business logic ...\n   END IF;\n   -- set parent to \"Not Operational\" when removing a minimum configuration entry\n   IF ((sst_rec_.minimum_config = 'TRUE') AND (set_parent_oper_cond_ = 'TRUE')) THEN\n      IF (parent_rec_.serial_no IS NOT NULL) THEN\n      END IF;\n   END IF;\n   -- handle specific actions if serial is removed - pre removal\n   IF (str_rec_out_.serial_no IS NOT NULL) THEN\n      IF (set_serial_out_of_oper_ = 'TRUE') THEN\n         IF (new_oper_cond_db_ = 'NON_OPERATIONAL') THEN\n         ELSIF (new_oper_cond_db_ = 'OPERATIONAL') THEN\n         END IF;\n         IF (serial_rec_.operational_status IN ('IN_OPERATION', 'OUT_OF_OPERATION')) THEN\n         END IF;\n         IF ((serial_rec_.operational_condition = 'NON_OPERATIONAL') AND (new_oper_cond_db_ = 'OPERATIONAL')) THEN\n         END IF;\n      END IF;\n      IF (NOT same_parent_) THEN\n         IF (last_activity_date_ > used_replace_date_) THEN\n         END IF;\n      END IF;\n   END IF;\n   Check_Update___(oldrec_, newrec_, indrec_, attr_);", "original_code_length": 17185, "summary": null}
{"id": "PartRevision_Check_Update___", "context": {"api_name": "PartRevision", "module": "mfgstd", "file_summary": "Inventory management and tracking - PartRevision", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 257, "code_lines": 247, "cyclomatic_complexity": 103, "estimated_tokens": 1290.9}, "pagerank_score": 0.0002570564042537472, "truncation_metadata": {"original_length": 12334, "truncated_length": 1706, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1383168477379601}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     part_revision_tab%ROWTYPE,\n   newrec_ IN OUT part_revision_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_  VARCHAR2(30);\n   value_ VARCHAR2(4000);\n   dummy_         NUMBER;\n   contract_      PART_REVISION_TAB.contract%TYPE;\n   part_no_       PART_REVISION_TAB.part_no%TYPE;\n   update_level_  VARCHAR2(20);\n-- ... key business logic ...\n   END IF;\n   -- Check to make sure phase in date is not greater than phase out date\n   IF ( newrec_.eff_phase_out_date < newrec_.eff_phase_in_date ) THEN\n   END IF;\n   IF (oldrec_.eff_phase_out_date IS NOT NULL AND oldrec_.eff_phase_out_date< site_date_ AND\n      (newrec_.eff_phase_out_date IS NULL OR newrec_.eff_phase_out_date >= site_date_)) THEN\n      IF(Manuf_Struct_Alternate_API.Is_Structure_Obsolete(newrec_.contract,  newrec_.part_no, newrec_.eng_chg_level,Shop_Ord_Code_API.Decode('M'),'*') OR\n         Manuf_Struct_Alternate_API.Is_Structure_Obsolete(newrec_.contract,  newrec_.part_no, newrec_.eng_chg_level,Shop_Ord_Code_API.Decode('F'),'*'))THEN\n         Error_SYS.Record_General(lu_name_, 'OBSOLETE_ALT_EXIST: Phase out date can not be a future date when the default alternate has been set to obsolete.');\n      END IF;\n   END IF;\n   IF newrec_.effective_status = 'EFFECT' THEN\n      IF Part_Revision_API.Effective_Revision_Exist(\n      THEN\n      END IF;\n   END IF;\n   IF newrec_.effective_repair_status = 'EFFECT' THEN\n      IF Part_Revision_API.Effective_Revision_Exist(\n      THEN\n      END IF;\n   END IF;\n   IF newrec_.effective_status = 'EFFECT' THEN\n      IF (update_level_ = restrict_db_) AND (NOT can_modify_) AND (skip_check_on_struct_state_ != 'TRUE') THEN", "original_code_length": 12334, "summary": null}
{"id": "PurchaseReqLine_Validate_Authorization__", "context": {"api_name": "PurchaseReqLine", "module": "purch", "file_summary": "Customer order management and processing - PurchaseReqLine", "function_name": "Validate_Authorization__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 237, "code_lines": 227, "cyclomatic_complexity": 99, "estimated_tokens": 1536.6000000000001}, "pagerank_score": 0.00019470142977973638, "truncation_metadata": {"original_length": 16297, "truncated_length": 1738, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10664539485794931}}, "code": "PROCEDURE Validate_Authorization__ (\n   rec_                    IN OUT PURCHASE_REQ_LINE_TAB%ROWTYPE,\n   update_price_manually_  IN     BOOLEAN,\n   rental_chargeable_days_ IN     NUMBER DEFAULT NULL)\nIS\n   new_template_id_        VARCHAR2(10);\n   objid_                  VARCHAR2(2000);\n   objversion_             VARCHAR2(2000);\n   oldrec_                 PURCHASE_REQ_LINE_TAB%ROWTYPE;\n   old_rule_               VARCHAR2(10);\n   new_total_base_amount_  NUMBER:=0;\n   old_total_base_amount_  NUMBER:=0;\n-- ... key business logic ...\n      IF (new_template_id_ IS NULL) THEN\n      ELSE\n         -- Note: If vendor no is changed, it should only be replicated to the authorization line when the PR is in Released state (a state before authorization).\n         IF (NVL(rec_.template_id, CHR(132)) != NVL(new_template_id_, CHR(132)) OR (old_total_base_amount_ != new_total_base_amount_ ) OR\n            ((rec_.rowstate = 'Released') AND (NVL(old_vendor_no_,Database_SYS.string_null_) != NVL(rec_.vendor_no, Database_SYS.string_null_))) ) THEN            \n            Pur_Req_Line_Approval_Util_API.Insert_Approval_Lines (rec_.requisition_no, rec_.line_no, rec_.release_no, rec_.company, new_total_base_amount_, new_template_id_,approval_rule_, NULL, rec_.vendor_no);\n         END IF;\n      END IF;\n      IF (Purch_Req_Line_Approval_API.Authorization_Line_Exist(rec_.requisition_no, rec_.line_no, rec_.release_no) = 'TRUE') THEN\n      ELSE\n      END IF;\n      IF (Is_Supplier_Asl___ (rec_.requisition_no, rec_.line_no, rec_.release_no, rec_.part_no, rec_.stat_grp, rec_.contract, rec_.vendor_no)= 'TRUE') THEN\n         IF (Purch_Req_Line_Approval_API.Authorization_Line_Exist(rec_.requisition_no, rec_.line_no, rec_.release_no) = 'TRUE') THEN", "original_code_length": 16297, "summary": null}
{"id": "PlantObject_Update_In_Equipment___", "context": {"api_name": "PlantObject", "module": "plades", "file_summary": "Financial operations and accounting - PlantObject", "function_name": "Update_In_Equipment___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 253, "code_lines": 232, "cyclomatic_complexity": 98, "estimated_tokens": 1240.2}, "pagerank_score": 0.00031323819053244683, "truncation_metadata": {"original_length": 15432, "truncated_length": 1684, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10912389839294971}}, "code": "PROCEDURE Update_In_Equipment___ (\n   plt_sq_          IN NUMBER,\n   object_sq_       IN NUMBER,\n   object_revision_ IN VARCHAR2,\n   contract_        IN VARCHAR2,\n   mch_code_        IN VARCHAR2,\n   part_no_         IN VARCHAR2,\n   parent_info_ Parent_Info,\n   obj_level_       IN VARCHAR2,\n   event_           IN VARCHAR2,\n   state_           IN VARCHAR2 )\nIS\n-- ... key business logic ...\n         IF (objrec_.purch_price IS NOT NULL) THEN\n         END IF;\n         IF (objrec_.purch_date IS NOT NULL) THEN\n         END IF;\n         IF (objrec_.manufactured_date IS NOT NULL) THEN\n         END IF;\n         IF (event_ = 'SetCompleted' AND objrec_.installation_date IS NULL)  THEN\n         ELSE\n         END IF;\n         IF ((obj_part_no_ IS NOT NULL) AND (objrec_.manufacturer_id IS NOT NULL)) THEN\n            IF (get_part_manufacturer%FOUND) THEN\n            ELSE\n            END IF;\n         END IF;\n         IF (obj_part_no_ IS NULL) THEN\n            IF (objrec_.manufacturer_id IS NOT NULL) THEN\n            END IF;\n         END IF;\n         IF ( objrec_.denom1 IS NOT NULL) then\n         END IF;\n         IF (cost_center_ IS NULL) THEN\n            IF ( objrec_.cost_center IS NOT NULL ) THEN\n            END IF;\n         END IF;\n         $IF Component_Equip_SYS.INSTALLED $THEN\n         $ELSE \n         IF ((nvl(obj_part_no_,'-') != nvl(part_no_,'-')) OR\n            (attr_ IS NOT NULL) ) THEN                           \n            -- Connect the part_no if the part_no has been changed, see put parameter from get_function_object\n               IF (event_ != 'SetPlannedForScrap') THEN\n                  IF (event_ = 'SetCompleted' OR event_ = 'SetPlannedForOperation') THEN", "original_code_length": 15432, "summary": null}
{"id": "Shipment_Check_Update___", "context": {"api_name": "Shipment", "module": "shpmnt", "file_summary": "Customer order management and processing - Shipment", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 206, "code_lines": 188, "cyclomatic_complexity": 97, "estimated_tokens": 1106.3}, "pagerank_score": 0.00022342264834119608, "truncation_metadata": {"original_length": 12321, "truncated_length": 1635, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.13270026783540298}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     shipment_tab%ROWTYPE,\n   newrec_ IN OUT shipment_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                    VARCHAR2(30);\n   value_                   VARCHAR2(4000);\n   shipment_type_           SHIPMENT_TAB.shipment_type%TYPE;\n   ship_location_           SHIPMENT_TAB.ship_inventory_location_no%TYPE;\n   route_id_                SHIPMENT_TAB.route_id%TYPE;\n   forward_agent_           SHIPMENT_TAB.forward_agent_id%TYPE;\n-- ... key business logic ...\n      IF (oldrec_.shipment_type != newrec_.shipment_type) THEN\n         IF (indrec_.packing_proposal_id = FALSE) THEN\n         END IF;\n      END IF;\n   END IF;      \n   IF (Validate_SYS.Is_Changed(oldrec_.planned_ship_date, newrec_.planned_ship_date) AND newrec_.planned_ship_date IS NOT NULL) THEN\n      IF (newrec_.planned_ship_date < Site_API.Get_Site_Date(newrec_.contract)) THEN\n      END IF;\n   END IF;\n   IF((Validate_SYS.Is_Changed(newrec_.planned_delivery_date, oldrec_.planned_delivery_date) OR Validate_SYS.Is_Changed(newrec_.planned_ship_date, oldrec_.planned_ship_date)) AND newrec_.planned_delivery_date < newrec_.planned_ship_date) THEN\n   END IF;\n   IF (NVL(newrec_.delivery_terms,Database_Sys.string_null_) != NVL(oldrec_.delivery_terms,Database_Sys.string_null_)) THEN\n      $IF Component_Order_SYS.INSTALLED $THEN   \n      $ELSE\n   END IF; \n   IF (NVL(newrec_.ref_id,Database_Sys.string_null_) != NVL(oldrec_.ref_id,Database_Sys.string_null_)) THEN\n      Shipment_Source_Utility_API.Validate_Ref_Id(newrec_.shipment_id, newrec_.source_ref_type, newrec_.ref_id);\n   END IF;", "original_code_length": 12321, "summary": null}
{"id": "SiteInventInfo_Check_Insert___", "context": {"api_name": "SiteInventInfo", "module": "invent", "file_summary": "Invoice processing and management - SiteInventInfo", "function_name": "Check_Insert___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 149, "code_lines": 148, "cyclomatic_complexity": 96, "estimated_tokens": 578.5}, "pagerank_score": 0.00027800121593984933, "truncation_metadata": {"original_length": 6349, "truncated_length": 1583, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.24933060324460546}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT site_invent_info_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_     VARCHAR2(30);\n   value_    VARCHAR2(4000);\nBEGIN\n   IF NOT (indrec_.negative_on_hand) THEN\n      newrec_.negative_on_hand            := 'NEG ONHAND OK';\n   END IF;\n   IF NOT (indrec_.purch_inv_value_method) THEN\n-- ... key business logic ...\n   END IF;\n   IF NOT (indrec_.upper_limit_veryslow_mover) THEN\n   END IF;\n   IF NOT (indrec_.upper_limit_slow_mover) THEN\n   END IF;\n   IF NOT (indrec_.upper_limit_medium_mover) THEN\n   END IF;\n   IF NOT (indrec_.mix_of_part_number_blocked) THEN\n   END IF;\n   IF NOT (indrec_.mix_of_cond_codes_blocked) THEN\n   END IF;\n   IF NOT (indrec_.mix_of_lot_batch_no_blocked) THEN\n   END IF;\n   IF NOT (indrec_.allow_partloc_owner_mix) THEN\n   END IF;\n   IF NOT (indrec_.exclude_storage_req_val) THEN\n   END IF;\n   IF NOT (indrec_.transport_from_whse_level) THEN\n   END IF;\n   IF NOT (indrec_.transport_to_whse_level) THEN\n   END IF;\n   IF NOT (indrec_.transport_part_cons_level) THEN\n   END IF;\n   IF NOT (indrec_.transport_ref_cons_level) THEN\n   END IF;\n   IF NOT (indrec_.putaway_zone_refill_option) THEN\n   END IF;\n   IF NOT (indrec_.auto_dropof_man_trans_task) THEN\n   END IF;\n   IF NOT (indrec_.allow_deviating_avail_ctrl) THEN\n   END IF;\n   IF NOT (indrec_.exec_transp_task_background) THEN\n   END IF;\n   IF NOT (indrec_.reset_config_std_cost) THEN\n-- ... exception handling ...\nEXCEPTION\n   WHEN value_error THEN\n      Error_SYS.Item_Format(lu_name_, name_, value_);\nEND Check_Insert___;", "original_code_length": 6349, "summary": null}
{"id": "ActiveSeparate_Create_Rental_Wo", "context": {"api_name": "ActiveSeparate", "module": "wo", "file_summary": "Customer order management and processing - ActiveSeparate", "function_name": "Create_Rental_Wo", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 365, "code_lines": 355, "cyclomatic_complexity": 95, "estimated_tokens": 1376.7}, "pagerank_score": 0.00019149182787929524, "truncation_metadata": {"original_length": 22933, "truncated_length": 1642, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.07159987790520211}}, "code": "PROCEDURE Create_Rental_Wo (\n   wo_no_        OUT NUMBER,\n   contract_     IN  VARCHAR2,\n   part_no_      IN  VARCHAR2,\n   serial_no_    IN  VARCHAR2,\n   customer_no_  IN  VARCHAR2,\n   req_finish_   IN  DATE,\n   order_no_     IN  VARCHAR2,\n   line_no_      IN  VARCHAR2,\n   rel_no_       IN  VARCHAR2,\n   line_item_no_ IN  NUMBER,\n   reserve_qty_  IN  NUMBER,\n-- ... key business logic ...\n      IF demob_wo_ = 'TRUE' AND org_rec_.category = Maintenance_Type_API.DB_DEMOBILIZATION THEN\n         IF(object_id_ IS NULL ) THEN\n         END IF;\n         IF (object_id_ IS NOT NULL) THEN    \n            IF (resource_id_ IS NOT NULL) THEN\n            END IF;\n            IF (currency_code_ IS NOT NULL) THEN\n            END IF;\n            --fetch existing work order if there is a work order for customer order line and demobilization code already\n            $IF (Component_Rental_SYS.INSTALLED) $THEN\n            $ELSE\n            IF wo_no_ IS NULL THEN\n            END IF;\n            IF (wo_no_ IS NOT NULL) THEN\n               $IF (Component_Rental_SYS.INSTALLED) $THEN\n               $ELSE\n               Modify___(newrec_);                             \n               $IF Component_Pcmstd_SYS.INSTALLED $THEN\n                  FOR std_rec_ IN get_std_job(org_rec_.mobilization_code) LOOP\n                     IF std_rec_.job_category_db = Job_Category_API.DB_DEMOBILIZATION THEN\n                        Work_Order_Job_API.insert_task_template(wo_no_ => wo_no_,\n                     END IF;\n                  END LOOP;\n               $ELSE\n               --if there is no  work list for task template create dummy task with mobilzation data", "original_code_length": 22933, "summary": null}
{"id": "WorkCenter_Check_Update___", "context": {"api_name": "WorkCenter", "module": "mfgstd", "file_summary": "Financial operations and accounting - WorkCenter", "function_name": "Check_Update___", "previous_function": "Check_Insert___", "next_function": null, "complexity_metrics": {"total_lines": 188, "code_lines": 164, "cyclomatic_complexity": 94, "estimated_tokens": 989.3000000000001}, "pagerank_score": 0.00024537856745128673, "truncation_metadata": {"original_length": 9661, "truncated_length": 1657, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.17151433599006313}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     work_center_tab%ROWTYPE,\n   newrec_ IN OUT work_center_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   wc_used_                      NUMBER := 0;\n   max_op_finish_date_           DATE;\n   max_calendar_finish_date_     DATE;\n   min_op_start_date_            DATE;\n   min_calendar_start_date_      DATE;\n   base_unit_                    iso_unit_tab.base_unit%TYPE;\n-- ... key business logic ...\n      IF ((wc_used_ = 1)\n         OR Routing_Operation_List_API.Is_Work_Center_Used(newrec_.contract, newrec_.work_center_no)) THEN\n         Error_SYS.Record_General('WorkCenter','WCCWHENWCUSED: Work Center Code can not be changed when the work center is used.');\n      END IF;\n   END IF;\n   IF (newrec_.work_center_code = Work_Center_Code_API.DB_RRP_WORK_CENTER) THEN  -- RRP Work Center\n      IF (newrec_.sched_capacity != Sched_Capacity_API.DB_INFINITE_CAPACITY) THEN  -- Infinite\n         Error_SYS.Record_General(lu_name_, 'FINITEUPD: Scheduled Capacity must be :P1 if Work Center Code is :P2', Sched_Capacity_API.Get_Client_Value(0), Work_Center_Code_API.Get_Client_Value(3));\n      END IF;\n   ELSE -- Internal/Outside Work Center\n      IF (newrec_.rowstate = 'Active') THEN  -- Active\n         IF (base_unit_ != 'HOUR' OR factor_ != 1 ) THEN\n            Error_SYS.Record_General(lu_name_, 'WRONGBASEUNIT: Unit Of Measure must equal Base Unit HOUR if Work Center Code is :P1', Work_Center_Code_API.Decode(newrec_.work_center_code) ||' and Factor has to be 1');\n         END IF;\n      END IF;\n   END IF;\n   IF (newrec_.rowstate = 'Blocked' AND oldrec_.rowstate != 'Blocked') THEN", "original_code_length": 9661, "summary": null}
{"id": "Shipment_Check_Insert___", "context": {"api_name": "Shipment", "module": "shpmnt", "file_summary": "Customer order management and processing - Shipment", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 195, "code_lines": 184, "cyclomatic_complexity": 94, "estimated_tokens": 852.8000000000001}, "pagerank_score": 0.00022342264834119608, "truncation_metadata": {"original_length": 10963, "truncated_length": 1719, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.15680014594545288}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT shipment_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                       VARCHAR2(30);\n   value_                      VARCHAR2(4000);\n   shipment_type_              VARCHAR2(3); \n   ship_inventory_location_no_ VARCHAR2(35); \n   route_id_                   SHIPMENT_TAB.route_id%TYPE;\n   forwarder_                  SHIPMENT_TAB.forward_agent_id%TYPE;   \n   delivery_terms_             VARCHAR2(5);\n-- ... key business logic ...\n   IF (indrec_.delivery_terms = TRUE) THEN\n   END IF;\n   IF (indrec_.ship_inventory_location_no = TRUE) THEN\n   END IF;   \n   IF (indrec_.created_date = FALSE) THEN\n   END IF;\n   IF ((indrec_.shipment_freight_payer = FALSE) AND (newrec_.shipment_category = 'CONSOLIDATED')) THEN\n      newrec_.shipment_freight_payer := 'NOT_SPECIFIED';\n   END IF;\n   IF (automatic_creation_ = 'FALSE') THEN\n   END IF;\n   IF (indrec_.ship_via_code = TRUE) THEN\n   END IF;\n   IF (indrec_.packing_proposal_id = TRUE) THEN\n   END IF;\n   IF (indrec_.freight_booking_sent = FALSE) THEN\n   END IF;\n   IF (indrec_.incl_all_hu_freight_book = FALSE) THEN\n   END IF;\n   IF (indrec_.freight_info_recieved = FALSE) THEN\n   END IF;\n   IF (newrec_.sender_type = Sender_Receiver_Type_API.DB_REMOTE_WAREHOUSE AND newrec_.receiver_type = Sender_Receiver_Type_API.DB_CUSTOMER) THEN    \n      Error_SYS.Record_General(lu_name_, 'INVALIDRECEIVER: Receiver type cannot be :P1 when the sender type is :P2.', \n   END IF;\n   IF (newrec_.shipment_category = 'NORMAL') THEN      \n      IF (newrec_.receiver_addr_id IS NULL) THEN\n      END IF;\n      Error_SYS.Check_Not_Null(lu_name_, 'SHIPMENT_FREIGHT_PAYER', newrec_.shipment_freight_payer);  ", "original_code_length": 10963, "summary": null}
{"id": "Shipment_Create_Data_Capture_Lov", "context": {"api_name": "Shipment", "module": "shpmnt", "file_summary": "Customer order management and processing - Shipment", "function_name": "Create_Data_Capture_Lov", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 252, "code_lines": 239, "cyclomatic_complexity": 93, "estimated_tokens": 1277.9}, "pagerank_score": 0.00022342264834119608, "truncation_metadata": {"original_length": 15995, "truncated_length": 1651, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10321975617380431}}, "code": "PROCEDURE Create_Data_Capture_Lov (\n   contract_                   IN VARCHAR2,\n   shipment_id_                IN NUMBER,\n   handling_unit_id_           IN NUMBER,\n   receiver_id_                IN VARCHAR2,\n   shipment_type_              IN VARCHAR2,\n   receiver_addr_id_           IN VARCHAR2,\n   forward_agent_id_           IN VARCHAR2,\n   parent_consol_shipment_id_  IN NUMBER,\n   ship_via_code_              IN VARCHAR2,\n   sscc_                       IN VARCHAR2,\n   alt_handling_unit_label_id_ IN VARCHAR2,\n-- ... key business logic ...\n      IF parent_consol_shipment_id_ IS NULL THEN                       \n      ELSIF parent_consol_shipment_id_ = -1 THEN\n      ELSE\n      END IF;\n      IF ship_via_code_ IS NULL THEN                       \n      ELSIF ship_via_code_ = '%' THEN\n      ELSE\n      END IF;\n      IF sscc_ IS NULL THEN                       \n      ELSIF sscc_ = '%' THEN\n      ELSE\n      END IF;\n      IF alt_handling_unit_label_id_ IS NULL THEN                       \n      ELSIF alt_handling_unit_label_id_ = '%' THEN\n      ELSE\n      END IF;\n      IF (sql_where_expression_ IS NOT NULL) THEN\n      END IF;\n      IF (lov_type_db_  = Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN\n      ELSE\n      END IF;\n      IF (lov_value_tab_.COUNT > 0) THEN\n         IF (column_name_ IN ('HANDLING_UNIT_ID')) THEN\n         ELSIF (column_name_ IN ('SHIPMENT_ID')) THEN\n         ELSIF (column_name_ IN ('RECEIVER_ID')) THEN\n         ELSIF (column_name_ IN ('FORWARD_AGENT_ID')) THEN\n         ELSIF (column_name_ IN ('SHIP_VIA_CODE')) THEN\n         ELSIF (column_name_ IN ('SHIPMENT_TYPE')) THEN\n         ELSIF (column_name_ IN ('SSCC')) THEN", "original_code_length": 15995, "summary": null}
{"id": "ManufPartAttribute_Check_Insert___", "context": {"api_name": "ManufPartAttribute", "module": "mfgstd", "file_summary": "Inventory management and tracking - ManufPartAttribute", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 191, "code_lines": 170, "cyclomatic_complexity": 92, "estimated_tokens": 890.5}, "pagerank_score": 0.00023388095102400475, "truncation_metadata": {"original_length": 7438, "truncated_length": 1606, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.21591825759612798}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT manuf_part_attribute_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_  VARCHAR2(30);\n   value_ VARCHAR2(4000);\n   unit_type_      VARCHAR2(20);\n   volume_type_    VARCHAR2(20);\n   weight_type_    VARCHAR2(20);\n   serial_tracked_ BOOLEAN;\n   --performance fixes\n-- ... key business logic ...\n      END IF;\n   ELSE\n   END IF;\n   IF (newrec_.use_theoritical_density = 'TRUE') THEN\n   END IF;\n   IF newrec_.issue_type IS NULL THEN\n   END IF;\n   IF (newrec_.adjust_on_op_qty_deviation IS NULL) THEN\n   END IF;\n   IF (newrec_.issue_overreported_qty IS NULL) THEN\n   END IF;\n   IF (newrec_.plan_manuf_sup_on_due_date IS NULL) THEN\n   END IF;\n   IF (newrec_.run_mrp IS NULL) THEN\n   END IF;\n   IF (newrec_.run_crp IS NULL) THEN\n   END IF;\n   IF (newrec_.include_firm_demands IS NULL) THEN\n   END IF;\n   IF (newrec_.include_firm_supplies IS NULL) THEN\n   END IF;\n   IF (newrec_.optimize_new_delivery_date IS NULL) THEN\n   END IF;\n   IF (newrec_.run_in_background IS NULL) THEN\n   END IF;\n   IF (newrec_.auto_replace_alt_comp IS NULL) THEN\n   END IF;\n   IF newrec_.consider_lead_time IS NULL THEN\n   END IF;\n   IF (newrec_.cum_leadtime < 0) THEN\n   END IF;\n   IF (newrec_.close_tolerance < 0) THEN\n   END IF;\n   IF (newrec_.density <= 0) AND (unit_type_ IN (volume_type_, weight_type_))\n   THEN\n      Error_SYS.Record_General(lu_name_, 'DENSITYMISSING: Density must have a value > 0 if UoM is of type VOLUME or WEIGHT.');\n   END IF;\n   IF (newrec_.density IS NOT NULL) AND\n      (unit_type_ NOT IN (volume_type_, weight_type_)) THEN", "original_code_length": 7438, "summary": null}
{"id": "Shipment_Update___", "context": {"api_name": "Shipment", "module": "shpmnt", "file_summary": "Customer order management and processing - Shipment", "function_name": "Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 225, "code_lines": 203, "cyclomatic_complexity": 92, "estimated_tokens": 1110.2}, "pagerank_score": 0.00022342264834119608, "truncation_metadata": {"original_length": 14700, "truncated_length": 1780, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.12108843537414966}}, "code": "PROCEDURE Update___ (\n   objid_      IN     VARCHAR2,\n   oldrec_     IN     SHIPMENT_TAB%ROWTYPE,\n   newrec_     IN OUT SHIPMENT_TAB%ROWTYPE,\n   attr_       IN OUT VARCHAR2,\n   objversion_ IN OUT VARCHAR2,\n   by_keys_    IN     BOOLEAN DEFAULT FALSE )\nIS     \n   delnote_attr_                    VARCHAR2(2000);   \n   update_delnote_                  BOOLEAN;   \n   consol_shipment_id_              NUMBER;  \n   recal_freight_charges_           VARCHAR2(5):= Fnd_Boolean_API.DB_FALSE;   \n-- ... key business logic ...\n         END IF;\n         -- Update Delivery_Note_Tab if ship via code has been changed.\n         IF (NVL(newrec_.ship_via_code, ' ') != NVL(oldrec_.ship_via_code, ' ')) THEN\n            update_delnote_ := TRUE;            \n         END IF;\n         -- Update Delivery_Note_Tab if delivery terms has been changed.\n         IF (NVL(newrec_.delivery_terms, ' ') != NVL(oldrec_.delivery_terms, ' ')) THEN\n            update_delnote_ := TRUE;\n         END IF;\n         -- Update Delivery_Note_Tab if Receiver ID has been changed.\n         IF (NVL(newrec_.receiver_id, ' ') != NVL(oldrec_.receiver_id, ' ')) THEN\n            update_delnote_ := TRUE;            \n         END IF;\n         -- Update Delivery_Note_Tab if Delivery Reason ID has been changed.\n         IF (Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(Shipment_API.Get_Contract(oldrec_.shipment_id),'PT_DELIVERY_REASON') = Fnd_Boolean_API.DB_TRUE) THEN\n            IF (Validate_SYS.Is_Changed(oldrec_.delivery_reason_id, newrec_.delivery_reason_id)) THEN\n               update_delnote_ := TRUE; \n            END IF;\n         END IF;\n         IF (Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(newrec_.contract, 'PT_DELIVERY_DOC_COMMUNICATION') = Fnd_Boolean_API.DB_TRUE) THEN", "original_code_length": 14700, "summary": null}
{"id": "MpccomAccounting_Do_Accounting___", "context": {"api_name": "MpccomAccounting", "module": "mpccom", "file_summary": "Customer order management and processing - MpccomAccounting", "function_name": "Do_Accounting___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 317, "code_lines": 297, "cyclomatic_complexity": 91, "estimated_tokens": 1457.3}, "pagerank_score": 0.00028556783042629747, "truncation_metadata": {"original_length": 17904, "truncated_length": 1639, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.0915437890974084}}, "code": "PROCEDURE Do_Accounting___ (\n   rcode_                      OUT VARCHAR2,   \n   company_                    IN  VARCHAR2,\n   event_code_                 IN  VARCHAR2,\n   str_code_                   IN  VARCHAR2,\n   pre_accounting_flag_db_     IN  VARCHAR2,\n   accounting_id_              IN  NUMBER,\n   debit_credit_db_            IN  VARCHAR2,\n   value_                      IN  NUMBER,\n   booking_source_             IN  VARCHAR2,\n   currency_code_              IN  VARCHAR2,\n   currency_rate_              IN  NUMBER,\n-- ... key business logic ...\n      END IF;\n      -- Only the difference between what has been already posted and the new value should\n      -- be posted when creating the new posting\n      value_posted_               := ROUND((value_       * negative_when_credit_), base_currency_rounding_) - sum_posted_;\n      IF ((curr_amount_ = 0) AND (trans_reval_event_id_ IS NOT NULL)) THEN\n         IF (Different_Currency_Code_Exists(accounting_id_, currency_code_)) THEN\n         END IF;\n      END IF;\n      IF (post_zero_curr_amount_) THEN\n      ELSE   \n         curr_amount_posted_         := ROUND((curr_amount_ * negative_when_credit_), currency_rounding_     ) - sum_curr_amount_posted_;\n      END IF;   \n      parallel_amount_posted_     := ROUND((parallel_amount_ * negative_when_credit_), parallel_currency_rounding_) - sum_posted_parallel_amount_;\n      value_posted_               := value_posted_       * negative_when_credit_;\n      curr_amount_posted_         := curr_amount_posted_ * negative_when_credit_;\n      parallel_amount_posted_     := parallel_amount_posted_ * negative_when_credit_;\n   ELSE\n   END IF;", "original_code_length": 17904, "summary": null}
{"id": "ShopOrdUtil_Cost_Diff", "context": {"api_name": "ShopOrdUtil", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrdUtil", "function_name": "Cost_Diff", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 334, "code_lines": 303, "cyclomatic_complexity": 90, "estimated_tokens": 1431.3}, "pagerank_score": 0.0001980034146697676, "truncation_metadata": {"original_length": 19194, "truncated_length": 1660, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08648536000833594}}, "code": "PROCEDURE Cost_Diff (\n   order_no_       IN VARCHAR2,\n   release_no_     IN VARCHAR2,\n   sequence_no_    IN VARCHAR2,\n   old_close_date_ IN DATE )\nIS\n   so_rec_                    Shop_Ord_API.Public_Rec;\n   value_                     NUMBER;\n   transaction_code_          Mpccom_Transaction_Code.transaction_code%TYPE;\n   transaction_id_            NUMBER;\n   accounting_id_             NUMBER;\n   order_type_so_             VARCHAR2(200) := Order_Type_API.Decode('SHOP ORDER');\n-- ... key business logic ...\n      ELSE\n         IF (op_trans_count_ > 0) OR (inv_trans_count_ > 0) THEN\n         ELSE\n            FOR rec_ IN Shop_Material_Alloc_API.Get_Shop_Material_Alloc(order_no_, release_no_, sequence_no_) LOOP\n               IF (comp_part_rec_.inventory_valuation_method != 'ST') AND\n                   comp_part_rec_.inventory_part_cost_level != 'COST PER CONFIGURATION') THEN\n               ELSE\n               END IF;\n             END LOOP;\n         END IF;\n      END IF;\n      IF do_variance_ THEN\n         IF (cost_param_value_ = 'N') THEN\n            -- ReMove the old method call after verification\n         ELSE\n            IF (start_date_ IS NULL) THEN\n            END IF;\n         END IF;\n      ELSE\n      END IF;\n   ELSE\n   END IF;\n   -- Always check if there is still some remaining WIP that have to be accounted.\n   IF NOT (Inventory_Part_Unit_Cost_API.Non_Zero_Cost_Detail_Exist(balanced_cost_details_)) THEN\n      FOR rem_wip_rec_ IN get_remaining_wip LOOP\n         IF rem_wip_rec_.posting_group_id != '*' AND rem_wip_rec_.c_source_id = '*' THEN\n         ELSE\n         END IF;\n         l_cost_details_tab_(loop_cnt_).accounting_year := '*';", "original_code_length": 19194, "summary": null}
{"id": "FaObject_Check_Update___", "context": {"api_name": "FaObject", "module": "fixass", "file_summary": "Customer order management and processing - FaObject", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 221, "code_lines": 204, "cyclomatic_complexity": 88, "estimated_tokens": 973.7}, "pagerank_score": 0.00021210060479732703, "truncation_metadata": {"original_length": 10070, "truncated_length": 1660, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.16484607745779542}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     fa_object_tab%ROWTYPE,\n   newrec_ IN OUT fa_object_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   value_                   VARCHAR2(4000);\n   fa_code_part_            VARCHAR2(1);\n   import_flag_             BOOLEAN;\n   acquisition_value_       NUMBER;\n   start_year_              NUMBER;\n   start_period_            NUMBER;\n-- ... key business logic ...\n   IF (indrec_.distributed_code_part) THEN\n      IF (distributed_code_part_ IS NOT NULL) THEN\n         IF Accounting_Code_Parts_API.Get_Codepart_Function(newrec_.company,'FAACC') = newrec_.distributed_code_part THEN\n         END IF;\n      END IF;                                                        \n   END IF;   \n   IF (indrec_.tag_number) THEN\n      Check_Block_Inventory___(newrec_.company, newrec_.object_id);\n   END IF;\n   IF (Validate_SYS.Is_Changed(oldrec_.fa_object_type, newrec_.fa_object_type)) THEN\n      IF (\n          (newrec_.rowstate = 'Investment') AND (oldrec_.fa_object_type IN ('1', '7') AND newrec_.fa_object_type = '6')) THEN           \n         Update_Books_Per_Object___ (company_,\n      ELSE\n               'ILLMODTYPE: Not allowed to modify object type for object :P1 with status :P2.',\n      END IF;\n   END IF;\n   IF newrec_.acquisition_reason IS NOT NULL THEN\n      Transaction_Reason_API.Acquisition_Reason_Checked(newrec_.company,newrec_.acquisition_reason);\n   END IF;\n   IF newrec_.disposal_reason IS NOT NULL THEN\n      Transaction_Reason_API.Disposal_Reason_Checked(newrec_.company,newrec_.disposal_reason);\n   END IF;\n   IF (newrec_.custodian_id IS NOT NULL AND indrec_.custodian_id) THEN", "original_code_length": 10070, "summary": null}
{"id": "FaObject_Make_Accnt_Import_Trans__", "context": {"api_name": "FaObject", "module": "fixass", "file_summary": "Customer order management and processing - FaObject", "function_name": "Make_Accnt_Import_Trans__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 364, "code_lines": 340, "cyclomatic_complexity": 88, "estimated_tokens": 1392.3}, "pagerank_score": 0.00021210060479732703, "truncation_metadata": {"original_length": 19922, "truncated_length": 1643, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.08247163939363518}}, "code": "PROCEDURE Make_Accnt_Import_Trans__ (\n   company_             IN VARCHAR2,\n   user_group_          IN VARCHAR2,\n   voucher_type_        IN VARCHAR2,\n   voucher_date_        IN DATE,\n   parallel_curr_base_  IN VARCHAR2)\nIS\n   row_no_                        NUMBER := 1;\n   default_voucher_row_           Voucher_API.VoucherRowRecType;\n   default_attr_                  VARCHAR2(32000);\n   info_                          VARCHAR2(2000);\n   objid_                         ROWID;\n-- ... key business logic ...\n   WHILE (get_import_trans%FOUND) LOOP\n      WHILE ( get_import_trans%FOUND  AND vou_type_ = vou_type_old_ ) LOOP\n      -- Modify default attribute string\n                                        AND rtrans_object_id_ = object_id_old_) LOOP\n            -- start loop over trans value types\n            IF (Rotable_Pool_Fa_Object_API.Is_Pool_Object(company_,rtrans_object_id_) = 'FALSE') THEN\n            ELSE\n            END IF;\n                                          AND NOT book_amount_sign_changed_) LOOP\n               IF (trans_value_type_db_ = trval_type_acq_db_) THEN\n                  IF (rtrans_book_id_ IS NULL) THEN\n                  ELSE\n                  END IF;\n                  $IF Component_Intled_SYS.INSTALLED $THEN\n                     IF (exclutions_ IS NOT NULL) THEN\n                     END IF;                  \n               ELSIF (trans_value_type_db_ = trval_type_acc_depr_db_) THEN\n               END IF;\n               IF (rtrans_objtrans_value_type_ = 1 AND rtrans_book_id_ IS NULL) THEN\n               END IF;\n               IF ( rtrans_book_id_ IS NULL) THEN\n               ELSE\n               END IF;", "original_code_length": 19922, "summary": null}
{"id": "VimSerialStructure_Change_Structure_Data___", "context": {"api_name": "VimSerialStructure", "module": "vim", "file_summary": "Customer order management and processing - VimSerialStructure", "function_name": "Change_Structure_Data___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 292, "code_lines": 292, "cyclomatic_complexity": 88, "estimated_tokens": 1593.8}, "pagerank_score": 0.00018739465816759772, "truncation_metadata": {"original_length": 17456, "truncated_length": 1768, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10128322639780019}}, "code": "PROCEDURE Change_Structure_Data___ (\n   info_                  OUT VARCHAR2,\n   seq_no_                IN  NUMBER,\n   to_part_no_            IN  VARCHAR2,\n   to_part_rev_           IN  VARCHAR2,\n   to_serial_no_          IN  VARCHAR2,\n   new_top_part_no_       IN  VARCHAR2,\n   new_top_part_rev_      IN  VARCHAR2,\n   new_structure_address_ IN  VARCHAR2,\n   new_str_pos_str_       IN  VARCHAR2,\n   corr_act_              IN  BOOLEAN,\n   mod_code_              IN  VARCHAR2,\n-- ... key business logic ...\n         -- if the serial is not installed in a structure, validate new template if given.\n         IF (new_top_part_no_ IS NOT NULL AND new_top_part_rev_ IS NOT NULL AND new_structure_address_ IS NOT NULL) THEN\n            IF ((new_top_part_no_ != oldrec_.top_part_no OR oldrec_.top_part_no IS NULL)OR (new_top_part_rev_ != oldrec_.top_part_rev OR oldrec_.top_part_rev IS NULL) OR (new_structure_address_ != oldrec_.structure_address OR oldrec_.structure_address IS NULL)) THEN\n               template_exist_ := Serial_Structure_Template_API.Check_Exist (new_top_part_no_, new_top_part_rev_, new_structure_address_);\n               IF (template_exist_ = 'FALSE' OR (sst_status_ = 'Preliminary' AND child_cnt_ > 0)) THEN\n               ELSIF (sst_status_ = 'Preliminary' AND child_cnt_ = 0) THEN\n               END IF;\n            END IF;\n         ELSE\n         END IF;\n      END IF;\n      -- When from_serial_no_ is given, should also get values for from_templ_part_no_ /from_templ_part_rev_ to be able to execute  Remove_Dummy_Position___.\n      IF ((child_cnt_ > 0) OR (from_serial_no_ IS NOT NULL)) THEN\n         -- if old part has children and old part is a template a template must exist for the new part unless the new part is the prime part of the position", "original_code_length": 17456, "summary": null}
{"id": "MpccomAccounting_Get_Project_Cost_Elements", "context": {"api_name": "MpccomAccounting", "module": "mpccom", "file_summary": "Customer order management and processing - MpccomAccounting", "function_name": "Get_Project_Cost_Elements", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 323, "code_lines": 299, "cyclomatic_complexity": 87, "estimated_tokens": 1393.6000000000001}, "pagerank_score": 0.00028556783042629747, "truncation_metadata": {"original_length": 16783, "truncated_length": 1800, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.10725138533039386}}, "code": "FUNCTION Get_Project_Cost_Elements (\n   part_no_                      IN VARCHAR2,\n   contract_                     IN VARCHAR2,\n   source_ref_type_db_           IN VARCHAR2,\n   source_ref1_                  IN VARCHAR2,\n   source_ref2_                  IN VARCHAR2,\n   source_ref3_                  IN VARCHAR2,\n   source_ref4_                  IN NUMBER,\n   supp_grp_                     IN VARCHAR2,\n   stat_grp_                     IN VARCHAR2,\n   assortment_                   IN VARCHAR2,\n   total_value_                  IN NUMBER,\n-- ... key business logic ...\n   ELSIF (source_ref_type_db_ = 'PROJECT') THEN\n   ELSIF (source_ref_type_db_ = Order_Type_API.DB_PURCHASE_ORDER_CHARGE) THEN\n      IF (include_charge_) THEN\n      ELSE\n      END IF;\n   ELSIF (source_ref_type_db_ = 'RENTAL') THEN\n      IF (rental_type_db_ IN (Order_Type_API.DB_PURCHASE_ORDER, Order_Type_API.DB_PURCHASE_REQUISITION, Order_Type_API.DB_PUR_ORDER_CHANGE_ORDER)) THEN\n         IF (part_related_) THEN\n            IF (intra_company_rental_) THEN\n            ELSE\n            END IF;\n         ELSE\n            IF (intra_company_rental_) THEN\n            ELSE\n            END IF;\n         END IF;\n      ELSIF (rental_type_db_ = 'PROJECT' ) THEN\n      ELSIF (rental_type_db_ = 'CUST ORDER' ) THEN\n         IF (part_related_) THEN\n         ELSE\n         END IF;\n      ELSIF (rental_type_db_ = 'TASK' ) THEN  \n      END IF;\n   ELSIF (source_ref_type_db_ = 'PROJECT_DELIVERABLES') THEN\n   END IF;\n   IF Posting_Ctrl_Public_API.Is_Ctrl_Type_Used_On_Post_Type(company_,\n                                                             site_date_) THEN\n      -- A value (not NULL) is set for activity_seq_ to run the simulation correctly when the control type AC22 is being used in the company.                                  ...", "original_code_length": 16783, "summary": null}
{"id": "WorkCenter_Check_Insert___", "context": {"api_name": "WorkCenter", "module": "mfgstd", "file_summary": "Financial operations and accounting - WorkCenter", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 151, "code_lines": 138, "cyclomatic_complexity": 87, "estimated_tokens": 761.8000000000001}, "pagerank_score": 0.00024537856745128673, "truncation_metadata": {"original_length": 6798, "truncated_length": 1707, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.2511032656663725}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT work_center_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   site_date_           DATE;\n   base_unit_           VARCHAR2(5);\n   factor_              NUMBER;\n   code_part_           WORK_CENTER_TAB.code_part%TYPE;\n   log_code_part_db_    VARCHAR2(10);\nBEGIN\n   IF (newrec_.queue_time IS NULL) THEN\n-- ... key business logic ...\n      IF (newrec_.work_center_code = 'O') THEN\n      ELSE\n      END IF;\n   END IF;\n   IF (newrec_.auto_report_labor_with_qty IS NULL) THEN\n   END IF;\n   IF (newrec_.auto_report_mach_with_qty IS NULL) THEN\n   END IF;\n   IF (newrec_.basis_for_remain_op_hours IS NULL) THEN\n   END IF;\n   IF (newrec_.calc_actual_resource_share IS NULL) THEN\n   END IF;\n   IF (newrec_.report_time_with_scrap IS NULL) THEN\n   END IF;\n   IF (newrec_.auto_close_operations IS NULL OR newrec_.work_center_code IN(Work_Center_Code_API.DB_RRP_WORK_CENTER, Work_Center_Code_API.DB_OUTSIDE_WORK_CENTER)) THEN\n   END IF;\n   IF (newrec_.send_iot_events IS NULL) THEN\n   END IF;\n   IF (newrec_.code_part IS NOT NULL AND (Accounting_Code_Parts_API.Get_Logical_Code_Part_Db(newrec_.company, newrec_.code_part) !='CostCenter')) OR \n      (newrec_.code_part IS NULL AND Accounting_Code_Parts_API.Log_Code_Part_Used(newrec_.company, 'CostCenter')) THEN\n      FOR code_ IN 65..74 LOOP\n         IF log_code_part_db_ = 'CostCenter' THEN\n         END IF;\n      END LOOP;\n   END IF;\n   IF newrec_.cost_center_id IS NOT NULL AND newrec_.code_part IS NULL THEN\n      IF Accounting_Code_Part_Value_API.Exist_Code_Part_Value(newrec_.company, 'B') THEN\n      END IF;\n   ELSIF newrec_.cost_center_id IS NOT NULL AND newrec_.code_part IS NOT NULL THEN", "original_code_length": 6798, "summary": null}
{"id": "Shipment_Create_Data_Capture_Lov", "context": {"api_name": "Shipment", "module": "shpmnt", "file_summary": "Customer order management and processing - Shipment", "function_name": "Create_Data_Capture_Lov", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 222, "code_lines": 214, "cyclomatic_complexity": 87, "estimated_tokens": 1298.7}, "pagerank_score": 0.00022342264834119608, "truncation_metadata": {"original_length": 11611, "truncated_length": 1657, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.14270949961243648}}, "code": "PROCEDURE Create_Data_Capture_Lov (\n   contract_               IN VARCHAR2,\n   shipment_id_            IN NUMBER,\n   parent_consol_ship_id_  IN NUMBER,\n   shipment_category_      IN VARCHAR2,\n   shipment_type_          IN VARCHAR2,\n   sender_type_            IN VARCHAR2,\n   receiver_type_          IN VARCHAR2,\n   receiver_id_            IN VARCHAR2,\n   receiver_addr_id_       IN VARCHAR2,  \n   pro_no_                 IN VARCHAR2,\n   forward_agent_id_       IN VARCHAR2,\n-- ... key business logic ...\n      ELSIF sender_type_ = '%' THEN\n      ELSE\n      END IF;\n      IF receiver_type_ IS NULL THEN                       \n      ELSIF receiver_type_ = '%' THEN\n      ELSE\n      END IF;\n      IF receiver_id_ IS NULL THEN                       \n      ELSIF receiver_id_ = '%' THEN\n      ELSE\n      END IF;\n      IF receiver_addr_id_ IS NULL THEN                       \n      ELSIF receiver_addr_id_ = '%' THEN\n      ELSE\n      END IF;\n      IF pro_no_ IS NULL THEN                       \n      ELSIF pro_no_ = '%' THEN\n      ELSE\n      END IF;\n      IF forward_agent_id_ IS NULL THEN                       \n      ELSIF forward_agent_id_ = '%' THEN\n      ELSE\n      END IF;\n      IF route_id_ IS NULL THEN                       \n      ELSIF route_id_ = '%' THEN\n      ELSE\n      END IF;\n      IF ship_via_code_ IS NULL THEN                       \n      ELSIF ship_via_code_ = '%' THEN\n      ELSE\n      END IF;\n      IF consignment_note_id_ IS NULL THEN                       \n      ELSIF consignment_note_id_ = '%' THEN\n      ELSE\n      END IF;\n      IF parent_consol_ship_id_ IS NULL THEN                       \n      ELSIF parent_consol_ship_id_ = -1 THEN", "original_code_length": 11611, "summary": null}
{"id": "VoucherRow_Check_Update___", "context": {"api_name": "VoucherRow", "module": "accrul", "file_summary": "Customer order management and processing - VoucherRow", "function_name": "Check_Update___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 201, "code_lines": 189, "cyclomatic_complexity": 87, "estimated_tokens": 968.5}, "pagerank_score": 0.00021059887642424475, "truncation_metadata": {"original_length": 9863, "truncated_length": 1653, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.16759606610564737}}, "code": "PROCEDURE Check_Update___ (\n   oldrec_ IN     voucher_row_tab%ROWTYPE,\n   newrec_ IN OUT voucher_row_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                   VARCHAR2(30);\n   value_                  VARCHAR2(4000);\n   genled_update_          VARCHAR2(20);\n   ledger_account_         BOOLEAN;\n   function_group_         VARCHAR2(20);\n   simulation_voucher_     VARCHAR2(20);\n-- ... key business logic ...\n   END IF;\n   IF req_rec_.code_i = 'S' THEN\n   END IF;\n   IF req_rec_.code_j = 'S' THEN\n   END IF;\n   IF (newrec_.voucher_date IS NULL) THEN\n   END IF;\n   IF (newrec_.voucher_date IS NULL) OR (newrec_.voucher_date != head_.voucher_date) THEN\n   END IF;\n   IF (head_.interim_voucher = 'Y') THEN\n   END IF;\n   IF (function_group_ IN ('M', 'K', 'Q') AND newrec_.trans_code = 'MANUAL') THEN\n      IF (Company_Finance_API.Get_Parallel_Base_Db(newrec_.company) IN ('TRANSACTION_CURRENCY','ACCOUNTING_CURRENCY')) THEN\n         IF ((NVL(newrec_.debet_amount,0) = 0) AND (NVL(newrec_.credit_amount,0) = 0) AND\n             (NVL(newrec_.quantity,0) = 0)) THEN\n         END IF;\n      ELSE  \n         IF ((NVL(newrec_.debet_amount,0) = 0) AND (NVL(newrec_.credit_amount,0) = 0) AND \n             (NVL(newrec_.quantity,0) = 0)) THEN\n         END IF; \n     END IF;\n   END IF;\n   Error_SYS.Check_Not_Null(lu_name_, 'CURRENCY_RATE', newrec_.currency_rate);\n   IF (Voucher_Type_API.Is_Row_Group_Validated(newrec_.company,newrec_.voucher_type)='Y') THEN\n      Error_SYS.Check_Not_Null(lu_name_, 'ROW_GROUP_ID', newrec_.row_group_id);\n      IF Account_API.Is_Stat_Account (newrec_.company, newrec_.account) = 'TRUE' THEN", "original_code_length": 9863, "summary": null}
{"id": "VimSerial_Set_Serial_Out_Of_Operation___", "context": {"api_name": "VimSerial", "module": "vim", "file_summary": "Customer order management and processing - VimSerial", "function_name": "Set_Serial_Out_Of_Operation___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 189, "code_lines": 189, "cyclomatic_complexity": 86, "estimated_tokens": 1358.5}, "pagerank_score": 0.00028195091115468143, "truncation_metadata": {"original_length": 12211, "truncated_length": 1697, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.13897305707968224}}, "code": "PROCEDURE Set_Serial_Out_Of_Operation___ (\n   part_no_               IN VARCHAR2,\n   serial_no_             IN VARCHAR2,\n   maint_prog_id_         IN VARCHAR2,\n   maint_prog_rev_        IN VARCHAR2,\n   initial_replace_date_  IN DATE DEFAULT NULL,\n   update_maint_prog_str_ IN VARCHAR2 DEFAULT 'FALSE',\n   str_change_type_       IN VARCHAR2 DEFAULT NULL )\nIS\n   rec_                  vim_serial_tab%ROWTYPE;\n   parent_rec_           vim_serial_tab%ROWTYPE;\n   psc_rec_              Part_Serial_Catalog_API.Public_Rec;\n-- ... key business logic ...\n   IF NOT ((str_change_type_ IS NOT NULL) AND (str_change_type_ IN ('2','3'))) THEN   \n       -- Verify that maint program is set correctly\n      IF (maint_prog_exist_ = 'TRUE' AND rec_.maint_prog_id IS NULL AND rec_.maint_prog_rev IS NULL AND upd_maint_prog_ = 'FALSE') THEN\n      ELSIF (maint_prog_exist_ = 'TRUE' AND maint_prog_id_ IS NULL AND maint_prog_rev_ IS NULL AND rec_.maint_prog_id IS NULL AND rec_.maint_prog_rev IS NULL AND upd_maint_prog_ = 'TRUE') THEN\n      END IF;\n   END IF;      \n   IF (no_maint_prog_def_) THEN\n      IF (prog_access_exist_) THEN\n      ELSE\n      END IF;      \n   END IF;\n   -- verify that the serial is not locked\n   IF (psc_rec_.locked_for_update = 'LOCKED') THEN\n   END IF;\n   -- IF vehicle id is set to be mandatory, the vehicle id must have a value before the vehicle can be set to Out of Operation\n   IF (psc_rec_.operational_status = 'PLANNED_FOR_OP') THEN\n      IF (nvl(veh_id_man_, 'FALSE') = 'TRUE') THEN\n         IF (veh_id_ IS NULL) THEN\n         END IF;\n      END IF;\n   END IF;\n   -- verify that parent is not scrapped\n   IF ((parent_part_no_ != part_no_) AND (parent_serial_no_ != serial_no_)) THEN", "original_code_length": 12211, "summary": null}
{"id": "Archive_Create_New_Report__", "context": {"api_name": "Archive", "module": "fndbas", "file_summary": "Business logic and data operations - Archive", "function_name": "Create_New_Report__", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 165, "code_lines": 149, "cyclomatic_complexity": 85, "estimated_tokens": 854.1}, "pagerank_score": 0.00019560794399333886, "truncation_metadata": {"original_length": 8048, "truncated_length": 1634, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.20303180914512922}}, "code": "PROCEDURE Create_New_Report__ (\n   result_key_        OUT NUMBER,\n   report_attr_       IN  VARCHAR2,\n   parameter_attr_    IN  VARCHAR2,\n   distribution_list_ IN  VARCHAR2,\n   print_attr_        IN  VARCHAR2,\n   notify_self_       IN  BOOLEAN )\nIS\n   tmp_key_              NUMBER;\n   report_id_            VARCHAR2(30);\n   new_report_id_        VARCHAR2(30);\n   override_method_      VARCHAR2(61);\n-- ... key business logic ...\n      IF time_zone_ IS NULL THEN\n         IF time_zone_mode_ = 'SERVER' THEN\n            IF time_zone_ IS NULL THEN\n            END IF;\n         ELSE\n         END IF;\n      END IF;\n   END IF;\n   Report_Definition_API.Check_Report_Def_User__(report_id_);\n   -- Check parameter list for any 'DATE' type parameters.\n   -- IF any, check it's date format from report columns.\n   -- IF no time portion required, time portion will be removed.(Format_Column_Value)\n   WHILE Client_SYS.Get_Next_From_Attr(parameter_attr_, ptr_, name_, value_) LOOP\n      IF value_ IS NOT NULL AND (column_format_ LIKE '%DATE%') THEN\n         IF column_format_ = 'DATE/TIME' OR column_format_ = 'DATE/DATETIME' THEN\n            IF time_zone_mode_ = 'SERVER' OR SUBSTR(UPPER(time_zone_mode_), 1, 4) = 'SITE' THEN\n               IF time_zone_ IS NOT NULL THEN\n                  -- Converts a date from a specified time zone (from_timezone_) to the system parameter server time zone ('SERVER_TIME_ZONE').\n               END IF;\n            END IF;\n         END IF;\n         IF INSTR(value_,'%')>0 OR INSTR(value_,';')>0 THEN\n         ELSIF SUBSTR(value_,1,2) IN ('<=','>=','!=') THEN\n         ELSIF SUBSTR(value_,1,1) IN ('<','>') THEN", "original_code_length": 8048, "summary": null}
{"id": "Step_Check_Common___", "context": {"api_name": "Step", "module": "percos", "file_summary": "Financial operations and accounting - Step", "function_name": "Check_Common___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 148, "code_lines": 135, "cyclomatic_complexity": 84, "estimated_tokens": 782.6}, "pagerank_score": 0.00019543392005726433, "truncation_metadata": {"original_length": 6839, "truncated_length": 1641, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.23994736072525222}}, "code": "PROCEDURE Check_Common___ (\n   oldrec_ IN     step_tab%ROWTYPE,\n   newrec_ IN OUT step_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   dummy_             NUMBER;\n   allocation_type_   VARCHAR2(10);\n   year_allocation_   VARCHAR2(5);\n   accounting_period_ VARCHAR2(2);\n   \n   CURSOR exist_factor IS\n-- ... key business logic ...\n      IF (exist_distribution%FOUND) THEN\n      END IF;\n   END IF;\n   Check_Data___(lu_name_, newrec_);\n   IF (allocation_type_ = 'ACTUAL') THEN\n      IF (newrec_.step_type = 'CREBUDALLOC') THEN\n      END IF;\n   ELSIF (allocation_type_ = 'BUDGET') THEN \n      IF (newrec_.step_type IN ('GENVOU','MANVOU','UPDATEGL')) THEN\n      END IF;\n      IF (newrec_.correction = 'TRUE') THEN\n         Error_SYS.Appl_General(lu_name_, 'ODPCORRECTIONERROR: Invalid value for correction when allocation type is budget.');\n      ELSIF (newrec_.normal_balance = 'FALSE') THEN\n         Error_SYS.Appl_General(lu_name_, 'ODPNBALERROR: Invalid value for normal balance when allocation type is budget.');\n      ELSIF (newrec_.simulation_balance = 'TRUE') THEN\n         Error_SYS.Appl_General(lu_name_, 'ODPSBALERROR: Invalid value for simulation balance when allocation type is budget.');\n      END IF;\n   END IF;\n   IF (newrec_.posting_mode IS NOT NULL) THEN\n      IF (newrec_.step_type != 'GENVOU' AND newrec_.step_type != 'CREBUDALLOC') THEN\n      END IF;\n   ELSE\n      IF (newrec_.step_type = 'GENVOU' OR newrec_.step_type = 'CREBUDALLOC') THEN\n         Error_SYS.Check_Not_Null(lu_name_, 'POSTING_MODE', newrec_.posting_mode);\n      END IF;\n   END IF;\n   IF (newrec_.merging_type IS NOT NULL) THEN", "original_code_length": 6839, "summary": null}
{"id": "PlantObject_Check_Insert___", "context": {"api_name": "PlantObject", "module": "plades", "file_summary": "Financial operations and accounting - PlantObject", "function_name": "Check_Insert___", "previous_function": null, "next_function": "Check_Update___", "complexity_metrics": {"total_lines": 198, "code_lines": 181, "cyclomatic_complexity": 83, "estimated_tokens": 899.6}, "pagerank_score": 0.00031323819053244683, "truncation_metadata": {"original_length": 11966, "truncated_length": 1699, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.14198562594016378}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT plant_object_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_              VARCHAR2(30);   \n   linear_asset_name_ VARCHAR2(50);\n   value_             VARCHAR2(4000);\n   linear_asset_sq_   NUMBER;\n   pd_keya_           PLANT_OBJECT_TAB.KEYA%TYPE;\n   pld_object_sq_     NUMBER;\nBEGIN\n-- ... key business logic ...\n      END IF;\n   END IF;\n   IF (newrec_.update_core_from_part IS NULL) THEN\n      IF (NVL(PLANT_CLASS_PROPERTIES_API.Get_Db_Value(newrec_.std_sq, newrec_.class, 'UPD_CORE_FROM_PART'),'N') = 'Y') THEN\n         newrec_.update_core_from_part := 'Y';\n      ELSE\n         newrec_.update_core_from_part := 'N';\n      END IF;\n   END IF;\n   IF (newrec_.update_nozzle_from_part IS NULL) THEN\n      IF (NVL(PLANT_CLASS_PROPERTIES_API.Get_Db_Value(newrec_.std_sq, newrec_.class, 'UPD_NOZZ_FROM_PART'),'N') = 'Y') THEN\n         newrec_.update_nozzle_from_part := 'Y';\n      ELSE\n         newrec_.update_nozzle_from_part := 'N';\n      END IF;\n   END IF;\n   IF (newrec_.update_channel_from_part IS NULL) THEN\n      IF (NVL(PLANT_CLASS_PROPERTIES_API.Get_Db_Value(newrec_.std_sq, newrec_.class, 'UPD_CHNL_FROM_PART'),'N') = 'Y') THEN\n         newrec_.update_channel_from_part := 'Y';\n      ELSE\n         newrec_.update_channel_from_part := 'N';\n      END IF;\n   END IF;\n   IF (newrec_.operational_status IS NULL) THEN\n   END IF;   \n   IF ((newrec_.plt_sq = newrec_.function_plt_sq AND newrec_.object_sq = newrec_.function_object_sq) OR (newrec_.plt_sq = newrec_.location_plt_sq AND newrec_.object_sq = newrec_.location_object_sq) OR (newrec_.plt_sq = newrec_.from_plt_sq AND newrec_.object_sq = newrec_.from_object_sq)", "original_code_length": 11966, "summary": null}
{"id": "CbsSoInt_Unpack_Operation___", "context": {"api_name": "CbsSoInt", "module": "cbsint", "file_summary": "Customer order management and processing - CbsSoInt", "function_name": "Unpack_Operation___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 325, "code_lines": 285, "cyclomatic_complexity": 83, "estimated_tokens": 1080.3}, "pagerank_score": 0.00023699432843038963, "truncation_metadata": {"original_length": 15159, "truncated_length": 1670, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.11016557820436704}}, "code": "PROCEDURE Unpack_Operation___ (\n   ifs_msg_            IN VARCHAR2,\n   update_closed_oper_ IN VARCHAR2 DEFAULT 'FALSE' )\nIS\n   pd_                       CONSTANT VARCHAR2(2) := Scheduling_Int_API.path_delim_;\n   fd_                       CONSTANT VARCHAR2(2) := Scheduling_Int_API.field_delim_;\n   kpd_                      CONSTANT VARCHAR2(1) := Scheduling_Int_API.key_part_delim_;\n   rid_                      CONSTANT VARCHAR2(1) := Scheduling_Int_API.res_instance_delim_;\n   response_                 VARCHAR2(2000);\n   resource_list_            VARCHAR2(32000);\n   order_no_                 VARCHAR2(12);\n   release_no_               VARCHAR2(5);\n-- ... key business logic ...\n   status_assigned_        := Message_SYS.Find_Attribute(ifs_msg_, 'IDI_STATUS_BOOKED', 1);\n   status_infscheduled_    := Message_SYS.Find_Attribute(ifs_msg_, 'IDI_STATUS_INFSCHED', 1);\n   IF status_incomplete_ = 2 THEN\n      IF sched_info_ IS NOT NULL THEN\n         Shop_Order_Operation_API.Modify(order_no_,release_no_,sequence_no_,operation_no_,attr_);\n      END IF;\n   END IF;\n   IF NOT(App_Context_SYS.Find_Boolean_Value(full_site_key_, FALSE)) THEN\n   --Remove load if it already exists\n      --If not an infinite scheduled operation.\n      IF(status_infscheduled_ != 2) THEN\n      END IF;\n   END IF;\n   -- if a scheduled operation then update the start and finish data\n   IF (status_incomplete_ + status_unscheduled_ + status_assigned_ + status_infscheduled_ = 4) AND (op_start_date_ IS NOT NULL) AND (op_finish_date_ IS NOT NULL) THEN\n      Message_SYS.Get_Attribute(ifs_msg_, 'IDI_RESOURCE_BOOKED', resource_list_);\n      WHILE(end_pos_ != 0) AND resource_list_ IS NOT NULL LOOP", "original_code_length": 15159, "summary": null}
{"id": "VoucherRow_Create_Tax_Transaction___", "context": {"api_name": "VoucherRow", "module": "accrul", "file_summary": "Customer order management and processing - VoucherRow", "function_name": "Create_Tax_Transaction___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 332, "code_lines": 315, "cyclomatic_complexity": 83, "estimated_tokens": 1349.4}, "pagerank_score": 0.00021059887642424475, "truncation_metadata": {"original_length": 19501, "truncated_length": 1643, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.0842520896364289}}, "code": "PROCEDURE Create_Tax_Transaction___ (\n   taxrec_               OUT VOUCHER_ROW_TAB%ROWTYPE,\n   rowrec_               IN  VOUCHER_ROW_TAB%ROWTYPE,\n   trans_code_           IN  VARCHAR2,\n   voucher_date_         IN  DATE,\n   company_rec_          IN  Company_Finance_API.Public_Rec,\n   tax_percentage_       IN  NUMBER)\nIS\n   control_value_attr_   VARCHAR2(2000);\n   codestring_rec_       Accounting_Codestr_API.CodestrRec;  \n   is_base_emu_          VARCHAR2(5);\n   is_third_emu_         VARCHAR2(5);\n-- ... key business logic ...\n      END IF;\n   END IF;\n   IF (rowrec_.tax_amount IS NULL AND rowrec_.parallel_curr_tax_amount IS NOT NULL) THEN\n      IF (rowrec_.parallel_curr_tax_amount > 0) THEN\n      ELSIF (rowrec_.parallel_curr_tax_amount < 0) THEN\n      END IF;  \n   END IF;\n   IF (rowrec_.tax_base_amount IS NOT NULL AND rowrec_.currency_tax_base_amount IS NOT NULL) THEN\n   ELSE\n      IF (rowrec_.tax_amount > 0) THEN\n         IF (rowrec_.debet_amount IS NOT NULL) THEN\n         ELSIF (rowrec_.credit_amount IS NOT NULL) THEN   -- The correction flag in the client is checked\n         END IF;\n      ELSIF (rowrec_.tax_amount < 0) THEN\n         IF (rowrec_.credit_amount IS NOT NULL) THEN\n         ELSIF (rowrec_.debet_amount IS NOT NULL) THEN   -- The correction flag in the client is checked\n         END IF;\n      ELSIF (rowrec_.tax_amount = 0) THEN                -- IF tax amount is 0 (for tax code '0' and 'E0')\n      END IF;\n   END IF;   \n   IF (company_rec_.parallel_acc_currency IS NOT NULL) THEN      \n      IF (rowrec_.parallel_curr_tax_amount IS NULL) THEN\n         IF (taxrec_.debet_amount IS NOT NULL) THEN\n         END IF;", "original_code_length": 19501, "summary": null}
{"id": "VoucherRow_Check_Insert___", "context": {"api_name": "VoucherRow", "module": "accrul", "file_summary": "Customer order management and processing - VoucherRow", "function_name": "Check_Insert___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 185, "code_lines": 169, "cyclomatic_complexity": 83, "estimated_tokens": 1072.5}, "pagerank_score": 0.00021059887642424475, "truncation_metadata": {"original_length": 10160, "truncated_length": 1655, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.16289370078740156}}, "code": "PROCEDURE Check_Insert___ (\n   newrec_ IN OUT voucher_row_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   name_                     VARCHAR2(30);\n   value_                    VARCHAR2(4000);\n   head_                     Voucher_API.Public_Rec;\n   ledger_account_           BOOLEAN;\n   function_group_           VARCHAR2(20);\n   simulation_voucher_       VARCHAR2(20);\n   user_group_               user_group_member_finance_tab.user_group%type;\n-- ... key business logic ...\n   $IF Component_Proj_SYS.INSTALLED $THEN\n      IF (newrec_.project_activity_id IS NOT NULL) AND (newrec_.project_activity_id = 0) THEN\n      END IF;\n   IF (newrec_.currency_code IS NULL) THEN\n   END IF;\n   IF (newrec_.debet_amount IS NULL AND newrec_.credit_amount IS NULL AND (newrec_.third_currency_debit_amount IS NOT NULL OR newrec_.third_currency_credit_amount IS NOT NULL)) THEN\n      IF (newrec_.third_currency_debit_amount IS NOT NULL) THEN\n      ELSIF (newrec_.third_currency_credit_amount IS NOT NULL) THEN\n      END IF;\n   END IF;\n   IF (newrec_.voucher_date IS NULL) THEN\n   END IF;\n   IF (head_.interim_voucher = 'Y' AND UPPER( newrec_.trans_code) != 'INTERIM') THEN\n   END IF;\n   IF (newrec_.accounting_period IS NULL) THEN\n   END IF;\n   IF (function_group_ IN ('M', 'K', 'Q') AND newrec_.trans_code = 'MANUAL') OR (function_group_ = 'D' AND newrec_.trans_code = 'MANUAL' AND newrec_.multi_company_id IS NOT NULL) THEN\n      IF (Company_Finance_API.Get_Parallel_Base_Db(newrec_.company) IN ('TRANSACTION_CURRENCY','ACCOUNTING_CURRENCY')) THEN\n         IF ((NVL(newrec_.debet_amount,0) = 0) AND (NVL(newrec_.credit_amount,0) = 0) AND ", "original_code_length": 10160, "summary": null}
{"id": "ShopOrderOperation_Add_Operation_Result", "context": {"api_name": "ShopOrderOperation", "module": "shpord", "file_summary": "Customer order management and processing - ShopOrderOperation", "function_name": "Add_Operation_Result", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 217, "code_lines": 186, "cyclomatic_complexity": 82, "estimated_tokens": 1184.3}, "pagerank_score": 0.00022818354080652106, "truncation_metadata": {"original_length": 10352, "truncated_length": 1642, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.15861669242658424}}, "code": "PROCEDURE Add_Operation_Result (\n   info_                   OUT NOCOPY VARCHAR2,\n   order_no_               IN VARCHAR2,\n   release_no_             IN VARCHAR2,\n   sequence_no_            IN VARCHAR2,\n   operation_no_           IN NUMBER,\n   transaction_date_       IN DATE,\n   qty_complete_           IN NUMBER,\n   qty_scrapped_           IN NUMBER,\n   catch_qty_scrapped_     IN NUMBER,\n   scrap_reason_           IN VARCHAR2,\n   scrap_note_text_        IN VARCHAR2,\n-- ... key business logic ...\n   IF (current_employee_id_ IS NOT NULL) OR (employee_id_ IS NOT NULL) THEN\n      IF (company_ != oper_company_) THEN\n      END IF;\n   END IF;\n   IF (current_employee_id_ IS NOT NULL) THEN\n      Shop_Floor_Employee_API.Check_Valid_Employee(company_, current_employee_id_, contract_ => oper_rec_.contract);\n   END IF;\n   -- If the order is Closed it should be reopened and the closed again\n   -- Note that this will just make it possible to report more time on the SO, if additional\n   IF (order_state_db_ = 'Closed') THEN\n   END IF;\n   -- IF any labor time has been specified create a labor transaction\n   IF (labor_setup_ > 0) OR (labor_run_ > 0) THEN\n      IF (labor_run_ > 0 AND ((crew_size_ IS NULL) OR (crew_size_ <= 0))) THEN\n         Error_SYS.Record_General(lu_name_, 'CREW_SIZE_NOT_ALLOWED: A Crew Size with value > 0 must be specified for labor transactions.');\n      END IF;\n      IF (labor_setup_ > 0 AND ((setup_crew_size_ IS NULL) OR (setup_crew_size_ <= 0))) THEN\n         Error_SYS.Record_General(lu_name_, 'SETUPCREW_SIZE_NOT_ALLOWED: A Setup Crew Size with value > 0 must be specified for labor transactions.');\n      END IF;", "original_code_length": 10352, "summary": null}
{"id": "FaObject_Make_Replace___", "context": {"api_name": "FaObject", "module": "fixass", "file_summary": "Customer order management and processing - FaObject", "function_name": "Make_Replace___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 366, "code_lines": 345, "cyclomatic_complexity": 82, "estimated_tokens": 1335.1000000000001}, "pagerank_score": 0.00021210060479732703, "truncation_metadata": {"original_length": 17990, "truncated_length": 1665, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.0925514174541412}}, "code": "PROCEDURE Make_Replace___ (\n   rec_  IN     FA_OBJECT_TAB%ROWTYPE,\n   attr_ IN OUT VARCHAR2 )\nIS\n   acq_value_              Currency_Values_Rec;\n   attr_state_             VARCHAR2(2000);\n   event_date_             DATE; \n   voucher_date_           DATE;  \n   info_                   VARCHAR2(2000);\n   name_                   VARCHAR2(30);\n   new_object_id_          VARCHAR2(10);\n   nof_acc_trans_          NUMBER;\n-- ... key business logic ...\n      ELSIF (name_ = 'POST_TEMINATION_PAR_CURR') THEN\n      ELSIF (name_ = 'CURR_DIFF_ACC_CURR') THEN\n         lease_termination_values_.curr_diff_acc_curr := Client_SYS.Attr_Value_To_Number(value_);\n      ELSIF (name_ = 'CURR_DIFF_PAR_CURR') THEN\n         lease_termination_values_.curr_diff_par_curr := Client_SYS.Attr_Value_To_Number(value_);\n      ELSIF (name_ = 'POST_ACQ_CON_CURR') THEN\n      ELSIF (name_ = 'POST_ACQ_ACC_CURR') THEN\n      ELSIF (name_ = 'POST_ACQ_PAR_CURR') THEN\n      ELSIF (name_ = 'OBJECT_GROUP_ID') THEN\n      ELSIF (name_ = 'ACCOUNT') THEN\n      ELSIF (name_ = 'OBJECT_TYPE') THEN\n      ELSIF (name_ = 'TERMINATION_TYPE') THEN\n      ELSIF (name_ = 'DISPOSAL_REASON') THEN\n      ELSIF (name_ = 'NEW_OBJECT_VALID_FROM') THEN\n      ELSIF (name_ = 'NEW_OBJECT_VALID_TO') THEN\n      ELSE\n      END IF;   \n   END LOOP;\n   IF (lease_contract_id_ IS NOT NULL) THEN\n   END IF;\n   IF (new_object_id_ is null) THEN\n   END IF;   \n   IF (temp_rec_.object_id IS NULL) THEN\n      IF(NVL(lease_termination_, 'FALSE') = 'FALSE' OR NVL(lease_type_db_, 'NON_LEASE') = 'OPERATING') THEN\n      ELSE\n      END IF;\t  \n   ELSE\n   END IF;\n   -- Check the object status\n   IF NOT (obj_rec_.rowstate = 'Active') THEN", "original_code_length": 17990, "summary": null}
{"id": "VoucherRow_Check_Common___", "context": {"api_name": "VoucherRow", "module": "accrul", "file_summary": "Customer order management and processing - VoucherRow", "function_name": "Check_Common___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 149, "code_lines": 134, "cyclomatic_complexity": 82, "estimated_tokens": 977.6}, "pagerank_score": 0.00021059887642424475, "truncation_metadata": {"original_length": 9675, "truncated_length": 1723, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.17808785529715762}}, "code": "PROCEDURE Check_Common___ (\n   oldrec_ IN     voucher_row_tab%ROWTYPE,\n   newrec_ IN OUT voucher_row_tab%ROWTYPE,\n   indrec_ IN OUT Indicator_Rec,\n   attr_   IN OUT VARCHAR2 )\nIS\n   user_group_          VARCHAR2(30);\n   authorize_level_     VARCHAR2(20);\n   voucher_public_rec_  Voucher_API.Public_Rec;\n   fee_type_            Statutory_Fee_Tab.fee_type%TYPE;\n   company_rec_         Company_Finance_API.Public_Rec;\n   conversion_factor_   NUMBER;\n-- ... key business logic ...\n            IF (newrec_.tax_direction IS NULL ) THEN\n            ELSE\n               IF (fee_type_ = Fee_Type_API.DB_NO_TAX AND newrec_.tax_direction != Tax_Direction_API.DB_NO_TAX) THEN\n               ELSIF (fee_type_ != Fee_Type_API.DB_NO_TAX AND newrec_.tax_direction NOT IN ( Tax_Direction_API.DB_TAX_DISBURSED, Tax_Direction_API.DB_TAX_RECEIVED)) THEN\n               END IF;\n               IF (fee_type_ != Fee_Type_API.DB_NO_TAX ) THEN\n                  IF (((NVL(newrec_.currency_debet_amount,0) - NVL(newrec_.currency_credit_amount,0) < 0) AND newrec_.currency_tax_amount > 0) OR \n                     ((NVL(newrec_.currency_debet_amount,0) - NVL(newrec_.currency_credit_amount,0) > 0) AND newrec_.currency_tax_amount < 0)) THEN\n                     Error_SYS.Record_General(lu_name_, 'DIFFTAXAMOUNTSIGN: Different sign in Currency Tax Amount');\n                  END IF;\n                  IF (((NVL(newrec_.debet_amount,0) - NVL(newrec_.credit_amount,0) < 0) AND NVL(newrec_.tax_amount,0) > 0) OR \n                     ((NVL(newrec_.debet_amount,0) - NVL(newrec_.credit_amount,0) > 0) AND NVL(newrec_.tax_amount,0) < 0)) THEN\n                     Error_SYS.Record_General(lu_name_, 'DIFFACCTAXAMOUNTSIGN: Different sign in Tax Amount');", "original_code_length": 9675, "summary": null}
{"id": "MpccomAccounting_Get_Str_Code_Part___", "context": {"api_name": "MpccomAccounting", "module": "mpccom", "file_summary": "Customer order management and processing - MpccomAccounting", "function_name": "Get_Str_Code_Part___", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 198, "code_lines": 190, "cyclomatic_complexity": 81, "estimated_tokens": 821.6}, "pagerank_score": 0.00028556783042629747, "truncation_metadata": {"original_length": 10412, "truncated_length": 1642, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.15770265078755283}}, "code": "PROCEDURE Get_Str_Code_Part___ (\n   part_fetched_           IN OUT BOOLEAN,\n   control_type_value_tab_ IN OUT Control_Type_Value,\n   control_value_tab_      IN OUT Posting_Ctrl_API.CtrlValTab,\n   control_type_key_rec_   IN     Mpccom_Accounting_API.Control_Type_Key,\n   i_                      IN     NUMBER,\n   posting_type_           IN     VARCHAR2,\n   control_type_name_tab_  IN     Control_Type_Name,\n   control_type_tab_       IN     Posting_Ctrl_API.CtrlTypTab)\nIS\n   part_no_                   VARCHAR2(25);\n   planner_buyer_             VARCHAR2(20);\n-- ... key business logic ...\n      ELSIF (posting_type_ = 'M15') THEN\n         IF (control_type_key_rec_.event_code_ IN ('PURSHIP', 'CO-PURSHIP', 'PURBKFL', 'CO-PURBKFL')) THEN\n         END IF;\n      ELSIF (posting_type_ = 'M4') THEN\n         IF (control_type_key_rec_.event_code_ IN ('PURTRAN')) THEN\n         END IF;   \n      END IF;\n      IF (source_for_part_no_ = from_shop_order_) THEN\n         $IF (Component_Shpord_SYS.INSTALLED) $THEN\n            IF control_type_key_rec_.event_code_ = 'SOISS' AND control_type_key_rec_.so_order_no_ IS NULL THEN\n               -- IF above is satisfied then we know we are simulating a posting for getting a\n            ELSIF control_type_key_rec_.event_code_ = 'OOREC' THEN\n            ELSE --For other transactions use the Shop Order Part No\n               IF (part_no_ IS NULL) THEN\n               END IF;                                                    \n            END IF;\n         $ELSE            \n      ELSIF (source_for_part_no_ = from_production_receipt_) THEN\n         $IF (Component_Prosch_SYS.INSTALLED) $THEN\n         $ELSE", "original_code_length": 10412, "summary": null}
