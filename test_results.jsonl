{"id": "InventoryPart_Check_Value_Method_Change___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Check_Value_Method_Change___", "previous_function": "Check_Value_Method_Combinat___", "next_function": null, "complexity_metrics": {"total_lines": 189, "code_lines": 161, "cyclomatic_complexity": 136, "estimated_tokens": 1244.1000000000001}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 10329, "truncated_length": 1652, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.15993803853228775}}, "code": "PROCEDURE Check_Value_Method_Change___ (\n   newrec_ IN inventory_part_tab%ROWTYPE,\n   oldrec_ IN inventory_part_tab%ROWTYPE )\nIS\n   exist_                   NUMBER;\n   part_exist_              NUMBER;\n   quantity_exist_          BOOLEAN;   \n   qty_to_deliv_confirm_    NUMBER;\n   qty_in_consignment_      NUMBER;\n   qty_in_exchange_         NUMBER;\n   open_shop_orders_exist_  NUMBER := 0;\n   qty_at_customer_fetched_ BOOLEAN := FALSE;\n-- ... key business logic ...\n                 Error_SYS.Record_General(lu_name_, 'PARTSUPPLIER: The inventory valuation method must be :P1 when there are Purchase part suppliers marked with consignment.', Inventory_Value_Method_API.Decode('ST'));\n              END IF;\n           $IF (Component_Purch_SYS.INSTALLED) $THEN\n              exist_ := Purchase_Order_Line_Part_API.Check_Consignment_Exist(newrec_.contract, newrec_.part_no);\n              IF (exist_ = 1) THEN\n                 Error_SYS.Record_General(lu_name_, 'ORDERLINE: The inventory valuation method must be :P1 when there are Purchase order lines marked with consignment.', Inventory_Value_Method_API.Decode('ST'));\n              END IF;\n      END IF;\n      IF newrec_.inventory_valuation_method != 'ST' THEN\n         IF Inventory_Part_In_Stock_API.Is_Part_In_Fa_Rotable_Pool(newrec_.contract, newrec_.part_no) = 1 THEN\n            Error_SYS.Record_General(lu_name_, 'PARTINPOOL: The inventory valuation method must be :P1 when the part exists in a fixed asset rotable part pool.', Inventory_Value_Method_API.Decode('ST'));\n         END IF;\n      END IF;\n   END IF;\n   IF (newrec_.inventory_part_cost_level != oldrec_.inventory_part_cost_level) THEN", "original_code_length": 10329, "summary": ";\n      END IF;\n      IF newrec_.inventory_valuation_method != 'ST' THEN\n         IF Inventory_Part_In_Stock_API.Is_Part_In_Fa_Rotable_Pool(newrec_.contract, newrec_.part_no) = 1 THEN\n            Error_SYS.Record_General(lu_name_, 'PARTINPOOL: The inventory valuation method must be :P1 when the part exists in a fixed asset rotable part pool.', Inventory_Value_Method_API.Decode('ST'));\n         END IF;", "summary_method": "unixcoder_codet5p", "summary_timestamp": 1755970867.503236}
{"id": "InventoryPart_Check_Value_Method_Combinat___", "context": {"api_name": "InventoryPart", "module": "invent", "file_summary": "Customer order management and processing - InventoryPart", "function_name": "Check_Value_Method_Combinat___", "previous_function": "Convert_Storage_Req_Uom___", "next_function": "Check_Value_Method_Change___", "complexity_metrics": {"total_lines": 161, "code_lines": 156, "cyclomatic_complexity": 106, "estimated_tokens": 1206.4}, "pagerank_score": 0.0012877262633896565, "truncation_metadata": {"original_length": 12555, "truncated_length": 1703, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1356431700517722}}, "code": "PROCEDURE Check_Value_Method_Combinat___ (\n   newrec_                        IN inventory_part_tab%ROWTYPE,\n   configurable_db_               IN VARCHAR2,\n   condition_code_usage_db_       IN VARCHAR2,\n   lot_tracking_code_db_          IN VARCHAR2,\n   serial_tracking_code_db_       IN VARCHAR2,\n   receipt_issue_serial_track_db_ IN VARCHAR2 )\nIS\nBEGIN\n\n   IF (newrec_.inventory_valuation_method = 'ST') THEN\n--    **********************************************\n-- ... key business logic ...\n         ELSE\n            IF (newrec_.inventory_part_cost_level != 'COST PER PART') THEN\n            END IF;\n         END IF;\n         IF (newrec_.zero_cost_flag = 'O') THEN\n         END IF;\n      END IF;\n      IF (newrec_.invoice_consideration ='TRANSACTION BASED') THEN\n         IF (newrec_.inventory_part_cost_level != 'COST PER SERIAL') THEN\n         END IF;\n      END IF;\n      IF (newrec_.ext_service_cost_method = 'INCLUDE SERVICE COST') THEN\n         IF (newrec_.inventory_part_cost_level != 'COST PER SERIAL') THEN\n         END IF;\n      END IF;\n   ELSIF (newrec_.inventory_valuation_method = 'AV') THEN\n      IF ((newrec_.negative_on_hand = 'NEG ONHAND OK')) THEN\n      END IF;\n      IF (newrec_.inventory_part_cost_level NOT IN ('COST PER PART',\n                                                    'COST PER LOT BATCH')) THEN\n      END IF;\n      IF (newrec_.inventory_part_cost_level = Inventory_Part_Cost_Level_API.db_cost_per_lot_batch) THEN\n         IF (lot_tracking_code_db_ = Part_Lot_Tracking_API.db_not_lot_tracking) THEN\n            Raise_Lot_Bat_Cost_Lvl_Error___(newrec_);\n         ELSE\n            IF ((serial_tracking_code_db_       = Part_Serial_Tracking_API.db_not_serial_tracking) AND ", "original_code_length": 12555, "summary": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable", "summary_method": "unixcoder_codet5p", "summary_timestamp": 1755970868.7300465}
{"id": "DataCaptureSession_is", "context": {"api_name": "DataCaptureSession", "module": "wadaco", "file_summary": "Business logic and data operations - DataCaptureSession", "function_name": "is", "previous_function": null, "next_function": null, "complexity_metrics": {"total_lines": 116, "code_lines": 111, "cyclomatic_complexity": 104, "estimated_tokens": 2087.8}, "pagerank_score": 0.001353095076110586, "truncation_metadata": {"original_length": 14394, "truncated_length": 1672, "truncation_method": "smart_structure_preserve", "truncation_ratio": 0.1161595109073225}}, "code": "function is being called from the server or client\n--  250220          and Modified Delete___ (), by adding status_changed_by_update_  parameter\n--  250220  DiJwlk  SCDEV-46339, Modified Start_Session, Added Start_Subsequent_Process() to start the subsequent session if the first session is completed with all automatic values.\n--  250220          Added Start_Subsequent_Process and Start_Subsequent_Process___ by moving methods from DataCaptureSessionLine\n--  250214  ImJalk  SCDEV-46881, Modified Remove_Uncompleted_Sessions(), by adding Set_State call and a case statement to Check_Configuration_Status___ call\n--  240805  DiJwlk  SCDEV-38579, Modified Handle_Automatic_Values___(), Added Get_Latest_Value___ to handled data item values scanned by user in a previous session.\n--  240115  DaZase  SCDEV-31747, In Execute_Process__() changed parameter for call to Get_Process_Execution_Message() so capture_session_id_ have replaced capture_process_id_ \n--  240115          as an inparameter, if capture_process_id_ is needed it can still be fetched using capture_session_id_ to call Data_Capture_Session_API.Get(). \n--  240115          capture_session_id_ is more practical to have since it can be used to fetch info from both process/configuration/session.\n--  231221  DaZase  SCDEV-31320, Added Clear_Message() and Exit_Loop_Check() to support new exit loop assistance handling.\n--  231017  DiGrlk  SCZ-22847, Modified Remove_Old_Sessions, updated cursor get_sessions, filtered with data_capture_config criteira.\n--  230614  DaZase  SCDEV-24840, Added 2 new columns LovSortingItemId and LovItemSortDirection to package and added those 2 as new parameters in Modify(). ", "original_code_length": 14394, "summary": "an inparameter.\n--  230614  ImJalk  SCDEV-24840, Modified Start_Subsequent_Process___ by moving methods from DataCaptureSessionLine\n--  230614  ImJalk  SCDEV-24840, Modified Start_Subsequent_Process and Start_Subsequent_Process___ by moving methods from DataCaptureSessionLine\n--  230614  ImJalk  SCDEV-24840, Modified Start_Subsequent_Process and Start_Subsequent_Process___ by moving methods from DataCaptureSessionLine\n--  230614  ImJalk", "summary_method": "unixcoder_codet5p", "summary_timestamp": 1755970869.9828987}
